use TestCase;

package TestCase::Extension {
  sub native_api_get_int_field($test_case : TestCase) : native int;
  
  sub native_api_get_set_field() : int {
    
    my $test_case = TestCase::new();
    
    $test_case->set_x_int(3);

    my $x_int1 = native_api_get_int_field($test_case);
    
    if ($x_int1 == 3) {
      return 1;
    }
  }

  sub sum($num1 : int, $num2 : int) : native int;
  
  sub add_int_array($nums1 : int[], $nums2 : int[]) : native int[];

  sub call_void_sub_exception() : int {
    eval {
      TestCase::Extension::call_void_sub_exception_native();
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  sub call_byte_sub_exception() : int {
    eval {
      TestCase::Extension::call_byte_sub_exception_native();
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  sub call_short_sub_exception() : int {
    eval {
      TestCase::Extension::call_short_sub_exception_native();
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  sub call_int_sub_exception() : int {
    eval {
      TestCase::Extension::call_int_sub_exception_native();
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  sub call_long_sub_exception() : int {
    eval {
      TestCase::Extension::call_long_sub_exception_native();
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  sub call_float_sub_exception() : int {
    eval {
      TestCase::Extension::call_float_sub_exception_native();
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  sub call_double_sub_exception() : int {
    eval {
      TestCase::Extension::call_double_sub_exception_native();
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }
  
  sub call_object_sub_exception() : int {
    eval {
      TestCase::Extension::call_object_sub_exception_native();
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }
  
  sub call_void_sub_exception_native() : native void;
  sub call_byte_sub_exception_native() : native byte;
  sub call_short_sub_exception_native() : native short;
  sub call_int_sub_exception_native() : native int;
  sub call_long_sub_exception_native() : native long;
  sub call_float_sub_exception_native() : native float;
  sub call_double_sub_exception_native() : native double;
  sub call_object_sub_exception_native() : native double;
  
}
