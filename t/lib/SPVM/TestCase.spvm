use TestCase::Weaken;
use TestCase::Minimal;
use TestCase::Destructor;
use TestCase::Extension;
use TestCase::Extension2;

# Standard Library tests
use TestCase::Byte;
use TestCase::Short;
use TestCase::Integer;
use TestCase::Long;
use TestCase::Float;
use TestCase::Double;

use Byte;
use Short;
use Integer;
use Long;
use Float;
use Double;

use Math;

package TestCase {
  has x_byte : byte;
  has x_short : short;
  has x_int : int;
  has x_long : long;
  has x_float : float;
  has x_double : double;
  has x_int_array : int[];
  has x_string : byte[];
  has x_test_case : TestCase;
  has x_weaken : TestCase::Weaken;
  has weaken1 : TestCase::Weaken;
  has weaken2 : TestCase::Weaken;
  has weaken3 : TestCase::Weaken;
  has weaken4 : TestCase::Weaken;
  has minimal : TestCase::Minimal;
  
  enum {
    BYTE_MAX = 127b,
    BYTE_MIN = -128b,
    SHORT_MAX = 32767s,
    SHORT_MIN = -32768s,
    INT_MAX = 2147483647,
    INT_MIN = -2147483648,
    LONG_MAX = 9223372036854775807L,
    LONG_MIN = -9223372036854775808L
  }
  
  enum {
    FLOAT_PRECICE = 16384.5f,
    DOUBLE_PRECICE = 65536.5,
  }
  
  # SPVM set and get
  sub spvm_set_and_get_byte($nums : byte[]) : int {
    
    if ($nums->[0] == 0b) {
      if ($nums->[1] == Byte->MAX_VALUE) {
        return 1;
      }
    }
    
    return 0;
  }
  sub spvm_set_and_get_short($nums : short[]) : int {
    
    if ($nums->[0] == 0s) {
      if ($nums->[1] == TestCase->SHORT_MAX) {
        return 1;
      }
    }
    
    return 0;
  }
  sub spvm_set_and_get_int($nums : int[]) : int {
    
    if ($nums->[0] == 0) {
      if ($nums->[1] == TestCase->INT_MAX) {
        return 1;
      }
    }
    
    return 0;
  }
  sub spvm_set_and_get_long($nums : long[]) : int {
    
    if ($nums->[0] == 0L) {
      if ($nums->[1] == TestCase->LONG_MAX) {
        return 1;
      }
    }
    
    return 0;
  }
  sub spvm_set_and_get_float($nums : float[]) : int {
    
    if ($nums->[0] == 0.0f) {
      if ($nums->[1] == TestCase->FLOAT_PRECICE) {
        return 1;
      }
    }
    
    return 0;
  }
  sub spvm_set_and_get_double($nums : double[]) : int {
    
    if ($nums->[0] == 0.0) {
      if ($nums->[1] == TestCase->DOUBLE_PRECICE) {
        return 1;
      }
    }
    
    return 0;
  }
  
  # Concat
  sub concat_string_special_assign() : byte[] {
    
    my $value = "a";
    
    $value .= "b";
    
    return $value;
  }
  
  sub concat_string_string() : byte[] {
    "a" . "b";
    
    my $value = "a" . "b";
    
    return $value;
  }
  
  sub concat_string_byte() : byte[] {
    my $value = "a" . 3;
    
    return $value;
  }

  sub concat_string_short() : byte[] {
    "a" . 3s;
    
    my $value = "a" . 3s;
    
    return $value;
  }

  sub concat_string_int() : byte[] {
    "a" . 3;
    
    my $value = "a" . 3;
    
    return $value;
  }
  
  sub concat_string_long() : byte[] {
    "a" . 3L;
    
    my $value = "a" . 3L;
    
    return $value;
  }
  
  sub concat_string_float() : byte[] {
    "a" . 3.0f;
    
    my $value = "a" . 3.0f;
    
    return $value;
  }
  
  sub concat_string_double() : byte[] {
    "a" . 3.0;
    
    my $value = "a" . 3.0;
    
    return $value;
  }
  
  # String
  sub string_utf8() : byte[] {
    my $value = "あいうえお";
    
    return $value;
  }
  sub string_empty() : byte[] {
    my $value = "";
    
    return $value;
  }
  
  sub special_assign() : int {
    my $num1 = 1;
    $num1 += 4;
    if ($num1 == 5) {
      my $num2 = 5;
      $num2 -= 2;
      if ($num2 == 3) {
        my $num3 = 3;
        $num3 *= 4;
        if ($num3 == 12) {
          my $num4 = 6;
          $num4 /= 2;
          if ($num4 == 3) {
            my $num5 = 10;
            $num5 %= 4;
            if ($num5 == 2) {
              my $num6 = 8;
              $num6 <<= 1;
              if ($num6 == 16) {
                my $num7 = -8;
                $num7 >>= 1;
                if ($num7 == -4) {
                  my $num8 = 0xFFFFFFFF;
                  $num8 >>>= 1;
                  if ($num8 == 0x7FFFFFFF) {
                    my $num9 = 0xFFFFFF00;
                    $num9 &= 0xFF;
                    if ($num9 == 0) {
                      my $num10 = 0xFFFFFF00;
                      $num10 |= 0xFF;
                      if ($num10 == 0xFFFFFFFF) {
                        my $num11 = 0xFFFFFF00;
                        $num11 ^= 0xFFFF;
                        if ($num11 == 0xFFFF00FF) {
                          return 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    
    return 0;
  }
  sub sin() : int {
    my $value = Math::sin(Math->PI);
    
    if ($value < 0.000001 && $value > -0.000001) {
      return 1;
    }
    return 0;
  }

  sub cos() : int {
    my $value = Math::cos(Math->PI / 2.0);
    
    if ($value < 0.000001 && $value > -0.000001) {
      return 1;
    }
    return 0;
  }
  
  sub tan() : int {
    my $value = Math::tan(Math->PI / 4.0);
    
    if ($value - 1.0 < 0.000001 && $value - 1.0 > -0.000001) {
      return 1;
    }
    return 0;
  }

  sub spvm_extension() : int {
    my $total = TestCase::Extension::sum(2, 3);
    
    if ($total == 5) {
      return 1;
    }
    
    return 0;
  }

  sub spvm_extension_add_int_array() : int {
    my $nums1 = [1, 2, 3];
    my $nums2 = [4, 5, 6];
    
    my $nums3 = TestCase::Extension::add_int_array($nums1, $nums2);
    
    if ($nums3->[0] == 5) {
      if ($nums3->[1] == 7) {
        if ($nums3->[2] == 9) {
          return 1;
        }
      }
    }
    
    return 0;
  }

  
  sub spvm_extension2() : int {
    my $total = TestCase::Extension2::mul(5, 3);
    
    if ($total == 15) {
      return 1;
    }
    
    return 0;
  }

  sub spvm_extension2_binding() : int {
    my $total = TestCase::Extension2::one();
    
    if ($total == 1) {
      return 1;
    }
    
    return 0;
  }
  
  sub exception_eval_call_sub() : int {
    eval {
      exception_die_return_int();
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }
  
  sub exception_call_stack() : int {
    exception_die_return_int();
  }
  
  sub exception_die_return_byte() : byte {
    die "Error";
  }
  
  sub exception_die_return_short() : short {
    die "Error";
  }
  
  sub exception_die_return_int() : int {
    die "Error";
  }
  
  sub exception_die_return_long() : long {
    die "Error";
  }
  
  sub exception_die_return_float() : float {
    die "Error";
  }
  
  sub exception_die_return_double() : double {
    die "Error";
  }
  
  sub exception_die_return_object() : TestCase::Minimal {
    die "Error";
  }
  
  sub exception_die_return_void() : void {
    die "Error";
  }

  sub exception_die_return_int_eval_catch() : int {
    eval {
      die "Error";
    };
    
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  sub call_sub_last_camma() : int {
    
    my $total = sum_int(3, 4,);
    
    if ($total == 7) {
      return 1;
    }
    
    return 0;
  }
  
  sub destructor() : int {
    my $minimal = new TestCase::Minimal;
    destructor_call($minimal);
    
    if ($minimal->{x} == 3) {
      return 1;
    }
    return 0;
  }
  
  sub destructor_call($minimal: TestCase::Minimal) : int {
    my $dest = new TestCase::Destructor;
    $dest->{minimal} = $minimal;
  }
  
  sub weaken_target4_weaken_object_assign() : int {
    my $test_case = new TestCase;
    $test_case->{x_int} = 2;
    my $weaken1 = new TestCase::Weaken;
    my $weaken2 = new TestCase::Weaken;
    my $weaken3 = new TestCase::Weaken;
    my $weaken4 = new TestCase::Weaken;
    
    $test_case->{weaken1} = $weaken1;
    $test_case->{weaken2} = $weaken2;
    $test_case->{weaken3} = $weaken3;
    $test_case->{weaken4} = $weaken4;
    
    $weaken1->{test_case} = $test_case;
    $weaken2->{test_case} = $test_case;
    $weaken3->{test_case} = $test_case;
    $weaken4->{test_case} = $test_case;
    
    weaken $weaken1->{test_case};
    weaken $weaken2->{test_case};
    weaken $weaken3->{test_case};
    weaken $weaken4->{test_case};
    
    $weaken2->{test_case} = undef;
    my $test_case2 = new TestCase;
    $weaken4->{test_case} = $test_case2;
    
    if ($test_case->{x_int} == 2) {
      return 1;
    }
    return 0;
  }
  
  sub weaken_target4() : int {
    my $test_case = new TestCase;
    $test_case->{x_int} = 2;
    my $weaken1 = new TestCase::Weaken;
    my $weaken2 = new TestCase::Weaken;
    my $weaken3 = new TestCase::Weaken;
    my $weaken4 = new TestCase::Weaken;
    
    $test_case->{weaken1} = $weaken1;
    $test_case->{weaken2} = $weaken2;
    $test_case->{weaken3} = $weaken3;
    $test_case->{weaken4} = $weaken4;
    
    $weaken1->{test_case} = $test_case;
    $weaken2->{test_case} = $test_case;
    $weaken3->{test_case} = $test_case;
    $weaken4->{test_case} = $test_case;
    
    weaken $weaken1->{test_case};
    weaken $weaken2->{test_case};
    weaken $weaken3->{test_case};
    weaken $weaken4->{test_case};

    if ($test_case->{x_int} == 2) {
      return 1;
    }
    return 0;
  }
  
  sub weaken_weaken_object_undef() : int {
    my $weaken = new TestCase::Weaken;
    my $test_case = new TestCase;
    $test_case->{x_int} = 2;
    
    $test_case->{x_weaken} = $weaken;
    $weaken->{test_case} = $test_case;
    
    weaken $test_case->{x_weaken};
    $test_case->{x_weaken} = undef;
    
    if ($test_case->{x_weaken} == undef) {
      if ($test_case->{x_int} == 2) {
        return 1;
      }
    }
    return 0;
  }
  
  sub weaken_target_object_undef() : int {
    my $weaken = new TestCase::Weaken;
    my $test_case = new TestCase;

    $test_case->{x_weaken} = $weaken;
    $weaken->{test_case} = $test_case;
    
    weaken $test_case->{x_weaken};
    $weaken = undef;
    
    if ($test_case->{x_weaken} == undef) {
      return 1;
    }
    return 0;
  }
  
  sub weaken_recursive3() : int {
    my $weaken = new TestCase::Weaken;
    my $weaken2 = new TestCase::Weaken2;
    my $test_case = new TestCase;
    $test_case->{x_weaken} = $weaken;
    $weaken->{weaken2} = $weaken2;
    $weaken2->{test_case} = $test_case;
    
    weaken $test_case->{x_weaken};
    
    return 1;
  }
  
  sub weaken_reference_count1_object() : int {
    my $weaken = new TestCase::Weaken;
    my $test_case = new TestCase;
    
    $test_case->{x_weaken} = $weaken;
    $weaken = undef;
    weaken $test_case->{x_weaken};
    
    if ($test_case->{x_weaken} == undef) {
      return 1;
    }
    
    return 0;
  }

  sub weaken_recursive_again() : void {
    my $weaken = new TestCase::Weaken;
    
    # Recuresive reference
    my $test_case = new TestCase;
    $test_case->{x_weaken} = $weaken;
    
    $weaken->{test_case} = $test_case;
    
    weaken $test_case->{x_weaken};
    weaken $test_case->{x_weaken};
  }
  
  sub weaken_recursive() : int {
    my $weaken = new TestCase::Weaken;
    $weaken->{x1} = 1;
    
    # Recuresive reference
    my $test_case = new TestCase;
    $test_case->{x_weaken} = $weaken;
    $test_case->{x_int} = 2;
    
    $weaken->{test_case} = $test_case;
    
    weaken $test_case->{x_weaken};
    
    if ($weaken->{x1} == 1) {
      if ($test_case->{x_int} == 2) {
        return 1;
      }
    }
    return 0;
  }
  
  sub weaken_self_recuresive() : int {
    my $test_case = new TestCase;
    $test_case->{x_int} = 5;
    
    # Recuresive reference
    $test_case->{x_test_case} = $test_case;
    
    weaken $test_case->{x_test_case};
    
    if ($test_case->{x_int} == 5) {
      return 1;
    }
    
    return 0;
  }

  sub spvm_new_object_array_len_element_byte_array($nums : byte[][]) : int {
    if ($nums->[0][0] == (byte)1) {
      if ($nums->[0][1] == (byte)2) {
        if ($nums->[0][2] == (byte)3) {
          if ($nums->[1][0] == (byte)4) {
            if ($nums->[1][1] == (byte)5) {
              if ($nums->[1][2] == (byte)6) {
                return ;
              }
            }
          }
        }
      }
    }
    
    return 0;
  }

  sub spvm_new_object_array_len_element_short_array($nums : short[][]) : int {
    if ($nums->[0][0] == (short)1) {
      if ($nums->[0][1] == (short)2) {
        if ($nums->[0][2] == (short)3) {
          if ($nums->[1][0] == (short)4) {
            if ($nums->[1][1] == (short)5) {
              if ($nums->[1][2] == (short)6) {
                return ;
              }
            }
          }
        }
      }
    }
    
    return 0;
  }

  sub spvm_new_object_array_len_element_int_array($nums : int[][]) : int {
    if ($nums->[0][0] == 1) {
      if ($nums->[0][1] == 2) {
        if ($nums->[0][2] == 3) {
          if ($nums->[1][0] == 4) {
            if ($nums->[1][1] == 5) {
              if ($nums->[1][2] == 6) {
                return ;
              }
            }
          }
        }
      }
    }
    
    return 0;
  }

  sub spvm_new_object_array_len_element_long_array($nums : long[][]) : int {
    if ($nums->[0][0] == (long)1) {
      if ($nums->[0][1] == (long)2) {
        if ($nums->[0][2] == (long)3) {
          if ($nums->[1][0] == (long)4) {
            if ($nums->[1][1] == (long)5) {
              if ($nums->[1][2] == (long)6) {
                return ;
              }
            }
          }
        }
      }
    }
    
    return 0;
  }

  sub spvm_new_object_array_len_element_float_array($nums : float[][]) : int {
    if ($nums->[0][0] == (float)1) {
      if ($nums->[0][1] == (float)2) {
        if ($nums->[0][2] == (float)3) {
          if ($nums->[1][0] == (float)4) {
            if ($nums->[1][1] == (float)5) {
              if ($nums->[1][2] == (float)6) {
                return ;
              }
            }
          }
        }
      }
    }
    
    return 0;
  }

  sub spvm_new_object_array_len_element_double_array($nums : double[][]) : int {
    if ($nums->[0][0] == (double)1) {
      if ($nums->[0][1] == (double)2) {
        if ($nums->[0][2] == (double)3) {
          if ($nums->[1][0] == (double)4) {
            if ($nums->[1][1] == (double)5) {
              if ($nums->[1][2] == (double)6) {
                return ;
              }
            }
          }
        }
      }
    }
    
    return 0;
  }

  sub spvm_new_object_array_len_element_object_array($nums : TestCase[]) : int {
    if ($nums->[0]{x_int} == 1) {
      if ($nums->[1]{x_int} == 2) {
        return 1;
      }
    }
    
    return 0;
  }

  # Call void function
  sub call_void_sub($nums : int[]) : void {
    $nums->[0] = 5;
  }
  sub call_void() : int {
    my $nums = [1];
    
    call_void_sub($nums);
    
    if ($nums->[0] == 5) {
      return 1;
    }
    return 0;
  }
  
  # Exception
  sub exception_zero_divide_int() : int {
    1 / 0;
  }
  
  # Default return value empty
  sub default_return_value_byte() : int {
    
    if (default_return_value_byte_sub() == (byte)0) {
      if (default_return_value_byte_sub_empty() == (byte)0) {
        return 1;
      }
    }
    
    return 0;
  }
  sub default_return_value_byte_sub() : byte {
    1;
  }
  sub default_return_value_byte_sub_empty() : byte {
    
  }
  sub default_return_value_short() : int {
    
    if (default_return_value_short_sub() == (short)0) {
      if (default_return_value_short_sub_empty() == (short)0) {
        return 1;
      }
    }
    
    return 0;
  }
  sub default_return_value_short_sub() : short {
    1;
  }
  sub default_return_value_short_sub_empty() : short {
    
  }
  sub default_return_value_int() : int {
    
    if (default_return_value_int_sub() == (int)0) {
      if (default_return_value_int_sub_empty() == (int)0) {
        return 1;
      }
    }
    
    return 0;
  }
  sub default_return_value_int_sub() : int {
    1;
  }
  sub default_return_value_int_sub_empty() : int {
    
  }
  sub default_return_value_long() : int {
    
    if (default_return_value_long_sub() == (long)0) {
      if (default_return_value_long_sub_empty() == (long)0) {
        return 1;
      }
    }
    
    return 0;
  }
  sub default_return_value_long_sub() : long {
    1;
  }
  sub default_return_value_long_sub_empty() : long {
    
  }
  sub default_return_value_float() : int {
    
    if (default_return_value_float_sub() == (float)0) {
      if (default_return_value_float_sub_empty() == (float)0) {
        return 1;
      }
    }
    
    return 0;
  }
  sub default_return_value_float_sub() : float {
    1;
  }
  sub default_return_value_float_sub_empty() : float {
    
  }
  sub default_return_value_double() : int {
    
    if (default_return_value_double_sub() == (double)0) {
      if (default_return_value_double_sub_empty() == (double)0) {
        return 1;
      }
    }
    
    return 0;
  }
  sub default_return_value_double_sub() : double {
    1;
  }
  sub default_return_value_double_sub_empty() : double {
    
  }
  sub default_return_value_object() : int {
    
    if (default_return_value_object_sub() == undef) {
      if (default_return_value_object_sub_empty() == undef) {
        return 1;
      }
    }
    
    return 0;
  }
  sub default_return_value_object_sub() : TestCase {
    1;
  }
  sub default_return_value_object_sub_empty() : TestCase {
    
  }
  
  # Switch - nest
  sub switch_nest() : int {
    my $success1;
    switch (3) {
      case 1:
        $success1 = 0;
        last;
      case 3:
        switch (5) {
          case 2:
            $success1 = 0;
            last;
          case 5:
            $success1 = 1;
            last;
          case 6:
            $success1 = 0;
            last;
          default:
            $success1 = 0;
            last;
        }
        last;
      case 10000:
        $success1 = 0;
        last;
      default:
    }
    
    return $success1;
  }
  
  # Switch - lookup switch
  sub switch_lookup_switch() : int {
    my $success1;
    switch (1) {
      case 1:
        $success1 = 1;
        last;
      case 3:
        $success1 = 0;
        last;
      case 10000:
        $success1 = 0;
        last;
      default:
    }
    my $success2;
    switch (3) {
      case 1:
        $success2 = 0;
        last;
      case 3:
        $success2 = 1;
        last;
      case 10000:
        $success2 = 0;
        last;
      default:
    }
    my $success3;
    switch (10000) {
      case 1:
        $success3 = 0;
        last;
      case 3:
        $success3 = 0;
        last;
      case 10000:
        $success3 = 1;
        last;
      default:
    }
    my $success4;
    switch (2) {
      case 1:
        last;
      case 3:
        last;
      case 10000:
        last;
      default:
        $success4 = 1;
    }
    
    if ($success1) {
      if ($success2) {
        if ($success3) {
          if ($success4) {
            return 1;
          }
        }
      }
    }
    return 0;
  }
  
  # Switch - table switch
  sub switch_table_switch() : int {
    my $success1;
    
    switch(3) {
      case 3:
        $success1 = 1;
        last;
      case 4:
        $success1 = 0;
        last;
      case 5:
        $success1 = 0;
        last;
      default:
    }

    my $success2;
    switch(4) {
      case 3:
        $success2 = 0;
        last;
      case 4:
        $success2 = 1;
        last;
      case 5:
        $success2 = 0;
        last;
      default:
    }
    my $success3;
    switch(10) {
      case 3:
        $success3 = 0;
        last;
      case 4:
        $success3 = 0;
        last;
      case 5:
        $success3 = 0;
        last;
      default:
        $success3 = 1;
    }
    
    if ($success1) {
      if ($success2) {
        if ($success3) {
          return 1;
        }
      }
    }
    
    return 0;
  }
  
  # My variable is initialized zero
  sub my_var_initialized_zero() : int {
    my $var1 : int;
    my $var2 : TestCase;
    
    if ($var1 == 0) {
      if ($var2 == undef) {
        return 1;
      }
    }
    return 0;
  }
  
  # Object field is initialized zero
  sub object_field_initialized_zero() : int {
    my $obj = new TestCase;
    if ($obj->{x_byte} == (byte)0) {
      if ($obj->{x_int} == 0) {
        if ($obj->{x_string} == undef) {
          return 1;
        }
      }
    }
    return 0;
  }
  
  # Object field set and get
  sub object_field_set_and_get() : int {
    my $test_case = new TestCase;
    
    $test_case->{x_byte} = Byte->MAX_VALUE;
    $test_case->{x_short} = TestCase->SHORT_MAX;
    $test_case->{x_int} = TestCase->INT_MAX;
    $test_case->{x_long} = TestCase->LONG_MAX;
    $test_case->{x_float} = TestCase->FLOAT_PRECICE;
    $test_case->{x_double} = TestCase->DOUBLE_PRECICE;
    my $minimal = new TestCase::Minimal;
    $minimal->{x} = 3;
    $test_case->{minimal} = $minimal;
    if ($test_case->{x_byte} == Byte->MAX_VALUE) {
      if ($test_case->{x_short} == TestCase->SHORT_MAX) {
        if ($test_case->{x_int} == TestCase->INT_MAX) {
          if ($test_case->{x_long} == TestCase->LONG_MAX) {
            if ($test_case->{x_float} == TestCase->FLOAT_PRECICE) {
              if ($test_case->{x_double} == TestCase->DOUBLE_PRECICE) {
                if ($test_case->{minimal}{x} == 3) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }

  # Object field set and get
  sub object_field_set_and_get_again() : int {
    my $test_case = new TestCase;
    
    $test_case->{x_byte} = Byte->MAX_VALUE;
    $test_case->{x_short} = TestCase->SHORT_MAX;
    $test_case->{x_int} = TestCase->INT_MAX;
    $test_case->{x_long} = TestCase->LONG_MAX;
    $test_case->{x_float} = TestCase->FLOAT_PRECICE;
    $test_case->{x_double} = TestCase->DOUBLE_PRECICE;
    my $minimal = new TestCase::Minimal;
    $minimal->{x} = 3;
    $test_case->{minimal} = $minimal;

    $test_case->{x_byte} = Byte->MAX_VALUE;
    $test_case->{x_short} = TestCase->SHORT_MAX;
    $test_case->{x_int} = TestCase->INT_MAX;
    $test_case->{x_long} = TestCase->LONG_MAX;
    $test_case->{x_float} = TestCase->FLOAT_PRECICE;
    $test_case->{x_double} = TestCase->DOUBLE_PRECICE;
    $test_case->{minimal} = $minimal;

    if ($test_case->{x_byte} == Byte->MAX_VALUE) {
      if ($test_case->{x_short} == TestCase->SHORT_MAX) {
        if ($test_case->{x_int} == TestCase->INT_MAX) {
          if ($test_case->{x_long} == TestCase->LONG_MAX) {
            if ($test_case->{x_float} == TestCase->FLOAT_PRECICE) {
              if ($test_case->{x_double} == TestCase->DOUBLE_PRECICE) {
                if ($test_case->{minimal}{x} == 3) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }

  # new near small base_object_max_byte_size_use_memory_pool
  sub new_near_small_base_object_max_byte_size_use_memory_pool() : int {
    my $block = new byte[0xFFF0];
    
    return 1;
  }

  sub array_default_zero_not_memory_pool() : int {
    my $values_byte = new byte[1000000];
    my $values_short = new short[1000000];
    my $values_int = new int[1000000];
    my $values_long = new long[1000000];
    my $values_float = new float[1000000];
    my $values_double = new double[1000000];
    my $values_object = new TestCase[1000000];
    if ($values_byte->[0] == 0b) {
      if ($values_byte->[999999] == 0b) {
        if ($values_short->[0] == 0s) {
          if ($values_short->[999999] == 0s) {
            if ($values_int->[0] == 0) {
              if ($values_int->[999999] == 0) {
                if ($values_long->[0] == 0L) {
                  if ($values_long->[999999] == 0L) {
                    if ($values_float->[0] == 0f) {
                      if ($values_float->[999999] == 0f) {
                        if ($values_double->[0] == 0.0) {
                          if ($values_double->[999999] == 0.0) {
                            return 1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return 1;
      }
    }
    
    return 0;
  }
  sub array_default_zero_memory_pool() : int {
    my $values_byte = new byte[10];
    my $values_short = new short[10];
    my $values_int = new int[10];
    my $values_long = new long[10];
    my $values_float = new float[10];
    my $values_double = new double[10];
    my $values_object = new TestCase[10];
    if ($values_byte->[0] == 0b) {
      if ($values_byte->[9] == 0b) {
        if ($values_short->[0] == 0s) {
          if ($values_short->[9] == 0s) {
            if ($values_int->[0] == 0) {
              if ($values_int->[9] == 0) {
                if ($values_long->[0] == 0L) {
                  if ($values_long->[9] == 0L) {
                    if ($values_float->[0] == 0f) {
                      if ($values_float->[9] == 0f) {
                        if ($values_double->[0] == 0.0) {
                          if ($values_double->[9] == 0.0) {
                            return 1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return 1;
      }
    }
    
    return 0;
  }
  sub array_init_byte() : int {
    my $nums = [1b, 2b, 3b];
    
    if ($nums->[0] == 1b) {
      if ($nums->[1] == 2b) {
        if ($nums->[2] == 3b) {
          return 1;
        }
      }
    }
    return 0;
  }
  sub array_init_short() : int {
    my $nums = [1s, 2s, 3s];
    
    if ($nums->[0] == 1s) {
      if ($nums->[1] == 2s) {
        if ($nums->[2] == 3s) {
          return 1;
        }
      }
    }
    return 0;
  }
  sub array_init_int () : int {
    my $nums = [1, 2, 3];
    
    if ($nums->[0] == 1) {
      if ($nums->[1] == 2) {
        if ($nums->[2] == 3) {
          return 1;
        }
      }
    }
    return 0;
  }
  sub array_init_long() : int {
    my $nums = [1L, 2L, 3L];
    
    if ($nums->[0] == 1L) {
      if ($nums->[1] == 2L) {
        if ($nums->[2] == 3L) {
          return 1;
        }
      }
    }
    return 0;
  }
  sub array_init_float() : int {
    my $nums = [1f, 2f, 3f];
    
    if ($nums->[0] == 1f) {
      if ($nums->[1] == 2f) {
        if ($nums->[2] == 3f) {
          return 1;
        }
      }
    }
    return 0;
  }
  sub array_init_double() : int {
    my $nums = [1d, 2d, 3d];
    
    if ($nums->[0] == 1d) {
      if ($nums->[1] == 2d) {
        if ($nums->[2] == 3d) {
          return 1;
        }
      }
    }
    return 0;
  }
  sub get_object_from_freelist () : int {
    get_object_from_freelist_check();
    
    my $result = new int[65];
    $result->[64] = 0;
    
    return 1;
  }
  sub get_object_from_freelist_check () : int[] {
    my $result = new int[63];
    my $true_result = new int[1];
    return $true_result;
  }

  enum {
    BYTE_ZERO = 0b,
    BYTE_ONE,
    BYTE_THREE = 3b,
    BYTE_FOUR,
    BYTE_SIX = 6b,
    BYTE_MINUS_MAX = -128b
  }
  sub enum_byte () : int {
    if (TestCase->BYTE_ZERO == (byte)0) {
      if (TestCase->BYTE_ONE == (byte)1) {
        if (TestCase->BYTE_THREE == (byte)3) {
          if (TestCase->BYTE_FOUR == (byte)4) {
            if (TestCase->BYTE_SIX == (byte)6) {
              if (TestCase->BYTE_MINUS_MAX == (byte)-128) {
                return 1;
              }
            }
          }
        }
      }
    }
    
    return 0;
  }

  enum {
    SHORT_ZERO = 0s,
    SHORT_ONE,
    SHORT_THREE = 3s,
    SHORT_FOUR,
    SHORT_SIX = 6s,
    SHORT_MINUS_MAX = -32768s
  }
  sub enum_short () : int {
    if (TestCase->SHORT_ZERO == (short)0) {
      if (TestCase->SHORT_ONE == (short)1) {
        if (TestCase->SHORT_THREE == (short)3) {
          if (TestCase->SHORT_FOUR == (short)4) {
            if (TestCase->SHORT_SIX == (short)6) {
              if (TestCase->SHORT_MINUS_MAX == (short)-32768) {
                return 1;
              }
            }
          }
        }
      }
    }
    
    return 0;
  }

  enum {
    INT_ZERO,
    INT_ONE,
    INT_THREE = 3,
    INT_FOUR,
    INT_SIX = 6,
    INT_MINUS_MAX = -2147483648
  }
  sub enum_int () : int {
    
    if (TestCase->INT_ZERO == 0) {
      if (TestCase->INT_ONE == 1) {
        if (TestCase->INT_THREE == 3) {
          if (TestCase->INT_FOUR == 4) {
            if (TestCase->INT_SIX == 6) {
              if (TestCase->INT_MINUS_MAX == -2147483648) {
                return 1;
              }
            }
          }
        }
      }
    }
    
    return 0;
  }
  
  enum {
    LONG_ZERO = 0L,
    LONG_ONE,
    LONG_THREE = 3L,
    LONG_MINUS_MAX = -9223372036854775808L
  }
  
  sub enum_long () : int {
    if (TestCase->LONG_ZERO == 0L) {
      if (TestCase->LONG_ONE == 1L) {
        if (TestCase->LONG_THREE == 3L) {
          if (TestCase->LONG_MINUS_MAX == -9223372036854775808L) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }
  
  enum {
    FLOAT_ZERO = 0.25f,
    FLOAT_ONE = 1.0f,
    FLOAT_THREE = 2.5f,
    FLOAT_MINUS_ZERO = -0.25f
  }

  sub enum_float () : int {
    if (TestCase->FLOAT_ZERO == 0.25f) {
      if (TestCase->FLOAT_ONE == 1.0f) {
        if (TestCase->FLOAT_THREE == 2.5f) {
          if (TestCase->FLOAT_MINUS_ZERO == -0.25f) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  enum {
    DOUBLE_ZERO = 0.25,
    DOUBLE_ONE = 1.0,
    DOUBLE_THREE = 2.5,
    DOUBLE_MINUS_ZERO = -0.25
  }

  sub enum_double () : int {
    if (TestCase->DOUBLE_ZERO == 0.25) {
      if (TestCase->DOUBLE_ONE == 1.0) {
        if (TestCase->DOUBLE_THREE == 2.5) {
          if (TestCase->DOUBLE_MINUS_ZERO == -0.25) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  # Convert type - floating point narrowing convertion
  sub convert_float_to_byte() : int {
    my $value = (byte)127.1f;
    
    if ($value == (byte)127) {
      return 1;
    }
    
    return 0;
  }
  sub convert_float_to_short() : int {
    my $value = (short)32767.1f;
    
    if ($value == (short)32767) {
      return 1;
    }
    
    return 0;
  }
  sub convert_float_to_int() : int {
    my $value = (int)132767.1f;
    
    if ($value == 132767) {
      return 1;
    }
    
    return 0;
  }
  sub convert_float_to_long() : int {
    my $value = (long)132767.1f;
    
    if ($value == 132767L) {
      return 1;
    }
    
    return 0;
  }
  sub convert_double_to_byte() : int {
    my $value = (byte)127.1;
    
    if ($value == (byte)127) {
      return 1;
    }
    
    return 0;
  }
  sub convert_double_to_short() : int {
    my $value = (short)32767.1;
    
    if ($value == (short)32767) {
      return 1;
    }
    
    return 0;
  }
  sub convert_double_to_int() : int {
    my $value = (int)2147483646.1;
    
    if ($value == 2147483646) {
      return 1;
    }
    
    return 0;
  }
  sub convert_double_to_long() : int {
    my $value = (long)2147483646.1;
    
    if ($value == 2147483646L) {
      return 1;
    }
    
    return 0;
  }
  sub convert_double_to_float() : int {
    my $value = (float)346638529e+38;
    
    if ($value == (float)346638529e+38f) {
      return 1;
    }
    
    return 0;
  }
  
  # Convert type - floating point widning convertion
  sub convert_byte_to_float() : int {
    my $value = (float)(byte)127;
    
    if ($value == 127.0f) {
      return 1;
    }
    
    return 0;
  }
  sub convert_short_to_float() : int {
    my $value = (float)(short)32767;
    
    if ($value == 32767.0f) {
      return 1;
    }
    
    return 0;
  }
  sub convert_int_to_float() : int {
    my $value = (float)32767;
    
    if ($value == 32767.0f) {
      return 1;
    }
    
    return 0;
  }
  sub convert_long_to_float() : int {
    my $value = (float)32767L;
    
    if ($value == 32767.0f) {
      return 1;
    }
    
    return 0;
  }
  sub convert_byte_to_double() : int {
    my $value = (double)(byte)127;
    
    if ($value == 127.0) {
      return 1;
    }
    
    return 0;
  }
  sub convert_short_to_double() : int {
    my $value = (double)(short)32767;
    
    if ($value == 32767.0) {
      return 1;
    }
    
    return 0;
  }
  sub convert_int_to_double() : int {
    my $value = (double)2147483647;
    if ($value == 2147483647.0) {
      return 1;
    }
    
    return 0;
  }
  sub convert_long_to_double() : int {
    my $value = (double)2147483647L;
    
    if ($value == 2147483647.0) {
      return 1;
    }
    
    return 0;
  }
  sub convert_float_to_double() : int {
    my $value = (double)32767.0f;
    
    if ($value == 32767.0) {
      return 1;
    }
    
    return 0;
  }
  
  # Convert type - widning convertion
  sub convert_byte_to_short_plus() : int {
    my $value = (short)(byte)0x7F;
    
    if ($value == (short)0x007F) {
      return 1;
    }
    
    return 0;
  }
  sub convert_byte_to_short_minus() : int {
    my $value = (short)(byte)0xFF;
    
    if ($value == (short)0xFFFF) {
      return 1;
    }
    
    return 0;
  }
  sub convert_byte_to_int_plus() : int {
    my $value = (int)(byte)0x7F;
    
    if ($value == 0x0000007F) {
      return 1;
    }
    
    return 0;
  }
  sub convert_byte_to_int_minus() : int {
    my $value = (int)(byte)0xFF;
    
    if ($value == 0xFFFFFFFF) {
      return 1;
    }
    
    return 0;
  }
  sub convert_byte_to_long_plus() : int {
    my $value = (long)(byte)0x7F;
    
    if ($value == 0x000000000000007FL) {
      return 1;
    }
    
    return 0;
  }
  sub convert_byte_to_long_minus() : int {
    my $value = (long)(byte)0xFF;
    
    if ($value == 0xFFFFFFFFFFFFFFFFL) {
      return 1;
    }
    
    return 0;
  }
  sub convert_short_to_int_plus() : int {
    my $value = (int)(short)0x7FFF;
    
    if ($value == 0x0000007FFF) {
      return 1;
    }
    
    return 0;
  }
  sub convert_short_to_int_minus() : int {
    my $value = (int)(short)0xFFFF;
    
    if ($value == 0xFFFFFFFF) {
      return 1;
    }
    
    return 0;
  }
  sub convert_short_to_long_plus() : int {
    my $value = (long)(short)0x7FFF;
    
    if ($value == 0x000000000000007FFFL) {
      return 1;
    }
    
    return 0;
  }
  sub convert_short_to_long_minus() : int {
    my $value = (long)(short)0xFFFF;
    
    if ($value == 0xFFFFFFFFFFFFFFFFL) {
      return 1;
    }
    
    return 0;
  }
  sub convert_int_to_long_plus() : int {
    my $value = (long)0x7FFFFFFF;
    
    if ($value == 0x000000007FFFFFFFL) {
      return 1;
    }
    
    return 0;
  }
  sub convert_int_to_long_minus() : int {
    my $value = (long)0xFFFFFFFF;
    
    if ($value == 0xFFFFFFFFFFFFFFFFL) {
      return 1;
    }
    
    return 0;
  }
  
  # Convert type - convert to same type
  sub convert_long_to_long() : int {
    my $value = (long)0xFFFFFFFFFFFFFFFFL;
    
    if ($value == 0xFFFFFFFFFFFFFFFFL) {
      return 1;
    }
    
    return 0;
  }
  sub convert_int_to_int() : int {
    my $value = (int)0xFFFFFFFF;
    
    if ($value == 0xFFFFFFFF) {
      return 1;
    }
    
    return 0;
  }
  sub convert_short_to_short() : int {
    my $value = (short)(short)0xFFFF;
    
    if ($value == (short)0xFFFF) {
      return 1;
    }
    
    return 0;
  }
  sub convert_byte_to_byte() : int {
    my $value = (byte)(byte)0xFF;
    
    if ($value == (byte)0xFF) {
      return 1;
    }
    
    return 0;
  }
  sub convert_float_to_float() : int {
    my $value = (float)0.5f;
    
    if ($value == 0.5f) {
      return 1;
    }
    
    return 0;
  }
  sub convert_double_to_double() : int {
    my $value = (double)0.5;
    
    if ($value == 0.5) {
      return 1;
    }
    
    return 0;
  }
  
  # Convert type - integral narrowing convertion
  sub convert_long_to_int() : int {
    my $value = (int)0xFFFFFFFFFFFFFFFFL;
    
    if ($value == 0xFFFFFFFF) {
      return 1;
    }
    
    return 0;
  }
  sub convert_long_to_short() : int {
    my $value = (short)0xFFFFFFFFFFFFFFFFL;
    
    if ($value == (short)0xFFFF) {
      return 1;
    }
    
    return 0;
  }
  sub convert_long_to_byte() : int {
    my $value = (byte)0xFFFFFFFFFFFFFFFFL;
    
    if ($value == (byte)0xFF) {
      return 1;
    }
    
    return 0;
  }
  sub convert_int_to_short() : int {
    my $value = (short)0xFFFFFFFF;
    
    if ($value == (short)0xFFFF) {
      return 1;
    }
    
    return 0;
  }
  sub convert_int_to_byte() : int {
    my $value = (byte)0xFFFFFFFF;
    
    if ($value == (byte)0xFF) {
      return 1;
    }
    
    return 0;
  }
  sub convert_short_to_byte() : int {
    my $value = (byte)(short)0xFFFF;
    
    if ($value == (byte)0xFF) {
      return 1;
    }
    
    return 0;
  }
  
  sub spvm_object_set_object($obj : TestCase) : int {
    my $nums = $obj->{x_int_array};
    my $values = ($obj->{x_string});
    
    # [INT_MAX, INT_MAX]
    if (@$nums == 2) {
      if ($nums->[0] == 2147483647) {
        if ($nums->[1] == 2147483647) {
          # abc
          if ($values->[0] == (byte)97) {
            if ($values->[1] == (byte)98) {
              if ($values->[2] == (byte)99) {
                if (@$values == 3) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
    
    return 0;
  }

  sub spvm_object_set($obj : TestCase) : int {
    if ($obj->{x_byte} == (byte)127) {
      if ($obj->{x_short} == (short)32767) {
        if ($obj->{x_int} == 2147483647) {
          if ($obj->{x_long} == 9223372036854775807L) {
            if ($obj->{x_float} == TestCase->FLOAT_PRECICE) {
              if ($obj->{x_double} == TestCase->DOUBLE_PRECICE) {
                if ($obj->{minimal}{x} == 3) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
    
    return 0;
  }
  
  sub logical_not_true() : int {
    if (!1) {
      return 0;
    }
    
    return 1;
  }
  sub logical_not_false() : int {
    if (!0) {
      return 1;
    }
    
    return 0;
  }

  # logical or
  sub logical_or_both_true() : int {
    if (1 || 1) {
      return 1;
    }
    
    return 0;
  }
  
  sub logical_or_left_true() : int {
    if (1 || 0) {
      return 1;
    }
    
    return 0;
  }

  sub logical_or_right_true() : int {
    if (0 || 1) {
      return 1;
    }
    
    return 0;
  }

  sub logical_or_both_false() : int {
    if (0 || 0) {
      return 0;
    }
    
    return 1;
  }
  
  # logical and
  sub logical_and_both_true() : int {
    if (1 && 1) {
      return 1;
    }
    
    return 0;
  }
  
  sub logical_and_left_true() : int {
    if (1 && 0) {
      return 0;
    }
    
    return 1;
  }

  sub logical_and_right_true() : int {
    if (1 && 0) {
      return 0;
    }
    
    return 1;
  }

  sub logical_and_both_false() : int {
    if (0 && 0) {
      return 0;
    }
    
    return 1;
  }
  
  # call_sub return value
  sub call_sub_return_byte_array() : byte[] {
    my $nums = new byte[3];
    
    $nums->[0] = (byte)1;
    $nums->[1] = (byte)2;
    $nums->[2] = (byte)3;
    
    return $nums;
  }
  sub call_sub_return_byte_array_check($nums : byte[]) : int {
    
    if ($nums->[0] == (byte)1) {
      if ($nums->[1] == (byte)2) {
        if ($nums->[2] == (byte)3) {
          if (@$nums == 3) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub call_sub_return_short_array() : short[] {
    my $nums = new short[3];
    
    $nums->[0] = (short)1;
    $nums->[1] = (short)2;
    $nums->[2] = (short)3;
    
    return $nums;
  }
  sub call_sub_return_short_array_check($nums : short[]) : int {
    
    if ($nums->[0] == (short)1) {
      if ($nums->[1] == (short)2) {
        if ($nums->[2] == (short)3) {
          if (@$nums == 3) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub call_sub_return_int_array() : int[] {
    my $nums = new int[3];
    
    $nums->[0] = (int)1;
    $nums->[1] = (int)2;
    $nums->[2] = (int)3;
    
    return $nums;
  }
  sub call_sub_return_int_array_check($nums : int[]) : int {
    
    if ($nums->[0] == (int)1) {
      if ($nums->[1] == (int)2) {
        if ($nums->[2] == (int)3) {
          if (@$nums == 3) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub call_sub_return_long_array() : long[] {
    my $nums = new long[3];
    
    $nums->[0] = (long)1;
    $nums->[1] = (long)2;
    $nums->[2] = (long)3;
    
    return $nums;
  }
  sub call_sub_return_long_array_check($nums : long[]) : int {
    
    if ($nums->[0] == (long)1) {
      if ($nums->[1] == (long)2) {
        if ($nums->[2] == (long)3) {
          if (@$nums == 3) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub call_sub_return_float_array() : float[] {
    my $nums = new float[3];
    
    $nums->[0] = (float)1;
    $nums->[1] = (float)2;
    $nums->[2] = (float)3;
    
    return $nums;
  }
  sub call_sub_return_float_array_check($nums : float[]) : int {
    
    if ($nums->[0] == (float)1) {
      if ($nums->[1] == (float)2) {
        if ($nums->[2] == (float)3) {
          if (@$nums == 3) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub call_sub_return_double_array() : double[] {
    my $nums = new double[3];
    
    $nums->[0] = (double)1;
    $nums->[1] = (double)2;
    $nums->[2] = (double)3;
    
    return $nums;
  }
  sub call_sub_return_double_array_check($nums : double[]) : int {
    
    if ($nums->[0] == (double)1) {
      if ($nums->[1] == (double)2) {
        if ($nums->[2] == (double)3) {
          if (@$nums == 3) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }
  
  # Add
  sub add_byte_max() : byte {
    return (byte)126 + (byte)1;
  }
  
  sub add_byte_min() : byte {
    return (byte)-128 + (byte)1;
  }
  
  sub add_byte_overflow() : byte {
    return (byte)127 + (byte)1;
  }
  
  sub add_short_max() : short {
    return (short)32766 + (short)1;
  }
  
  sub add_short_min() : short {
    return (short)-32768 + (short)1;
  }
  
  sub add_short_overflow() : short {
    return (short)32767 + (short)1;
  }

  sub add_int_max() : int {
    return (int)2147483646 + (int)1;
  }
  
  sub add_int_min() : int {
    return (int)-2147483648 + (int)1;
  }
  
  sub add_int_overflow() : int {
    return (int)2147483647 + (int)1;
  }

  sub add_long_max() : long {
    return (long)9223372036854775806L + (long)1;
  }
  
  sub add_long_min() : long {
    return (long)-9223372036854775808L + (long)1;
  }
  
  sub add_long_overflow() : long {
    return (long)9223372036854775807L + (long)1;
  }

  # Subtract
  sub subtract_byte_max() : byte {
    return (byte)127 - (byte)1;
  }
  
  sub subtract_byte_min() : byte {
    return (byte)-127 - (byte)1;
  }
  
  sub subtract_byte_underflow() : byte {
    return (byte)-128 - (byte)1;
  }
  
  sub subtract_short_max() : short {
    return (short)32767 - (short)1;
  }
  
  sub subtract_short_min() : short {
    return (short)-32767 - (short)1;
  }
  
  sub subtract_short_underflow() : short {
    return (short)-32768 - (short)1;
  }

  sub subtract_int_max() : int {
    return (int)2147483647 - (int)1;
  }
  
  sub subtract_int_min() : int {
    return (int)-2147483647 - (int)1;
  }
  
  sub subtract_int_underflow() : int {
    return (int)-2147483648 - (int)1;
  }

  sub subtract_long_max() : long {
    return (long)9223372036854775807L - (long)1;
  }
  
  sub subtract_long_min() : long {
    return (long)-9223372036854775807L - (long)1;
  }
  
  sub subtract_long_underflow() : long {
    return (long)-9223372036854775808L - (long)1;
  }

  # Multiply
  sub multiply_byte_plus() : byte {
    return (byte)32 * (byte)2;
  }
  
  sub multiply_byte_minus() : byte {
    return (byte)32 * (byte)-2;
  }
  
  sub multiply_byte_overflow() : byte {
    return (byte)64 * (byte)2;
  }

  sub multiply_short_plus() : short {
    return (short)8192 * (short)2;
  }
  
  sub multiply_short_minus() : short {
    return (short)8192 * (short)-2;
  }
  
  sub multiply_short_overflow() : short {
    return (short)16384 * (short)2;
  }
  
  sub multiply_int_plus() : int {
    return (int)536870912 * (int)2;
  }
  
  sub multiply_int_minus() : int {
    return (int)536870912 * (int)-2;
  }
  
  sub multiply_int_overflow() : int {
    return (int)1073741824 * (int)2;
  }
  
  sub multiply_long_plus() : long {
    return (long)2305843009213693952L * (long)2L;
  }
  
  sub multiply_long_minus() : long {
    return (long)2305843009213693952L * (long)-2L;
  }
  
  sub multiply_long_overflow() : long {
    return (long)4611686018427387904L * (long)2L;
  }
  
  # SPVM Functions
  sub spvm_new_byte_array_string($values : byte[]) : int {
    
    if ($values->[0] == (byte)0xE3) {
      if ($values->[1] == (byte)0x81) {
        if ($values->[2] == (byte)0x82) {
          if (@$values == 3) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub spvm_new_byte_array_data($values : byte[]) : int {
    
    if ($values->[0] == (byte)97) {
      if ($values->[1] == (byte)98) {
        if ($values->[2] == (byte)99) {
           if (@$values == 3) {
             return 1;
           }
        }
      }
    }
    
    return 0;
  }

  sub spvm_new_byte_array_data_pack($values : byte[]) : int {
    
    if ($values->[0] == (byte)97) {
      if ($values->[1] == (byte)98) {
        if ($values->[2] == (byte)Byte->MAX_VALUE) {
           if (@$values == 3) {
             return 1;
           }
        }
      }
    }
    
    return 0;
  }

  sub spvm_new_short_array_data_pack($values : short[]) : int {
    
    if ($values->[0] == (short)97) {
      if ($values->[1] == (short)98) {
        if ($values->[2] == (short)TestCase->SHORT_MAX) {
           if (@$values == 3) {
             return 1;
           }
        }
      }
    }
    
    return 0;
  }
  
  sub spvm_new_int_array_data_pack($values : int[]) : int {
    
    if ($values->[0] == (int)97) {
      if ($values->[1] == (int)98) {
        if ($values->[2] == (int)TestCase->INT_MAX) {
           if (@$values == 3) {
             return 1;
           }
        }
      }
    }
    
    return 0;
  }

  sub spvm_new_long_array_data_pack($values : long[]) : int {
    
    if ($values->[0] == (long)97) {
      if ($values->[1] == (long)98) {
        if ($values->[2] == (long)TestCase->LONG_MAX) {
           if (@$values == 3) {
             return 1;
           }
        }
      }
    }
    
    return 0;
  }

  sub spvm_new_float_array_data_pack($values : float[]) : int {
    
    if ($values->[0] == (float)97) {
      if ($values->[1] == (float)98) {
        if ($values->[2] == (float)TestCase->FLOAT_PRECICE) {
           if (@$values == 3) {
             return 1;
           }
        }
      }
    }
    
    return 0;
  }
  
  sub spvm_new_double_array_data_pack($values : double[]) : int {
    
    if ($values->[0] == (double)97) {
      if ($values->[1] == (double)98) {
        if ($values->[2] == (double)TestCase->DOUBLE_PRECICE) {
           if (@$values == 3) {
             return 1;
           }
        }
      }
    }
    
    return 0;
  }
  
  # byte array argument
  sub call_sub_byte_array($nums : byte[]) : byte {
    
    my $total = (byte)0;
    for (my $i = 0; $i < @$nums; $i++) {
      $total = $total + $nums->[$i];
    }
    
    return $total;
  }
  
  # short array argument
  sub call_sub_short_array($nums : short[]) : short {
    
    my $total = (short)0;
    for (my $i = 0; $i < @$nums; $i++) {
      $total = $total + $nums->[$i];
    }
    
    return $total;
  }
  
  # int array argument
  sub call_sub_int_array($nums : int[]) : int {
    
    my $total = 0;
    for (my $i = 0; $i < @$nums; $i++) {
      $total = $total + $nums->[$i];
    }
    
    return $total;
  }

  # long array argument
  sub call_sub_long_array($nums : long[]) : long {
    
    my $total = (long)0;
    for (my $i = 0; $i < @$nums; $i++) {
      $total = $total + $nums->[$i];
    }
    
    return $total;
  }

  # float array argument
  sub call_sub_float_array($nums : float[]) : float {
    
    my $total = (float)0;
    for (my $i = 0; $i < @$nums; $i++) {
      $total = $total + $nums->[$i];
    }
    
    return $total;
  }

  # double array argument
  sub call_sub_double_array($nums : double[]) : double {
    
    my $total = (double)0;
    for (my $i = 0; $i < @$nums; $i++) {
      $total = $total + $nums->[$i];
    }
    
    return $total;
  }

  # constant int
  sub load_constant_int_min() : int {
   # LOAD_CONSTANT
    return -2147483647;
  }
  sub load_constant_int_m32769() : int {
    # LOAD_CONSTANT
    return -32769;
  }
  sub load_constant_int_m32768() : int {
    # PUSH_SHORT_TO_INT
    return -32768;
  }
  sub load_constant_int_m129() : int {
    # PUSH_SHORT_TO_INT
    return -129;
  }
  sub load_constant_int_m128() : int {
    # PUSH_BYTE_TO_INT
    return -128;
  }
  sub load_constant_int_m2() : int {
    # PUSH_BYTE_TO_INT
    return -2;
  }
  sub load_constant_int_m1() : int {
    # CONSTANT_INT_M1
    return -1;
  }
  sub load_constant_int_0() : int {
    # CONSTANT_INT_0
    return 0;
  }
  sub load_constant_int_1() : int {
    # CONSTANT_INT_1
    return 1;
  }
  sub load_constant_int_2() : int {
    # CONSTANT_INT_2
    return 2;
  }
  sub load_constant_int_3() : int {
    # CONSTANT_INT_3
    return 3;
  }
  sub load_constant_int_4() : int {
    # CONSTANT_INT_4
    return 4;
  }
  sub load_constant_int_5() : int {
    # CONSTANT_INT_5
    return 5;
  }
  sub load_constant_int_6() : int {
    # PUSH_BYTE_TO_INT
    return 6;
  }
  sub load_constant_int_127() : int {
    # PUSH_BYTE_TO_INT
    return 127;
  }
  sub load_constant_int_128() : int {
    # PUSH_SHORT_TO_INT
    return 128;
  }
  sub load_constant_int_32767() : int {
    # PUSH_SHORT_TO_INT
    return 32767;
  }
  sub load_constant_int_32768() : int {
    # LOAD_CONSTANT
    return 32768;
  }
  sub load_constant_int_max() : int {
    # LOAD_CONSTANT
    return 2147483647;
  }

  # constant long
  sub load_constant_long_min() : long {
   # LOAD_CONSTANT
    return -9223372036854775808L;
  }
  sub load_constant_long_m32769() : long {
    # LOAD_CONSTANT
    return -32769L;
  }
  sub load_constant_long_m32768() : long {
    # PUSH_SHORT_TO_LONG
    return -32768L;
  }
  sub load_constant_long_m129() : long {
    # PUSH_SHORT_TO_LONG
    return -129L;
  }
  sub load_constant_long_m128() : long {
    # PUSH_BYTE_TO_LONG
    return -128L;
  }
  sub load_constant_long_m2() : long {
    # PUSH_BYTE_TO_LONG
    return -2L;
  }
  sub load_constant_long_m1() : long {
    # CONSTANT_LONG_M1
    return -1L;
  }
  sub load_constant_long_0() : long {
    # CONSTANT_LONG_0
    return 0L;
  }
  sub load_constant_long_1() : long {
    # CONSTANT_LONG_1
    return 1L;
  }
  sub load_constant_long_2() : long {
    # CONSTANT_LONG_2
    return 2L;
  }
  sub load_constant_long_3() : long {
    # CONSTANT_LONG_3
    return 3L;
  }
  sub load_constant_long_4() : long {
    # CONSTANT_LONG_4
    return 4L;
  }
  sub load_constant_long_5() : long {
    # CONSTANT_LONG_5
    return 5L;
  }
  sub load_constant_long_6() : long {
    # PUSH_BYTE_TO_LONG
    return 6L;
  }
  sub load_constant_long_127() : long {
    # PUSH_BYTE_TO_LONG
    return 127L;
  }
  sub load_constant_long_128() : long {
    # PUSH_SHORT_TO_LONG
    return 128L;
  }
  sub load_constant_long_32767() : long {
    # PUSH_SHORT_TO_LONG
    return 32767L;
  }
  sub load_constant_long_32768() : long {
    # LOAD_CONSTANT2
    return 32768L;
  }
  sub load_constant_long_max() : long {
    # LOAD_CONSTANT2
    return 9223372036854775807L;
  }
  
  # constant float
  sub load_constant_float_0() : float {
    # CONSTANT_FLOAT_0
    return 0.0f;
  }
  sub load_constant_float_1() : float {
    # CONSTANT_FLOAT_1
    return 1.0f;
  }
  sub load_constant_float_0_5() : float {
    # LOAD_CONSTANT
    return 0.5f;
  }
  sub load_constant_float_exponent_E_plus() : float {
    return 0.5E+3f;
  }
  sub load_constant_float_exponent_e_plus() : float {
    return 0.5e3f;
  }
  sub load_constant_float_exponent_E_minus() : float {
    return 62.5E-3f;
  }
  sub load_constant_float_exponent_e_minus() : float {
    return 62.5e-3f;
  }

  sub load_constant_double_exponent_E_plus() : double {
    return 0.5E+3;
  }
  sub load_constant_double_exponent_e_plus() : double {
    return 0.5e3;
  }
  sub load_constant_double_exponent_E_minus() : double {
    return 62.5E-3;
  }
  sub load_constant_double_exponent_e_minus() : double {
    return 62.5e-3;
  }
  
  # constant double
  sub load_constant_double_0() : double {
    # CONSTANT_DOUBLE_0
    return 0.0;
  }
  sub load_constant_double_1() : double {
    # CONSTANT_DOUBLE_1
    return 1.0;
  }
  sub load_constant_double_0_5() : double {
    # LOAD_CONSTANT2
    return 0.5;
  }
  
  # call_sub arguments
  sub call_sub_args_byte($var1 : byte, $var2 : byte, $var3 : byte) : int {
    if ($var1 == (byte)0) {
      if ($var2 == (byte)127) {
        if ($var3 == (byte)-128) {
          return 1;
        }
      }
    }
    
    return 0;
  }
  sub call_sub_args_short($var1 : short, $var2 : short, $var3 : short) : int {
    if ($var1 == (short)0) {
      if ($var2 == (short)32767) {
        if ($var3 == (short)-32768) {
          return 1;
        }
      }
    }
    
    return 0;
  }
  sub call_sub_args_int($var1 : int, $var2 : int, $var3 : int) : int {
    if ($var1 == 0) {
      if ($var2 == 2147483647) {
        if ($var3 == -2147483648) {
          return 1;
        }
      }
    }
    
    return 0;
  }
  
  sub call_sub_args_long($var1 : long, $var2 : long, $var3 : long) : int {
    if ($var1 == 0L) {
      if ($var2 == 9223372036854775807L) {
        if ($var3 == -9223372036854775808L) {
          return 1;
        }
      }
    }
    
    return 0;
  }
  
  # If
  sub if_true_byte() : int {
    if ((byte)1) {
      return 1;
    }
    
    return 0;
  }
  
  sub if_true_short() : int {
    if ((short)1) {
      return 1;
    }
    
    return 0;
  }

  sub if_true_int() : int {
    if (1) {
      return 1;
    }
    
    return 0;
  }
  
  sub if_true_long() : int {
    if (1L) {
      return 1;
    }
    
    return 0;
  }
  
  sub if_true_float() : int {
    if (1.0f) {
      return 1;
    }
    
    return 0;
  }
  
  sub if_true_double() : int {
    if (1.0) {
      return 1;
    }
    
    return 0;
  }

  sub if_true_object() : int {
    if (new TestCase) {
      return 1;
    }
    
    return 0;
  }

  sub if_false_byte() : int {
    if ((byte)0) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_false_short() : int {
    if ((short)0) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_false_int() : int {
    if (0) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_false_long() : int {
    if (0L) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_false_float() : int {
    if (0.0f) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_false_double() : int {
    if (0.0) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_false_object() : int {
    if (undef) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_else() : int {
    if (0) {
      return 0;
    }
    else {
      return 1;
    }
    
    return 0;
  }

  sub if_elsif() : int {
    if (0) {
      return 0;
    }
    elsif(1) {
      return 1;
    }
    else {
      return 0;
    }
    
    return 0;
  }

  sub if_elsif_2() : int {
    if (0) {
      return 0;
    }
    elsif(0) {
      return 0;
    }
    elsif(1) {
      return 1;
    }
    else {
      return 0;
    }
    
    return 0;
  }
  
  sub if_duplicate() : int {
    
    if (1) {
      if (0) {
        return 0;
      }
      elsif (1) {
        return 1;
      }
      else {
        return 0;
      }
    }
    else {
      return 0;
    }
  }

  # If a == b
  sub if_eq_byte_same () : int {
    
    if ((byte)3 == (byte)3) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_eq_byte_different () : int {
    
    if ((byte)3 == (byte)2) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_eq_short_same () : int {
    
    if ((short)3 == (short)3) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_eq_short_different () : int {
    
    if ((short)3 == (short)2) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_eq_int_same () : int {
    
    if ((int)3 == (int)3) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_eq_int_different () : int {
    
    if ((int)3 == (int)2) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_eq_long_same () : int {
    
    if ((long)3 == (long)3) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_eq_long_different () : int {
    
    if ((long)3 == (long)2) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_eq_float_same () : int {
    
    if (0.5f == 0.5f) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_eq_float_different () : int {
    
    if (0.5f == 0.25f) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_eq_double_same () : int {
    
    if (0.5 == 0.5) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_eq_double_different () : int {
    
    if (0.5 == 0.25) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_eq_object_same () : int {
    
    my $obj1 = new TestCase;
    
    if ($obj1 == $obj1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_eq_object_different () : int {
    my $obj1 = new TestCase;
    my $obj2 = new TestCase;
    
    if ($obj1 == $obj2) {
      return 0;
    }
    else {
      return 1;
    }
  }

  # If a != b
  sub if_ne_byte_same () : int {
    
    if ((byte)3 != (byte)3) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ne_byte_different () : int {
    
    if ((byte)3 != (byte)2) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_ne_short_same () : int {
    
    if ((short)3 != (short)3) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ne_short_different () : int {
    
    if ((short)3 != (short)2) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_ne_int_same () : int {
    
    if ((int)3 != (int)3) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ne_int_different () : int {
    
    if ((int)3 != (int)2) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_ne_long_same () : int {
    
    if ((long)3 != (long)3) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ne_long_different () : int {
    
    if ((long)3 != (long)2) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_ne_float_same () : int {
    
    if (0.5f != 0.5f) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ne_float_different () : int {
    
    if (0.5f != 0.25f) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_ne_double_same () : int {
    
    if (0.5 != 0.5) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ne_double_different () : int {
    
    if (0.5 != 0.25) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_ne_object_same () : int {
    
    my $obj1 = new TestCase;
    
    if ($obj1 != $obj1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_ne_object_different () : int {
    my $obj1 = new TestCase;
    my $obj2 = new TestCase;
    
    if ($obj1 != $obj2) {
      return 1;
    }
    else {
      return 0;
    }
  }

  # If a > b
  sub if_gt_byte_left_big () : int {
    
    if ((byte)3 > (byte)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_gt_byte_same () : int {
    
    if ((byte)3 > (byte)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_byte_right_big () : int {
    
    if ((byte)3 > (byte)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_short_left_big () : int {
    
    if ((short)3 > (short)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_gt_short_same () : int {
    
    if ((short)3 > (short)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_short_right_big () : int {
    
    if ((short)3 > (short)4) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_gt_int_left_big () : int {
    
    if (3 > 1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_gt_int_same () : int {
    
    if (3 > 3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_int_right_big () : int {
    
    if (3 > 4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_long_left_big () : int {
    
    if ((long)3 > (long)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_gt_long_same () : int {
    
    if ((long)3 > (long)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_long_right_big () : int {
    
    if ((long)3 > (long)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_float_left_big () : int {
    
    if ((float)3 > (float)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_gt_float_same () : int {
    
    if ((float)3 > (float)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_float_right_big () : int {
    
    if ((float)3 > (float)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_double_left_big () : int {
    
    if ((double)3 > (double)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_gt_double_same () : int {
    
    if ((double)3 > (double)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_double_right_big () : int {
    
    if ((double)3 > (double)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  # If a >= b
  sub if_ge_byte_left_big () : int {
    
    if ((byte)3 >= (byte)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_byte_same () : int {
    
    if ((byte)3 >= (byte)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_byte_right_big () : int {
    
    if ((byte)3 >= (byte)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_ge_short_left_big () : int {
    
    if ((short)3 >= (short)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_short_same () : int {
    
    if ((short)3 >= (short)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_short_right_big () : int {
    
    if ((short)3 >= (short)4) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ge_int_left_big () : int {
    
    if (3 >= 1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_int_same () : int {
    
    if (3 >= 3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_int_right_big () : int {
    
    if (3 >= 4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_ge_long_left_big () : int {
    
    if ((long)3 >= (long)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_long_same () : int {
    
    if ((long)3 >= (long)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_long_right_big () : int {
    
    if ((long)3 >= (long)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_ge_float_left_big () : int {
    
    if ((float)3 >= (float)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_float_same () : int {
    
    if ((float)3 >= (float)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_float_right_big () : int {
    
    if ((float)3 >= (float)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_ge_double_left_big () : int {
    
    if ((double)3 >= (double)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_double_same () : int {
    
    if ((double)3 >= (double)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_double_right_big () : int {
    
    if ((double)3 >= (double)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  # If a < b
  sub if_lt_byte_left_big () : int {
    
    if ((byte)3 < (byte)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_byte_same () : int {
    
    if ((byte)3 < (byte)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_byte_right_big () : int {
    
    if ((byte)3 < (byte)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_lt_short_left_big () : int {
    
    if ((short)3 < (short)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_short_same () : int {
    
    if ((short)3 < (short)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_short_right_big () : int {
    
    if ((short)3 < (short)4) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_lt_int_left_big () : int {
    
    if (3 < 1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_int_same () : int {
    
    if (3 < 3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_int_right_big () : int {
    
    if (3 < 4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_lt_long_left_big () : int {
    
    if ((long)3 < (long)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_long_same () : int {
    
    if ((long)3 < (long)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_long_right_big () : int {
    
    if ((long)3 < (long)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_lt_float_left_big () : int {
    
    if ((float)3 < (float)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_float_same () : int {
    
    if ((float)3 < (float)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_float_right_big () : int {
    
    if ((float)3 < (float)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_lt_double_left_big () : int {
    
    if ((double)3 < (double)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_double_same () : int {
    
    if ((double)3 < (double)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_double_right_big () : int {
    
    if ((double)3 < (double)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  # If a <= b
  sub if_le_byte_left_big () : int {
    
    if ((byte)3 <= (byte)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_le_byte_same () : int {
    
    if ((byte)3 <= (byte)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_byte_right_big () : int {
    
    if ((byte)3 <= (byte)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_short_left_big () : int {
    
    if ((short)3 <= (short)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_le_short_same () : int {
    
    if ((short)3 <= (short)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_short_right_big () : int {
    
    if ((short)3 <= (short)4) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_le_int_left_big () : int {
    
    if (3 <= 1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_le_int_same () : int {
    
    if (3 <= 3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_int_right_big () : int {
    
    if (3 <= 4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_long_left_big () : int {
    
    if ((long)3 <= (long)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_le_long_same () : int {
    
    if ((long)3 <= (long)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_long_right_big () : int {
    
    if ((long)3 <= (long)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_float_left_big () : int {
    
    if ((float)3 <= (float)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_le_float_same () : int {
    
    if ((float)3 <= (float)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_float_right_big () : int {
    
    if ((float)3 <= (float)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_double_left_big () : int {
    
    if ((double)3 <= (double)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_le_double_same () : int {
    
    if ((double)3 <= (double)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_double_right_big () : int {
    
    if ((double)3 <= (double)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  # Bit shift right logical
  sub bit_shift_right_logical_byte() : int {
    # 11000001 >>> 2
    my $value = (byte)0xC1 >>> 2;
    
    # 00110000
    if ($value == (byte)0x30) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_right_logical_short() : int {
    # 11000000 00000001 >>> 2
    my $value = (short)0xC001 >>> 2;
    
    # 00110000 00000000
    if ($value == (short)0x3000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_right_logical_int() : int {
    # 11000000 00000000 00000000 00000001 >>> 2
    my $value = 0xC0000001 >>> 2;
    
    # 00110000 00000000 00000000 00000000
    if ($value == 0x30000000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_right_logical_long() : int {
    # 11000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 >>> 2
    my $value = 0xC000000000000001L >>> 2;
    
    # 00110000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    if ($value == 0x3000000000000000L) {
      return 1;
    }
    else {
      return 0;
    }
  }

  # Bit shift right logical
  sub bit_shift_right_byte() : int {
    # 11000001 >> 2
    my $value = (byte)0xC1 >> 2;
    
    # 11110000
    if ($value == (byte)0xF0) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_right_short() : int {
    # 11000000 00000001 >> 2
    my $value = (short)0xC001 >> 2;
    
    # 11110000 00000000
    if ($value == (short)0xF000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_right_int() : int {
    # 11000000 00000000 00000000 00000001 >> 2
    my $value = 0xC0000001 >> 2;
    
    # 11110000 00000000 00000000 00000000
    if ($value == 0xF0000000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_right_long() : int {
    # 11000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 >> 2
    my $value = 0xC000000000000001L >> 2;
    
    # 11110000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    if ($value == 0xF000000000000000L) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub number_literal_specifier() : int {
    my $value1 = 255f;
    my $value2 = 255d;
    my $value3 = 255L;
    my $value4 = -128b;
    my $value5 = -32768s;
    my $value6 = 127b;
    my $value7 = -128s;
    
    if ($value1 == (float)255) {
      if ($value2 == (double)255) {
        if ($value3 == (long)255) {
          if ($value4 == (byte)-1) {
            if ($value5 == (short)-1) {
              if ($value6 == (byte)127) {
                if ($value7 == (short)32767) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
    
    return 0;
  }
  
  sub number_literal_hex_specifier() : int {
    my $value1 = 0xFFf;
    my $value2 = 0xFFd;
    my $value3 = 0xFFL;
    my $value4 = 0xFFb;
    my $value5 = 0xFFFFs;
    my $value6 = 0x7Fb;
    my $value7 = 0x7FFFs;
    
    if ($value1 == (float)255) {
      if ($value2 == (double)255) {
        if ($value3 == (long)255) {
          if ($value4 == (byte)-1) {
            if ($value5 == (short)-1) {
              if ($value6 == (byte)127) {
                if ($value7 == (short)32767) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
    
    return 0;
  }
  sub number_literal_hex_all_number() : int {
    my $value1 = 0x01234567;
    my $value2 = 0x00ABCDEF;
    
    if ($value1 == 19088743) {
      if ($value2 == 11259375) {
        return 1;
      }
    }
    
    return 0;
  }
  sub number_literal_underline() : int {
    my $value = 123_123;
    
    if ($value == 123123) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub number_literal_underline_hex() : int {
    my $value = 0xFF_FF;
    
    if ($value == 0xFFFF) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub number_literal_hex_int() : int {
    my $value = 0xFF;
    
    if ($value == 255) {
      return 1;
    }
    else {
      return 0;
    }
  }
  sub number_literal_hex_int_max() : int {
    # 11111111 11111111 11111111 11111111
    my $value = 0xFFFFFFFF;
    
    if ($value == -1) {
      return 1;
    }
    else {
      return 0;
    }
  }
  sub number_literal_hex_long_max() : int {
    # 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    my $value = 0xFFFFFFFFFFFFFFFFL;
    
    if ($value == -1L) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  # Bit shift left
  sub bit_shift_left_byte() : int {
    # 00000011 << 2
    my $value = (byte)0x3 << 2;
    
    # 00001100
    if ($value == (byte)0xC) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_byte_max() : int {
    
    # 01000000 << 1
    my $value = (byte)0x40 << 1;
    
    # 10000000
    if ($value == (byte)0x80) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_byte_overflow() : int {
    
    # 10000000 << 1
    my $value = (byte)0x80 << 1;
    
    # 00000000
    if ($value == (byte)0) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_short() : int {
    
    # 00000011 00000000 << 2
    my $value = (short)0x300 << 2;
    
    # 00001100 00000000
    if ($value == (short)0xC00) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_short_max() : int {
    
    # 01000000 00000000 << 1
    my $value = (short)0x4000 << 1;
    
    # 10000000 00000000
    if ($value == (short)0x8000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_short_overflow() : int {
    
    # 10000000 00000000 << 1
    my $value = (short)0x8000 << 1;
    
    # 00000000 00000000
    if ($value == (short)0) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub bit_shift_left_int() : int {
    
    # 00000011 00000000 00000000 00000000 << 2
    my $value = 0x30000000 << 2;
    
    # 00001100 00000000 00000000 00000000
    if ($value == 0xC0000000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_int_max() : int {
    
    # 01000000 00000000 00000000 00000000 << 1
    my $value = 0x40000000 << 1;
    
    # 10000000 00000000 00000000 00000000
    if ($value == 0x80000000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_int_overflow() : int {
    
    # 10000000 00000000 00000000 00000000 << 1
    my $value = 0x80000000 << 1;
    
    # 00000000 00000000 00000000 00000000
    if ($value == 0) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub bit_shift_left_long() : int {
    
    # 00000011 00000000 00000000 00000000 00000000 00000000 00000000 00000000 << 2
    my $value = 0x3000000000000000L << 2;
    
    # 00001100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
    if ($value == 0xC000000000000000L) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_long_max() : int {
    
    # 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000  << 1
    my $value = 0x4000000000000000L << 1;
    
    # 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
    if ($value == 0x8000000000000000L) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_long_overflow() : int {
    
    # 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000  << 1
    my $value = 0x8000000000000000L << 1;
    
    # 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
    if ($value == 0L) {
      return 1;
    }
    else {
      return 0;
    }
  }

  # Array length
  sub get_array_length_at() : int {
    
    my $nums = new int[3];
    my $len = @$nums;
    if ($len == 3) {
      return 1;
    }
    
    return 0;
  }
  sub get_array_length_len() : int {
    
    my $nums = new int[3];
    my $len = len $nums;
    if ($len == 3) {
      return 1;
    }
    
    return 0;
  }

  sub array_set_and_get_array_element_first() : int {
    
    my $nums = new int[3];
    $nums->[0] = 345;

    return $nums->[0];
  }

  sub array_set_and_get_array_element_last() : int {
    
    my $nums = new int[3];
    $nums->[2] = 298;

    return $nums->[2];
  }

  sub array_culcurate_sum_by_for() : int {
    
    my $nums = new int[3];
    $nums->[0] = 1;
    $nums->[1] = 2;
    $nums->[2] = 3;
    
    my $total = 0;
    for (my $i = 0; $i < @$nums; $i++) {
      $total = $total + $nums->[$i];
    }

    return $total;
  }
  
  # Sum
  sub sum_byte ($a : byte, $b :byte,) : byte {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_short ($a : short, $b :short) : short {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_int ($a : int, $b :int) : int {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_long ($a : long, $b :long) : long {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_float ($a : float, $b :float) : float {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_double ($a : double, $b :double) : double {
    
    my $total = $a + $b;
    
    return $total;
  }
  
  # For
  sub for_basic() : int {
    my $total = 0;
    for (my $i = 1; $i <= 3; $i++) {
      $total = $total + $i;
    }
    
    return $total;
  }
}
