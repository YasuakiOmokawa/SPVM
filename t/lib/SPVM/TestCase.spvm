package TestCase {
  has x : int;
  has y : int;
  
  # bit shift - bit shift left byte
  sub bit_shift_left_byte() : byte {
    
    my $value = (byte)3 << 2;
    
    return $value;
  }

  # bit shift - bit shift left byte max
  sub bit_shift_left_byte_max() : byte {
    
    # 0100 0000 << 1
    my $value = (byte)0x40 << 1;
    
    return $value;
  }

  # bit shift - bit shift left byte overflow
  sub bit_shift_left_byte_overflow() : byte {
    
    # 1000 0000 << 1
    my $value = (byte)0x80 << 1;
    
    return $value;
  }

  # array - malloc int array and get length
  sub array_malloc_int_array_and_get_length() : int {
    
    my $nums = malloc int[3];
    my $len = @$nums;

    return $len;
  }

  # array - set and get array element, first element
  sub array_set_and_get_array_element_first() : int {
    
    my $nums = malloc int[3];
    $nums->[0] = 345;

    return $nums->[0];
  }

  # array - set and get array element, last element
  sub array_set_and_get_array_element_last() : int {
    
    my $nums = malloc int[3];
    $nums->[2] = 298;

    return $nums->[2];
  }

  # array - culcurate sum by for
  sub array_culcurate_sum_by_for() : int {
    
    my $nums = malloc int[3];
    $nums->[0] = 1;
    $nums->[1] = 2;
    $nums->[2] = 3;
    
    my $total = 0;
    for (my $i = 0; $i < @$nums; $i++) {
      $total = $total + $nums->[$i];
    }

    return $total;
  }
  
  sub sum_byte ($a : byte, $b :byte) : byte {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_short ($a : short, $b :short) : short {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_int ($a : int, $b :int) : int {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_long ($a : long, $b :long) : long {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_float ($a : float, $b :float) : float {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_double ($a : double, $b :double) : double {
    
    my $total = $a + $b;
    
    return $total;
  }
  
  # for
  sub for_basic() : int {
    my $total = 0;
    for (my $i = 1; $i <= 3; $i++) {
      $total = $total + $i;
    }
    
    return $total;
  }
  
  # if gt int left big
  sub if_gt_int_left_big () : int {
    
    if (3 > 1) {
      return 1;
    }
    else {
      return 0;
    }
    
    return -1;
  }

  # if gt int same
  sub if_gt_int_same () : int {
    
    if (3 > 3) {
      return 1;
    }
    else {
      return 0;
    }

    return -1;
  }

  # if gt int right big
  sub if_gt_int_right_big () : int {
    
    if (3 > 4) {
      return 1;
    }
    else {
      return 0;
    }

    return -1;
  }
  
  
}
