package TestCase {
  has x : int;
  has y : int;
  
  # constant int
  sub load_constant_int_min() : int {
   # LOAD_CONSTANT
    return -2147483647;
  }
  sub load_constant_int_m32769() : int {
    # LOAD_CONSTANT
    return -32769;
  }
  sub load_constant_int_m32768() : int {
    # PUSH_SHORT_TO_INT
    return -32768;
  }
  sub load_constant_int_m129() : int {
    # PUSH_SHORT_TO_INT
    return -129;
  }
  sub load_constant_int_m128() : int {
    # PUSH_BYTE_TO_INT
    return -128;
  }
  sub load_constant_int_m2() : int {
    # PUSH_BYTE_TO_INT
    return -2;
  }
  sub load_constant_int_m1() : int {
    # CONSTANT_INT_M1
    return -1;
  }
  sub load_constant_int_0() : int {
    # CONSTANT_INT_0
    return 0;
  }
  sub load_constant_int_1() : int {
    # CONSTANT_INT_1
    return 1;
  }
  sub load_constant_int_2() : int {
    # CONSTANT_INT_2
    return 2;
  }
  sub load_constant_int_3() : int {
    # CONSTANT_INT_3
    return 3;
  }
  sub load_constant_int_4() : int {
    # CONSTANT_INT_4
    return 4;
  }
  sub load_constant_int_5() : int {
    # CONSTANT_INT_5
    return 5;
  }
  sub load_constant_int_6() : int {
    # PUSH_BYTE_TO_INT
    return 6;
  }
  sub load_constant_int_127() : int {
    # PUSH_BYTE_TO_INT
    return 127;
  }
  sub load_constant_int_128() : int {
    # PUSH_SHORT_TO_INT
    return 128;
  }
  sub load_constant_int_32767() : int {
    # PUSH_SHORT_TO_INT
    return 32767;
  }
  sub load_constant_int_32768() : int {
    # LOAD_CONSTANT
    return 32768;
  }
  sub load_constant_int_max() : int {
    # LOAD_CONSTANT
    return 2147483647;
  }

  # constant long
  sub load_constant_long_min() : long {
   # LOAD_CONSTANT
    return -9223372036854775808L;
  }
  sub load_constant_long_m32769() : long {
    # LOAD_CONSTANT
    return -32769L;
  }
  sub load_constant_long_m32768() : long {
    # PUSH_SHORT_TO_LONG
    return -32768L;
  }
  sub load_constant_long_m129() : long {
    # PUSH_SHORT_TO_LONG
    return -129L;
  }
  sub load_constant_long_m128() : long {
    # PUSH_BYTE_TO_LONG
    return -128L;
  }
  sub load_constant_long_m2() : long {
    # PUSH_BYTE_TO_LONG
    return -2L;
  }
  sub load_constant_long_m1() : long {
    # CONSTANT_LONG_M1
    return -1L;
  }
  sub load_constant_long_0() : long {
    # CONSTANT_LONG_0
    return 0L;
  }
  sub load_constant_long_1() : long {
    # CONSTANT_LONG_1
    return 1L;
  }
  sub load_constant_long_2() : long {
    # CONSTANT_LONG_2
    return 2L;
  }
  sub load_constant_long_3() : long {
    # CONSTANT_LONG_3
    return 3L;
  }
  sub load_constant_long_4() : long {
    # CONSTANT_LONG_4
    return 4L;
  }
  sub load_constant_long_5() : long {
    # CONSTANT_LONG_5
    return 5L;
  }
  sub load_constant_long_6() : long {
    # PUSH_BYTE_TO_LONG
    return 6L;
  }
  sub load_constant_long_127() : long {
    # PUSH_BYTE_TO_LONG
    return 127L;
  }
  sub load_constant_long_128() : long {
    # PUSH_SHORT_TO_LONG
    return 128L;
  }
  sub load_constant_long_32767() : long {
    # PUSH_SHORT_TO_LONG
    return 32767L;
  }
  sub load_constant_long_32768() : long {
    # LOAD_CONSTANT2
    return 32768L;
  }
  sub load_constant_long_max() : long {
    # LOAD_CONSTANT2
    return 9223372036854775807L;
  }
  
  # constant float
  sub load_constant_float_0() : float {
    # CONSTANT_FLOAT_0
    return 0.0f;
  }
  sub load_constant_float_1() : float {
    # CONSTANT_FLOAT_1
    return 1.0f;
  }
  sub load_constant_float_0_5() : float {
    # LOAD_CONSTANT
    return 0.5f;
  }
  
  # constant double
  sub load_constant_double_0() : double {
    # CONSTANT_DOUBLE_0
    return 0.0;
  }
  sub load_constant_double_1() : double {
    # CONSTANT_DOUBLE_1
    return 1.0;
  }
  sub load_constant_double_0_5() : double {
    # LOAD_CONSTANT2
    return 0.5;
  }
  
  # call_sub
  sub call_sub_args_int($var1 : int, $var2 : int, $var3 : int) : int {
    if ($var1 == 1) {
      if ($var2 == 2147483647) {
        if ($var3 == -2147483647) {
          return 1;
        }
      }
    }
    
    return 0;
  }
  
  sub call_sub_args_long($var1 : long, $var2 : long, $var3 : long) : int {
    if ($var1 == 1L) {
      if ($var2 == 9223372036854775807L) {
        if ($var3 == -9223372036854775808L) {
          return 1;
        }
      }
    }
    
    return 0;
  }
  
  # If
  sub if_true_byte() : int {
    if ((byte)1) {
      return 1;
    }
    
    return 0;
  }
  
  sub if_true_short() : int {
    if ((short)1) {
      return 1;
    }
    
    return 0;
  }

  sub if_true_int() : int {
    if (1) {
      return 1;
    }
    
    return 0;
  }
  
  sub if_true_long() : int {
    if (1L) {
      return 1;
    }
    
    return 0;
  }
  
  sub if_true_float() : int {
    if (1.0f) {
      return 1;
    }
    
    return 0;
  }
  
  sub if_true_double() : int {
    if (1.0) {
      return 1;
    }
    
    return 0;
  }

  sub if_true_object() : int {
    if (malloc TestCase) {
      return 1;
    }
    
    return 0;
  }

  sub if_false_byte() : int {
    if ((byte)0) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_false_short() : int {
    if ((short)0) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_false_int() : int {
    if (0) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_false_long() : int {
    if (0L) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_false_float() : int {
    if (0.0f) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_false_double() : int {
    if (0.0) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_false_object() : int {
    if (undef) {
      return 0;
    }
    
    return 1;
  }
  
  sub if_else() : int {
    if (0) {
      return 0;
    }
    else {
      return 1;
    }
    
    return 0;
  }

  sub if_elsif() : int {
    if (0) {
      return 0;
    }
    elsif(1) {
      return 1;
    }
    else {
      return 0;
    }
    
    return 0;
  }

  sub if_elsif_2() : int {
    if (0) {
      return 0;
    }
    elsif(0) {
      return 0;
    }
    elsif(1) {
      return 1;
    }
    else {
      return 0;
    }
    
    return 0;
  }
  
  sub if_duplicate() : int {
    
    if (1) {
      if (0) {
        return 0;
      }
      elsif (1) {
        return 1;
      }
      else {
        return 0;
      }
    }
    else {
      return 0;
    }
  }

  # If a == b
  sub if_eq_byte_same () : int {
    
    if ((byte)3 == (byte)3) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_eq_byte_different () : int {
    
    if ((byte)3 == (byte)2) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_eq_short_same () : int {
    
    if ((short)3 == (short)3) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_eq_short_different () : int {
    
    if ((short)3 == (short)2) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_eq_int_same () : int {
    
    if ((int)3 == (int)3) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_eq_int_different () : int {
    
    if ((int)3 == (int)2) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_eq_long_same () : int {
    
    if ((long)3 == (long)3) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_eq_long_different () : int {
    
    if ((long)3 == (long)2) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_eq_float_same () : int {
    
    if (0.5f == 0.5f) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_eq_float_different () : int {
    
    if (0.5f == 0.25f) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_eq_double_same () : int {
    
    if (0.5 == 0.5) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_eq_double_different () : int {
    
    if (0.5 == 0.25) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_eq_object_same () : int {
    
    my $obj1 = malloc TestCase;
    
    if ($obj1 == $obj1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_eq_object_different () : int {
    my $obj1 = malloc TestCase;
    my $obj2 = malloc TestCase;
    
    if ($obj1 == $obj2) {
      return 0;
    }
    else {
      return 1;
    }
  }

  # If a != b
  sub if_ne_byte_same () : int {
    
    if ((byte)3 != (byte)3) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ne_byte_different () : int {
    
    if ((byte)3 != (byte)2) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_ne_short_same () : int {
    
    if ((short)3 != (short)3) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ne_short_different () : int {
    
    if ((short)3 != (short)2) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_ne_int_same () : int {
    
    if ((int)3 != (int)3) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ne_int_different () : int {
    
    if ((int)3 != (int)2) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_ne_long_same () : int {
    
    if ((long)3 != (long)3) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ne_long_different () : int {
    
    if ((long)3 != (long)2) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_ne_float_same () : int {
    
    if (0.5f != 0.5f) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ne_float_different () : int {
    
    if (0.5f != 0.25f) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_ne_double_same () : int {
    
    if (0.5 != 0.5) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ne_double_different () : int {
    
    if (0.5 != 0.25) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_ne_object_same () : int {
    
    my $obj1 = malloc TestCase;
    
    if ($obj1 != $obj1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_ne_object_different () : int {
    my $obj1 = malloc TestCase;
    my $obj2 = malloc TestCase;
    
    if ($obj1 != $obj2) {
      return 1;
    }
    else {
      return 0;
    }
  }

  # If a > b
  sub if_gt_byte_left_big () : int {
    
    if ((byte)3 > (byte)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_gt_byte_same () : int {
    
    if ((byte)3 > (byte)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_byte_right_big () : int {
    
    if ((byte)3 > (byte)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_short_left_big () : int {
    
    if ((short)3 > (short)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_gt_short_same () : int {
    
    if ((short)3 > (short)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_short_right_big () : int {
    
    if ((short)3 > (short)4) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_gt_int_left_big () : int {
    
    if (3 > 1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_gt_int_same () : int {
    
    if (3 > 3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_int_right_big () : int {
    
    if (3 > 4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_long_left_big () : int {
    
    if ((long)3 > (long)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_gt_long_same () : int {
    
    if ((long)3 > (long)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_long_right_big () : int {
    
    if ((long)3 > (long)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_float_left_big () : int {
    
    if ((float)3 > (float)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_gt_float_same () : int {
    
    if ((float)3 > (float)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_float_right_big () : int {
    
    if ((float)3 > (float)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_double_left_big () : int {
    
    if ((double)3 > (double)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_gt_double_same () : int {
    
    if ((double)3 > (double)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_gt_double_right_big () : int {
    
    if ((double)3 > (double)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  # If a >= b
  sub if_ge_byte_left_big () : int {
    
    if ((byte)3 >= (byte)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_byte_same () : int {
    
    if ((byte)3 >= (byte)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_byte_right_big () : int {
    
    if ((byte)3 >= (byte)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_ge_short_left_big () : int {
    
    if ((short)3 >= (short)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_short_same () : int {
    
    if ((short)3 >= (short)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_short_right_big () : int {
    
    if ((short)3 >= (short)4) {
      return 0;
    }
    else {
      return 1;
    }
  }
  
  sub if_ge_int_left_big () : int {
    
    if (3 >= 1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_int_same () : int {
    
    if (3 >= 3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_int_right_big () : int {
    
    if (3 >= 4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_ge_long_left_big () : int {
    
    if ((long)3 >= (long)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_long_same () : int {
    
    if ((long)3 >= (long)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_long_right_big () : int {
    
    if ((long)3 >= (long)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_ge_float_left_big () : int {
    
    if ((float)3 >= (float)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_float_same () : int {
    
    if ((float)3 >= (float)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_float_right_big () : int {
    
    if ((float)3 >= (float)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_ge_double_left_big () : int {
    
    if ((double)3 >= (double)1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_double_same () : int {
    
    if ((double)3 >= (double)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_ge_double_right_big () : int {
    
    if ((double)3 >= (double)4) {
      return 0;
    }
    else {
      return 1;
    }
  }

  # If a < b
  sub if_lt_byte_left_big () : int {
    
    if ((byte)3 < (byte)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_byte_same () : int {
    
    if ((byte)3 < (byte)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_byte_right_big () : int {
    
    if ((byte)3 < (byte)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_lt_short_left_big () : int {
    
    if ((short)3 < (short)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_short_same () : int {
    
    if ((short)3 < (short)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_short_right_big () : int {
    
    if ((short)3 < (short)4) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_lt_int_left_big () : int {
    
    if (3 < 1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_int_same () : int {
    
    if (3 < 3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_int_right_big () : int {
    
    if (3 < 4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_lt_long_left_big () : int {
    
    if ((long)3 < (long)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_long_same () : int {
    
    if ((long)3 < (long)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_long_right_big () : int {
    
    if ((long)3 < (long)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_lt_float_left_big () : int {
    
    if ((float)3 < (float)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_float_same () : int {
    
    if ((float)3 < (float)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_float_right_big () : int {
    
    if ((float)3 < (float)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_lt_double_left_big () : int {
    
    if ((double)3 < (double)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_double_same () : int {
    
    if ((double)3 < (double)3) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_lt_double_right_big () : int {
    
    if ((double)3 < (double)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  # If a <= b
  sub if_le_byte_left_big () : int {
    
    if ((byte)3 <= (byte)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_le_byte_same () : int {
    
    if ((byte)3 <= (byte)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_byte_right_big () : int {
    
    if ((byte)3 <= (byte)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_short_left_big () : int {
    
    if ((short)3 <= (short)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_le_short_same () : int {
    
    if ((short)3 <= (short)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_short_right_big () : int {
    
    if ((short)3 <= (short)4) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub if_le_int_left_big () : int {
    
    if (3 <= 1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_le_int_same () : int {
    
    if (3 <= 3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_int_right_big () : int {
    
    if (3 <= 4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_long_left_big () : int {
    
    if ((long)3 <= (long)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_le_long_same () : int {
    
    if ((long)3 <= (long)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_long_right_big () : int {
    
    if ((long)3 <= (long)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_float_left_big () : int {
    
    if ((float)3 <= (float)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_le_float_same () : int {
    
    if ((float)3 <= (float)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_float_right_big () : int {
    
    if ((float)3 <= (float)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_double_left_big () : int {
    
    if ((double)3 <= (double)1) {
      return 0;
    }
    else {
      return 1;
    }
  }

  sub if_le_double_same () : int {
    
    if ((double)3 <= (double)3) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub if_le_double_right_big () : int {
    
    if ((double)3 <= (double)4) {
      return 1;
    }
    else {
      return 0;
    }
  }

  # Bit shift right logical
  sub bit_shift_right_logical_byte() : int {
    # 11000001 >>> 2
    my $value = (byte)0xC1 >>> 2;
    
    # 00110000
    if ($value == (byte)0x30) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_right_logical_short() : int {
    # 11000000 00000001 >>> 2
    my $value = (short)0xC001 >>> 2;
    
    # 00110000 00000000
    if ($value == (short)0x3000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_right_logical_int() : int {
    # 11000000 00000000 00000000 00000001 >>> 2
    my $value = 0xC0000001 >>> 2;
    
    # 00110000 00000000 00000000 00000000
    if ($value == 0x30000000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_right_logical_long() : int {
    # 11000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 >>> 2
    my $value = 0xC000000000000001L >>> 2;
    
    # 00110000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    if ($value == 0x3000000000000000L) {
      return 1;
    }
    else {
      return 0;
    }
  }

  # Bit shift right logical
  sub bit_shift_right_byte() : int {
    # 11000001 >> 2
    my $value = (byte)0xC1 >> 2;
    
    # 11110000
    if ($value == (byte)0xF0) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_right_short() : int {
    # 11000000 00000001 >> 2
    my $value = (short)0xC001 >> 2;
    
    # 11110000 00000000
    if ($value == (short)0xF000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_right_int() : int {
    # 11000000 00000000 00000000 00000001 >> 2
    my $value = 0xC0000001 >> 2;
    
    # 11110000 00000000 00000000 00000000
    if ($value == 0xF0000000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_right_long() : int {
    # 11000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 >> 2
    my $value = 0xC000000000000001L >> 2;
    
    # 11110000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    if ($value == 0xF000000000000000L) {
      return 1;
    }
    else {
      return 0;
    }
  }

  # Number literal
  sub number_literal_hex_int() : int {
    my $value = 0xFF;
    
    if ($value == 255) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub number_literal_hex_int_max() : int {
    # 11111111 11111111 11111111 11111111
    my $value = 0xFFFFFFFF;
    
    if ($value == -1) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub number_literal_hex_long() : int {
    my $value = 0xFFL;
    
    if ($value == 255L) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub number_literal_hex_long_max() : int {
    # 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111
    my $value = 0xFFFFFFFFFFFFFFFFL;
    
    if ($value == -1L) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  # Bit shift left
  sub bit_shift_left_byte() : int {
    # 00000011 << 2
    my $value = (byte)0x3 << 2;
    
    # 00001100
    if ($value == (byte)0xC) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_byte_max() : int {
    
    # 01000000 << 1
    my $value = (byte)0x40 << 1;
    
    # 10000000
    if ($value == (byte)0x80) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_byte_overflow() : int {
    
    # 10000000 << 1
    my $value = (byte)0x80 << 1;
    
    # 00000000
    if ($value == (byte)0) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_short() : int {
    
    # 00000011 00000000 << 2
    my $value = (short)0x300 << 2;
    
    # 00001100 00000000
    if ($value == (short)0xC00) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_short_max() : int {
    
    # 01000000 00000000 << 1
    my $value = (short)0x4000 << 1;
    
    # 10000000 00000000
    if ($value == (short)0x8000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_short_overflow() : int {
    
    # 10000000 00000000 << 1
    my $value = (short)0x8000 << 1;
    
    # 00000000 00000000
    if ($value == (short)0) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub bit_shift_left_int() : int {
    
    # 00000011 00000000 00000000 00000000 << 2
    my $value = 0x30000000 << 2;
    
    # 00001100 00000000 00000000 00000000
    if ($value == 0xC0000000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_int_max() : int {
    
    # 01000000 00000000 00000000 00000000 << 1
    my $value = 0x40000000 << 1;
    
    # 10000000 00000000 00000000 00000000
    if ($value == 0x80000000) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_int_overflow() : int {
    
    # 10000000 00000000 00000000 00000000 << 1
    my $value = 0x80000000 << 1;
    
    # 00000000 00000000 00000000 00000000
    if ($value == 0) {
      return 1;
    }
    else {
      return 0;
    }
  }

  sub bit_shift_left_long() : int {
    
    # 00000011 00000000 00000000 00000000 00000000 00000000 00000000 00000000 << 2
    my $value = 0x3000000000000000L << 2;
    
    # 00001100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
    if ($value == 0xC000000000000000L) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_long_max() : int {
    
    # 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000  << 1
    my $value = 0x4000000000000000L << 1;
    
    # 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
    if ($value == 0x8000000000000000L) {
      return 1;
    }
    else {
      return 0;
    }
  }
  
  sub bit_shift_left_long_overflow() : int {
    
    # 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000  << 1
    my $value = 0x8000000000000000L << 1;
    
    # 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
    if ($value == 0L) {
      return 1;
    }
    else {
      return 0;
    }
  }

  # Array
  sub array_malloc_int_array_and_get_length() : int {
    
    my $nums = malloc int[3];
    my $len = @$nums;
    
    return $len;
  }

  sub array_set_and_get_array_element_first() : int {
    
    my $nums = malloc int[3];
    $nums->[0] = 345;

    return $nums->[0];
  }

  sub array_set_and_get_array_element_last() : int {
    
    my $nums = malloc int[3];
    $nums->[2] = 298;

    return $nums->[2];
  }

  sub array_culcurate_sum_by_for() : int {
    
    my $nums = malloc int[3];
    $nums->[0] = 1;
    $nums->[1] = 2;
    $nums->[2] = 3;
    
    my $total = 0;
    for (my $i = 0; $i < @$nums; $i++) {
      $total = $total + $nums->[$i];
    }

    return $total;
  }
  
  # Sum
  sub sum_byte ($a : byte, $b :byte) : byte {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_short ($a : short, $b :short) : short {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_int ($a : int, $b :int) : int {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_long ($a : long, $b :long) : long {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_float ($a : float, $b :float) : float {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_double ($a : double, $b :double) : double {
    
    my $total = $a + $b;
    
    return $total;
  }
  
  # For
  sub for_basic() : int {
    my $total = 0;
    for (my $i = 1; $i <= 3; $i++) {
      $total = $total + $i;
    }
    
    return $total;
  }
}
