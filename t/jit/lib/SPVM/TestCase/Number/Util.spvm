use Number::Util;

package TestCase::Number::Util {
  jit sub byte_constant : int () {
    if ((int)Number::Util->BYTE_MIN_VALUE() == (int)(byte)-128) {
      if ((int)Number::Util->BYTE_MAX_VALUE() == (int)(byte)127) {
        if (Number::Util->BYTE_BYTES() == 1) {
          if (Number::Util->BYTE_SIZE() == 8) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub short_constant : int () {
    if ((int)Number::Util->SHORT_MIN_VALUE() == (int)(short)-32768) {
      if ((int)Number::Util->SHORT_MAX_VALUE() == (int)(short)32767) {
        if (Number::Util->SHORT_BYTES() == 2) {
          if (Number::Util->SHORT_SIZE() == 16) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub int_constant : int () {
    if (Number::Util->INT_MIN_VALUE() == -2147483648) {
      if (Number::Util->INT_MAX_VALUE() == 2147483647) {
        if (Number::Util->INT_BYTES() == 4) {
          if (Number::Util->INT_SIZE() == 32) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub long_constant : int () {
    if (Number::Util->LONG_MIN_VALUE() == -9223372036854775808L) {
      if (Number::Util->LONG_MAX_VALUE() == 9223372036854775807L) {
        if (Number::Util->LONG_BYTES() == 8) {
          if (Number::Util->LONG_SIZE() == 64) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }


  # SPVM->Float
  jit sub float_constant: int () {
    if (Number::Util->FLOAT_MIN_EXPONENT() == -126) {
      if (Number::Util->FLOAT_MAX_EXPONENT() == 127) {
        if (Number::Util->FLOAT_BYTES() == 4) {
          if (Number::Util->FLOAT_SIZE() == 32) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub float_float_to_raw_int_bits: int () {
    
    my $float_value = 0.5f;
    
    my $int_bits = Number::Util->float_float_to_raw_int_bits($float_value);
    
    if ($int_bits == 0x3F000000) {
      return 1;
    }
    
    return 0;
  }
  
  jit sub float_float_to_raw_int_bits_nan: int () {
    
    my $float_value = 0.0f / 0.0f;
    
    if (Number::Util->float_is_nan($float_value)) {
      my $int_bits = Number::Util->float_float_to_raw_int_bits($float_value);
      
      if ($int_bits != 0x7FC00000) {
        return 1;
      }
    }
    
    return 0;
  }

  jit sub float_float_to_int_bits: int () {
    
    my $float_value = 0.5f;
    
    my $int_bits = Number::Util->float_float_to_int_bits($float_value);
    
    if ($int_bits == 0x3F000000) {
      return 1;
    }
    
    return 0;
  }
  
  jit sub float_float_to_int_bits_nan: int () {
    
    my $float_value = 0.0f / 0.0f;
    
    if (Number::Util->float_is_nan($float_value)) {
      my $int_bits = Number::Util->float_float_to_int_bits($float_value);
      
      if ($int_bits == 0x7FC00000) {
        return 1;
      }
    }
    
    return 0;
  }
    
  jit sub float_int_bits_to_float: int () {
    
    my $int_bits = 0x3F000000;
    
    my $float_value = Number::Util->float_int_bits_to_float($int_bits);
    
    if ($float_value == 0.5f) {
      return 1;
    }
    
    return 0;
  }
  
  jit sub float_int_bits_to_float_nan_first_condition: int () {
    
    if (Number::Util->float_float_to_raw_int_bits(Number::Util->float_int_bits_to_float(0x7F800000)) == 0x7F800000) {
      if (Number::Util->float_float_to_raw_int_bits(Number::Util->float_int_bits_to_float(0x7F800001)) == 0x7FC00000) {
        if (Number::Util->float_float_to_raw_int_bits(Number::Util->float_int_bits_to_float(0x7F800002)) == 0x7FC00000) {
          if (Number::Util->float_float_to_raw_int_bits(Number::Util->float_int_bits_to_float(0x7FFFFFFF)) == 0x7FC00000) {
            if (Number::Util->float_float_to_raw_int_bits(Number::Util->float_int_bits_to_float(0x80000000)) == 0x80000000) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub float_int_bits_to_float_nan_first_condition_is_nan: int () {
    
    if (!Number::Util->float_is_nan(Number::Util->float_int_bits_to_float(0x7F800000))) {
      if (Number::Util->float_is_nan(Number::Util->float_int_bits_to_float(0x7F800001))) {
        if (Number::Util->float_is_nan(Number::Util->float_int_bits_to_float(0x7F800002))) {
          if (Number::Util->float_is_nan(Number::Util->float_int_bits_to_float(0x7FFFFFFF))) {
            if (!Number::Util->float_is_nan(Number::Util->float_int_bits_to_float(0x80000000))) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }
  
  jit sub float_int_bits_to_float_nan_second_condition: int () {
    
    if (Number::Util->float_float_to_raw_int_bits(Number::Util->float_int_bits_to_float(0xFF800000)) == 0xFF800000) {
      if (Number::Util->float_float_to_raw_int_bits(Number::Util->float_int_bits_to_float(0xFF800001)) == 0x7FC00000) {
        if (Number::Util->float_float_to_raw_int_bits(Number::Util->float_int_bits_to_float(0xFF800002)) == 0x7FC00000) {
          if (Number::Util->float_float_to_raw_int_bits(Number::Util->float_int_bits_to_float(0xFFFFFFFF)) == 0x7FC00000) {
            if (Number::Util->float_float_to_raw_int_bits(Number::Util->float_int_bits_to_float(0x00000000)) == 0x00000000) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub float_int_bits_to_float_nan_second_condition_is_nan: int () {
    
    if (!Number::Util->float_is_nan(Number::Util->float_int_bits_to_float(0xFF800000))) {
      if (Number::Util->float_is_nan(Number::Util->float_int_bits_to_float(0xFF800001))) {
        if (Number::Util->float_is_nan(Number::Util->float_int_bits_to_float(0xFF800002))) {
          if (Number::Util->float_is_nan(Number::Util->float_int_bits_to_float(0xFFFFFFFF))) {
            if (!Number::Util->float_is_nan(Number::Util->float_int_bits_to_float(0x00000000))) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub float_is_infinite: int () {
    if (Number::Util->float_is_infinite(Number::Util->FLOAT_POSITIVE_INFINITY())) {
      if (Number::Util->float_is_infinite(Number::Util->FLOAT_NEGATIVE_INFINITY())) {
        if (!Number::Util->float_is_infinite(Number::Util->FLOAT_NAN())) {
          if (!Number::Util->float_is_infinite(0.1f)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub float_is_finite: int () {
    if (!Number::Util->float_is_finite(Number::Util->FLOAT_POSITIVE_INFINITY())) {
      if (!Number::Util->float_is_finite(Number::Util->FLOAT_NEGATIVE_INFINITY())) {
        if (!Number::Util->float_is_finite(Number::Util->FLOAT_NAN())) {
          if (Number::Util->float_is_finite(0.1f)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub float_is_nan: int () {
    if (!Number::Util->float_is_nan(Number::Util->FLOAT_POSITIVE_INFINITY())) {
      if (!Number::Util->float_is_nan(Number::Util->FLOAT_NEGATIVE_INFINITY())) {
        if (Number::Util->float_is_nan(Number::Util->FLOAT_NAN())) {
          if (!Number::Util->float_is_nan(0.1f)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }
  
  jit sub float_pass_positive_infinity : int ($value : float) {
    if ($value == Number::Util->FLOAT_POSITIVE_INFINITY()) {
      return 1;
    }
    
    return 0;
  }
  
  jit sub float_pass_negative_infinity : int ($value : float) {
    if ($value == Number::Util->FLOAT_NEGATIVE_INFINITY()) {
      return 1;
    }
    
    return 0;
  }
  
  jit sub float_pass_nan : int ($value : float) {
    if (Number::Util->float_is_nan($value)) {
      if (Number::Util->float_float_to_raw_int_bits($value) == 0x7FC00000) {
        return 1;
      }
    }
    
    return 0;
  }

  jit sub double_constant : int () {
    if (Number::Util->DOUBLE_MIN_EXPONENT() == -1022) {
      if (Number::Util->DOUBLE_MAX_EXPONENT() == 1023) {
        if (Number::Util->DOUBLE_BYTES() == 8) {
          if (Number::Util->DOUBLE_SIZE() == 64) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }
  
  jit sub double_double_to_raw_long_bits : int () {
    
    my $double_value = 0.5;
    
    my $long_bits = Number::Util->double_double_to_raw_long_bits($double_value);
    
    if ($long_bits == 0x3FE0000000000000L) {
      return 1;
    }
    
    return 0;
  }
  
  jit sub double_double_to_raw_long_bits_nan : int () {
    
    my $double_value = 0.0 / 0.0;
    
    if (Number::Util->double_is_nan($double_value)) {
      my $long_bits = Number::Util->double_double_to_raw_long_bits($double_value);
      
      if ($long_bits != 0x7FF8000000000000L) {
        return 1;
      }
    }
    
    return 0;
  }

  jit sub double_double_to_long_bits : int () {
    
    my $double_value = 0.5;
    
    my $long_bits = Number::Util->double_double_to_long_bits($double_value);
    
    if ($long_bits == 0x3FE0000000000000L) {
      return 1;
    }
    
    return 0;
  }
  
  jit sub double_double_to_long_bits_nan : int () {
    
    my $double_value = 0.0 / 0.0;
    
    if (Number::Util->double_is_nan($double_value)) {
      my $long_bits = Number::Util->double_double_to_long_bits($double_value);
      
      if ($long_bits == 0x7FF8000000000000L) {
        return 1;
      }
    }
    
    return 0;
  }
    
  jit sub double_long_bits_to_double : int () {
    
    my $long_bits = 0x3FE0000000000000L;
    
    my $double_value = Number::Util->double_long_bits_to_double($long_bits);
    
    if ($double_value == 0.5) {
      return 1;
    }
    
    return 0;
  }
  
  jit sub double_long_bits_to_double_nan_first_condition : int () {
    
    if (Number::Util->double_double_to_raw_long_bits(Number::Util->double_long_bits_to_double(0x7FF0000000000000L)) == 0x7FF0000000000000L) {
      if (Number::Util->double_double_to_raw_long_bits(Number::Util->double_long_bits_to_double(0x7FF0000000000001L)) == 0x7FF8000000000000L) {
        if (Number::Util->double_double_to_raw_long_bits(Number::Util->double_long_bits_to_double(0x7FF0000000000002L)) == 0x7FF8000000000000L) {
          if (Number::Util->double_double_to_raw_long_bits(Number::Util->double_long_bits_to_double(0x7FFFFFFFFFFFFFFFL)) == 0x7FF8000000000000L) {
            if (Number::Util->double_double_to_raw_long_bits(Number::Util->double_long_bits_to_double(0x8000000000000000L)) == 0x8000000000000000L) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub double_long_bits_to_double_nan_first_condition_is_nan : int () {
    
    if (!Number::Util->double_is_nan(Number::Util->double_long_bits_to_double(0x7FF0000000000000L))) {
      if (Number::Util->double_is_nan(Number::Util->double_long_bits_to_double(0x7FF0000000000001L))) {
        if (Number::Util->double_is_nan(Number::Util->double_long_bits_to_double(0x7FF0000000000002L))) {
          if (Number::Util->double_is_nan(Number::Util->double_long_bits_to_double(0x7FFFFFFFFFFFFFFFL))) {
            if (!Number::Util->double_is_nan(Number::Util->double_long_bits_to_double(0x8000000000000000L))) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }
  
  jit sub double_long_bits_to_double_nan_second_condition : int () {
    
    if (Number::Util->double_double_to_raw_long_bits(Number::Util->double_long_bits_to_double(0xFFF0000000000000L)) == 0xFFF0000000000000L) {
      if (Number::Util->double_double_to_raw_long_bits(Number::Util->double_long_bits_to_double(0xFFF0000000000001L)) == 0x7FF8000000000000L) {
        if (Number::Util->double_double_to_raw_long_bits(Number::Util->double_long_bits_to_double(0xFFF0000000000002L)) == 0x7FF8000000000000L) {
          if (Number::Util->double_double_to_raw_long_bits(Number::Util->double_long_bits_to_double(0xFFFFFFFFFFFFFFFFL)) == 0x7FF8000000000000L) {
            if (Number::Util->double_double_to_raw_long_bits(Number::Util->double_long_bits_to_double(0x0000000000000000L)) == 0x0000000000000000L) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub double_long_bits_to_double_nan_second_condition_is_nan : int () {
    
    if (!Number::Util->double_is_nan(Number::Util->double_long_bits_to_double(0xFFF0000000000000L))) {
      if (Number::Util->double_is_nan(Number::Util->double_long_bits_to_double(0xFFF0000000000001L))) {
        if (Number::Util->double_is_nan(Number::Util->double_long_bits_to_double(0xFFF0000000000002L))) {
          if (Number::Util->double_is_nan(Number::Util->double_long_bits_to_double(0xFFFFFFFFFFFFFFFFL))) {
            if (!Number::Util->double_is_nan(Number::Util->double_long_bits_to_double(0x0000000000000000L))) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub double_is_infinite : int () {
    if (Number::Util->double_is_infinite(Number::Util->DOUBLE_POSITIVE_INFINITY())) {
      if (Number::Util->double_is_infinite(Number::Util->DOUBLE_NEGATIVE_INFINITY())) {
        if (!Number::Util->double_is_infinite(Number::Util->DOUBLE_NAN())) {
          if (!Number::Util->double_is_infinite(0.1)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub double_is_finite : int () {
    if (!Number::Util->double_is_finite(Number::Util->DOUBLE_POSITIVE_INFINITY())) {
      if (!Number::Util->double_is_finite(Number::Util->DOUBLE_NEGATIVE_INFINITY())) {
        if (!Number::Util->double_is_finite(Number::Util->DOUBLE_NAN())) {
          if (Number::Util->double_is_finite(0.1)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub double_is_nan : int () {
    if (!Number::Util->double_is_nan(Number::Util->DOUBLE_POSITIVE_INFINITY())) {
      if (!Number::Util->double_is_nan(Number::Util->DOUBLE_NEGATIVE_INFINITY())) {
        if (Number::Util->double_is_nan(Number::Util->DOUBLE_NAN())) {
          if (!Number::Util->double_is_nan(0.1)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }
  
  jit sub double_pass_nan : int ($value : double) {
    if (Number::Util->double_is_nan($value)) {
      if (Number::Util->double_double_to_raw_long_bits($value) == 0x7FF8000000000000L) {
        return 1;
      }
    }
    
    return 0;
  }
  
  jit sub double_pass_positive_infinity : int ($value : double) {
    if ($value == Number::Util->DOUBLE_POSITIVE_INFINITY()) {
      return 1;
    }
    
    return 0;
  }

  jit sub double_pass_negative_infinity : int ($value : double) {
    if ($value == Number::Util->DOUBLE_NEGATIVE_INFINITY()) {
      return 1;
    }
    
    return 0;
  }

}
