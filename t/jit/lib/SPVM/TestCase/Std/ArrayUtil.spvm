package TestCase::Std::ArrayUtil {
  use Std::ArrayUtil;
  use Byte;

  jit sub eq_bytes : int () {
    my $x1 = new byte[] {(byte)1, (byte)2, (byte)3};
    my $x2 = new byte[] {(byte)1, (byte)2, (byte)3};
    my $x3 = new byte[] {(byte)1, (byte)2};
    
    if (Std::ArrayUtil->eq_bytes($x1, $x2)) {
      if (!Std::ArrayUtil->eq_bytes($x1, $x3)) {
        if (Std::ArrayUtil->eq_bytes(undef, undef)) {
          if (!Std::ArrayUtil->eq_bytes($x1, undef)) {
            if (!Std::ArrayUtil->eq_bytes(undef, $x1)) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub eq_shorts : int () {
    my $x1 = new short[] {(short)1, (short)2, (short)3};
    my $x2 = new short[] {(short)1, (short)2, (short)3};
    my $x3 = new short[] {(short)1, (short)2};
    
    if (Std::ArrayUtil->eq_shorts($x1, $x2)) {
      if (!Std::ArrayUtil->eq_shorts($x1, $x3)) {
        if (Std::ArrayUtil->eq_shorts(undef, undef)) {
          if (!Std::ArrayUtil->eq_shorts($x1, undef)) {
            if (!Std::ArrayUtil->eq_shorts(undef, $x1)) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub eq_ints : int () {
    my $x1 = new int[] {1, 2, 3};
    my $x2 = new int[] {1, 2, 3};
    my $x3 = new int[] {1, 2};
    
    if (Std::ArrayUtil->eq_ints($x1, $x2)) {
      if (!Std::ArrayUtil->eq_ints($x1, $x3)) {
        if (Std::ArrayUtil->eq_ints(undef, undef)) {
          if (!Std::ArrayUtil->eq_ints($x1, undef)) {
            if (!Std::ArrayUtil->eq_ints(undef, $x1)) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub eq_longs : int () {
    my $x1 = new long[] {1L, 2L, 3L};
    my $x2 = new long[] {1L, 2L, 3L};
    my $x3 = new long[] {1L, 2L};
    
    if (Std::ArrayUtil->eq_longs($x1, $x2)) {
      if (!Std::ArrayUtil->eq_longs($x1, $x3)) {
        if (Std::ArrayUtil->eq_longs(undef, undef)) {
          if (!Std::ArrayUtil->eq_longs($x1, undef)) {
            if (!Std::ArrayUtil->eq_longs(undef, $x1)) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub eq_floats : int () {
    my $x1 = new float[] {1f, 0.5f, 0.025f};
    my $x2 = new float[] {1f, 0.5f, 0.025f};
    my $x3 = new float[] {1f, 0.5f};
    
    if (Std::ArrayUtil->eq_floats($x1, $x2)) {
      if (!Std::ArrayUtil->eq_floats($x1, $x3)) {
        if (Std::ArrayUtil->eq_floats(undef, undef)) {
          if (!Std::ArrayUtil->eq_floats($x1, undef)) {
            if (!Std::ArrayUtil->eq_floats(undef, $x1)) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub eq_doubles : int () {
    my $x1 = new double[] {1d, 0.5d, 0.025d};
    my $x2 = new double[] {1d, 0.5d, 0.025d};
    my $x3 = new double[] {1d, 0.5d};
    
    if (Std::ArrayUtil->eq_doubles($x1, $x2)) {
      if (!Std::ArrayUtil->eq_doubles($x1, $x3)) {
        if (Std::ArrayUtil->eq_doubles(undef, undef)) {
          if (!Std::ArrayUtil->eq_doubles($x1, undef)) {
            if (!Std::ArrayUtil->eq_doubles(undef, $x1)) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_bytes : int () {
    
    my $values = new byte[] {(byte)0, (byte)1, (byte)2};
    
    my $values2 = Std::ArrayUtil->copy_bytes($values, len $values);
    
    if (@$values2 == 3) {
      if ((int)$values2->[0] == (int)(byte)0) {
        if ((int)$values2->[1] == (int)(byte)1) {
          if ((int)$values2->[2] == (int)(byte)2) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_bytes_over : int () {
    
    my $values = new byte[] {(byte)0, (byte)1, (byte)2};
    
    my $length = len $values + 1;
    my $values2 = Std::ArrayUtil->copy_bytes($values, $length);
    
    if (@$values2 == 4) {
      if ((int)$values2->[0] == (int)(byte)0) {
        if ((int)$values2->[1] == (int)(byte)1) {
          if ((int)$values2->[2] == (int)(byte)2) {
            if ((int)$values2->[3] == (int)(byte)0) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_bytes_less : int () {
    
    my $values = new byte[] {(byte)0, (byte)1, (byte)2};
    
    my $length = len $values - 1;
    my $values2 = Std::ArrayUtil->copy_bytes($values, $length);
    
    if (@$values2 == 2) {
      if ((int)$values2->[0] == (int)(byte)0) {
        if ((int)$values2->[1] == (int)(byte)1) {
          return 1;
        }
      }
    }
    
    return 0;
  }

  jit sub copy_bytes_undef : int () {
    
    eval {
      Std::ArrayUtil->copy_bytes(undef, 1);
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  jit sub copy_bytes_negative : int () {
    
    eval {
      my $values = new byte[] {(byte)0, (byte)1, (byte)2};
      Std::ArrayUtil->copy_bytes(undef, -1);
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  jit sub copy_shorts : int () {
    
    my $values = new short[] {(short)0, (short)1, (short)2};
    
    my $values2 = Std::ArrayUtil->copy_shorts($values, len $values);
    
    if (@$values2 == 3) {
      if ((int)$values2->[0] == (int)(short)0) {
        if ((int)$values2->[1] == (int)(short)1) {
          if ((int)$values2->[2] == (int)(short)2) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_shorts_over : int () {
    
    my $values = new short[] {(short)0, (short)1, (short)2};
    
    my $length = len $values + 1;
    my $values2 = Std::ArrayUtil->copy_shorts($values, $length);
    
    if (@$values2 == 4) {
      if ((int)$values2->[0] == (int)(short)0) {
        if ((int)$values2->[1] == (int)(short)1) {
          if ((int)$values2->[2] == (int)(short)2) {
            if ((int)$values2->[3] == (int)(short)0) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_shorts_less : int () {
    
    my $values = new short[] {(short)0, (short)1, (short)2};
    
    my $length = len $values - 1;
    my $values2 = Std::ArrayUtil->copy_shorts($values, $length);
    
    if (@$values2 == 2) {
      if ((int)$values2->[0] == (int)(short)0) {
        if ((int)$values2->[1] == (int)(short)1) {
          return 1;
        }
      }
    }
    
    return 0;
  }

  jit sub copy_shorts_undef : int () {
    
    eval {
      Std::ArrayUtil->copy_shorts(undef, 1);
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  jit sub copy_shorts_negative : int () {
    
    eval {
      my $values = new short[] {(short)0, (short)1, (short)2};
      Std::ArrayUtil->copy_shorts(undef, -1);
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }


  jit sub copy_ints : int () {
    
    my $values = new int[] {0, 1, 2};
    
    my $values2 = Std::ArrayUtil->copy_ints($values, len $values);
    
    if (@$values2 == 3) {
      if ($values2->[0] == 0) {
        if ($values2->[1] == 1) {
          if ($values2->[2] == 2) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_ints_over : int () {
    
    my $values = new int[] {0, 1, 2};
    
    my $length = len $values + 1;
    my $values2 = Std::ArrayUtil->copy_ints($values, $length);
    
    if (@$values2 == 4) {
      if ($values2->[0] == 0) {
        if ($values2->[1] == 1) {
          if ($values2->[2] == 2) {
            if ($values2->[3] == 0) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_ints_less : int () {
    
    my $values = new int[] {0, 1, 2};
    
    my $length = len $values - 1;
    my $values2 = Std::ArrayUtil->copy_ints($values, $length);
    
    if (@$values2 == 2) {
      if ($values2->[0] == 0) {
        if ($values2->[1] == 1) {
          return 1;
        }
      }
    }
    
    return 0;
  }

  jit sub copy_ints_undef : int () {
    
    eval {
      Std::ArrayUtil->copy_ints(undef, 1);
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  jit sub copy_ints_negative : int () {
    
    eval {
      my $values = new int[] {0, 1, 2};
      Std::ArrayUtil->copy_ints(undef, -1);
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  jit sub copy_longs : int () {
    
    my $values = new long[] {0L, 1L, 2L};
    
    my $values2 = Std::ArrayUtil->copy_longs($values, len $values);
    
    if (@$values2 == 3) {
      if ($values2->[0] == 0L) {
        if ($values2->[1] == 1L) {
          if ($values2->[2] == 2L) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_longs_over : int () {
    
    my $values = new long[] {0L, 1L, 2L};
    
    my $length = len $values + 1;
    my $values2 = Std::ArrayUtil->copy_longs($values, $length);
    
    if (@$values2 == 4) {
      if ($values2->[0] == 0L) {
        if ($values2->[1] == 1L) {
          if ($values2->[2] == 2L) {
            if ($values2->[3] == 0L) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_longs_less : int () {
    
    my $values = new long[] {0L, 1L, 2L};
    
    my $length = len $values - 1;
    my $values2 = Std::ArrayUtil->copy_longs($values, $length);
    
    if (@$values2 == 2) {
      if ($values2->[0] == 0L) {
        if ($values2->[1] == 1L) {
          return 1;
        }
      }
    }
    
    return 0;
  }

  jit sub copy_longs_undef : int () {
    
    eval {
      Std::ArrayUtil->copy_longs(undef, 1);
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  jit sub copy_longs_negative : int () {
    
    eval {
      my $values = new long[] {0L, 1L, 2L};
      Std::ArrayUtil->copy_longs(undef, -1);
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  jit sub copy_floats : int () {
    
    my $values = new float[] {0f, 1f, 2f};
    
    my $values2 = Std::ArrayUtil->copy_floats($values, len $values);
    
    if (@$values2 == 3) {
      if ($values2->[0] == 0f) {
        if ($values2->[1] == 1f) {
          if ($values2->[2] == 2f) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_floats_over : int () {
    
    my $values = new float[] {0f, 1f, 2f};
    
    my $length = len $values + 1;
    my $values2 = Std::ArrayUtil->copy_floats($values, $length);
    
    if (@$values2 == 4) {
      if ($values2->[0] == 0f) {
        if ($values2->[1] == 1f) {
          if ($values2->[2] == 2f) {
            if ($values2->[3] == 0f) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_floats_less : int () {
    
    my $values = new float[] {0f, 1f, 2f};
    
    my $length = len $values - 1;
    my $values2 = Std::ArrayUtil->copy_floats($values, $length);
    
    if (@$values2 == 2) {
      if ($values2->[0] == 0f) {
        if ($values2->[1] == 1f) {
          return 1;
        }
      }
    }
    
    return 0;
  }

  jit sub copy_floats_undef : int () {
    
    eval {
      Std::ArrayUtil->copy_floats(undef, 1);
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  jit sub copy_floats_negative : int () {
    
    eval {
      my $values = new float[] {0f, 1f, 2f};
      Std::ArrayUtil->copy_floats(undef, -1);
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  jit sub copy_doubles : int () {
    
    my $values = new double[] {0d, 1d, 2d};
    
    my $values2 = Std::ArrayUtil->copy_doubles($values, len $values);
    
    if (@$values2 == 3) {
      if ($values2->[0] == 0d) {
        if ($values2->[1] == 1d) {
          if ($values2->[2] == 2d) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_doubles_over : int () {
    
    my $values = new double[] {0d, 1d, 2d};
    
    my $length = len $values + 1;
    my $values2 = Std::ArrayUtil->copy_doubles($values, $length);
    
    if (@$values2 == 4) {
      if ($values2->[0] == 0d) {
        if ($values2->[1] == 1d) {
          if ($values2->[2] == 2d) {
            if ($values2->[3] == 0d) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  jit sub copy_doubles_less : int () {
    
    my $values = new double[] {0d, 1d, 2d};
    
    my $length = len $values - 1;
    my $values2 = Std::ArrayUtil->copy_doubles($values, $length);
    
    if (@$values2 == 2) {
      if ($values2->[0] == 0d) {
        if ($values2->[1] == 1d) {
          return 1;
        }
      }
    }
    
    return 0;
  }

  jit sub copy_doubles_undef : int () {
    
    eval {
      Std::ArrayUtil->copy_doubles(undef, 1);
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }

  jit sub copy_doubles_negative : int () {
    
    eval {
      my $values = new double[] {0d, 1d, 2d};
      Std::ArrayUtil->copy_doubles(undef, -1);
    };
    
    if ($@) {
      return 1;
    }
    
    return 0;
  }
}
