package TestCase {
  use TestCase::Minimal;
  use TestCase::Simple;
  use TestCase::Destructor;
  use TestCase::Empty;
  use TestCase::Private;
  use TestCase::Point_i3;
  use TestCase::Data::Weaken;

  use SPVM::Byte;
  use SPVM::Short;
  use SPVM::Int;
  use SPVM::Long;
  use SPVM::Float;
  use SPVM::Double;

  use SPVM::Example;

  our $PACKAGE_VAR_INT : int;
  our $PACKAGE_VAR_LONG : long;
  our $PACKAGE_VAR_MINIMAL : TestCase::Minimal;

  our $PACKAGE_VAR_INT2 : int;
  our $PACKAGE_VAR_LONG2 : long;
  our $PACKAGE_VAR_MINIMAL2 : TestCase::Minimal;

  has x_byte : byte;
  has x_short : short;
  has x_int : int;
  has x_long : long;
  has x_float : float;
  has x_double : double;
  has x_int_array : int[];
  has x_string : byte[];
  has x_test_case : TestCase;
  has minimal : TestCase::Minimal;
  has private_field : private int;
  
  sub INT : int () { return 127; }
  sub FLOAT_PRECICE : float () { return 16384.5f; }
  sub DOUBLE_PRECICE : double () { return 65536.5; }
  
  sub my_exe_test : int ($num : int) {
    return $num * 2;
  }
  sub main : int ($argv : string[]) {
    return 10;
  }
  
  sub get_private_field : int ($self : self) {
    return $self->{private_field};
  }
  
  sub set_x_int_array : void ($self : self, $x_int_array : int[]) {
    $self->{x_int_array} = $x_int_array;
  }

  sub set_x_string : void ($self : self, $x_string : byte[]) {
    $self->{x_string} = $x_string;
  }

  sub set_x_byte : void ($self : self, $x_byte : byte) {
    $self->{x_byte} = $x_byte;
  }

  sub set_x_short : void ($self : self, $x_short : short) {
    $self->{x_short} = $x_short;
  }

  sub set_x_int : void ($self : self, $x_int : int) {
    $self->{x_int} = $x_int;
  }

  sub set_x_long : void ($self : self, $x_long : long) {
    $self->{x_long} = $x_long;
  }

  sub set_x_float : void ($self : self, $x_float : float) {
    $self->{x_float} = $x_float;
  }

  sub set_x_double : void ($self : self, $x_double : double) {
    $self->{x_double} = $x_double;
  }

  sub get_x_byte : byte ($self : self) {
    return $self->{x_byte};
  }

  sub get_x_short : short ($self : self) {
    return $self->{x_short};
  }

  sub get_x_int : int ($self : self) {
    return $self->{x_int};
  }

  sub get_x_long : long ($self : self) {
    return $self->{x_long};
  }

  sub get_x_float : float ($self : self) {
    return $self->{x_float};
  }

  sub get_x_double : double ($self : self) {
    return $self->{x_double};
  }
  
  # Only compile check
  sub eval_block_stack_check : void () {
    eval {
      my $obj_error1 = "Error1";
      
      croak $obj_error1;
    };
    
    {
      my $obj_error2 = "Error2";
      
      croak $obj_error2;
    }
  }
  
  sub new : TestCase () {
    return new TestCase;
  }
  
  sub my_var_in_loop_free : int () {
    for (my $i = 0; $i < 5; $i++) {
      my $minimal = new TestCase::Minimal;
    }
  }
  
  sub package_var : int () {
    if ($TestCase::PACKAGE_VAR_INT == 0) {
      $TestCase::PACKAGE_VAR_INT = INT32_MAX();
      if ($TestCase::PACKAGE_VAR_INT == INT32_MAX()) {
        $TestCase::PACKAGE_VAR_LONG = INT64_MAX();
        if ($TestCase::PACKAGE_VAR_LONG == INT64_MAX()) {
          $TestCase::PACKAGE_VAR_MINIMAL = TestCase::Minimal->new();
          
          $TestCase::PACKAGE_VAR_MINIMAL->{x} = 4;
          
          if ($TestCase::PACKAGE_VAR_MINIMAL->{x} == 4) {
            $TestCase::PACKAGE_VAR_MINIMAL = undef;
            return 1;
          }
        }
      }
    }
    return 0;
  }

  sub package_var_rel_name : int () {
    $PACKAGE_VAR_INT = 2;
    
    if ($PACKAGE_VAR_INT == 2) {
      if ($TestCase::PACKAGE_VAR_INT == 2) {
        $PACKAGE_VAR_INT = 0;
        return 1;
      }
    }
    
    return 0;
  }

  sub package_var_other_package : int () {
    if ($TestCase::Simple::FOO == 0) {
      $TestCase::Simple::FOO = 1;
      if ($TestCase::Simple::FOO == 1) {
        return 1;
      }
    }
    return 0;
  }
  
  sub get_minimal : TestCase::Minimal ($self : self) {
    return $self->{minimal};
  }

  sub set_minimal : void ($self : self, $value : TestCase::Minimal) {
    $self->{minimal} = $value;
  }

  # Resorved word
  sub int : int ($obj : TestCase) {
    
    return 5;
  }
  
  sub use_reserved_word : int () {
    
    my $test_case = new TestCase;
    
    if (TestCase->int($test_case) == 5) {
      if (TestCase->int($test_case) == 5) {
        return 1;
      }
    }
    
    return 0;
  }
  
  sub concat : string () {
    "a" . "b";
    
    my $value = "a" . "b";
    
    return $value;
  }
  
  # string
  sub string_utf8 : string () {
    my $value = "あいうえお";
    
    return $value;
  }
  sub string_empty : string () {
    my $value = "";
    
    return $value;
  }

  sub my_var_scope : int () {
    my $ok1 = 0;
    my $ok2 = 0;
    my $ok3 = 0;
    
    my $var1 = 1;
    my $var2 = 2;
    
    if ($var1 == 1) {
      if ($var2 == 2) {
        $ok1 = 1;
      }
    }
    
    {
      my $var1 = 3;
      my $var2 = 4;
      my $var3 = 5;
      
      if ($var1 == 3) {
        if ($var2 == 4) {
          if ($var3 == 5) {
            $ok2 = 1;
          }
        }
      }
    }
    
    my $var3 = 6;
    
    if ($var1 == 1) {
      if ($var2 == 2) {
        if ($var3 == 6) {
          $ok3 = 1;
        }
      }
    }
    
    if ($ok1) {
      if ($ok2) {
        if ($ok3) {
          return 1;
        }
      }
    }
    
    return 0;
  }
  
  # My variable is initialized zero
  sub my_var_initialized_zero : int () {
    my $var1 : int;
    my $var2 : TestCase;
    
    if ($var1 == 0) {
      if ($var2 == undef) {
        return 1;
      }
    }
    return 0;
  }

  sub my_var_block : int () {
    my $success = 1;
    
    my $var1 = 1;
    if ($var1 != 1) {
      $success = 0;
    }
    
    {
      my $var1 = 2;
      if ($var1 != 2) {
        $success = 0;
      }
      
      {
        my $var1 = $var1;
        if ($var1 != 2) {
          $success = 0;
        }
        $var1 = 3;
      }
      if ($var1 != 2) {
        $success = 0;
      }
    }
    
    if ($success) {
      return 1;
    }
    return 0;
  }
  
  # new near small base_object_max_byte_size_use_memory_pool
  sub new_near_small_base_object_max_byte_size_use_memory_pool : int () {
    my $block = new byte[0xFFF0];
    
    return 1;
  }

  enum {
    INT_ZERO,
    INT_ONE,
    INT_THREE = 3,
    INT_FOUR,
    INT_SIX = 6,
    INT_MINUS_MAX = -2147483648
  }
  sub enum_int  : int () {
    
    if (TestCase->INT_ZERO == 0) {
      if (TestCase->INT_ONE == 1) {
        if (TestCase->INT_THREE == 3) {
          if (TestCase->INT_FOUR == 4) {
            if (TestCase->INT_SIX == 6) {
              if (TestCase->INT_MINUS_MAX == -2147483648) {
                return 1;
              }
            }
          }
        }
      }
    }
    
    return 0;
  }
  
  # Sum
  sub sum_byte : byte ($a : byte, $b :byte,) {
    
    my $total = (byte)((int)$a + (int)$b);
    
    return $total;
  }

  sub sum_short : short ($a : short, $b :short) {
    
    my $total = (short)((int)$a + (int)$b);
    
    return $total;
  }

  sub sum_int : int ($a : int, $b :int) {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_long : long ($a : long, $b :long) {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_float : float ($a : float, $b :float) {
    
    my $total = $a + $b;
    
    return $total;
  }

  sub sum_double : double ($a : double, $b :double) {
    
    my $total = $a + $b;
    
    return $total;
  }
  
}
