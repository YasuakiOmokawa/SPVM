package TestCase::Add {
  # Add
  sub add_int_max : int () {
    return (int)2147483646 + (int)1;
  }
  
  sub add_int_min : int () {
    return (int)-2147483648 + (int)1;
  }
  
  sub add_int_overflow : int () {
    return (int)2147483647 + (int)1;
  }

  sub add_long_max : long () {
    return (long)9223372036854775806L + (long)1;
  }
  
  sub add_long_min : long () {
    return (long)-9223372036854775808L + (long)1;
  }
  
  sub add_long_overflow : long () {
    return (long)9223372036854775807L + (long)1;
  }

  # Add
  sub add : int () {
    # int
    my $int_success = 0;
    {
      my $value1 : int = 1 + 2;
      my $value2 : int = (byte)1 + 3;
      my $value3 : int = 1 + (byte)4;
      my $value4 : int = (short)1 + 5;
      my $value5 : int = 1 + (short)6;
      my $value6 : int = (byte)1 + (byte)7;
      my $value7 : int = (short)1 + (short)8;
      my $value8 : int = (byte)1 + (short)9;
      if ($value1 == 3) {
        if ($value2 == 4) {
          if ($value3 == 5) {
            if ($value4 == 6) {
              if ($value5 == 7) {
                if ($value6 == 8) {
                  if ($value7 == 9) {
                    if ($value8 == 10) {
                      $int_success = 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ($int_success) {
      return 1;
    }
  }
}
