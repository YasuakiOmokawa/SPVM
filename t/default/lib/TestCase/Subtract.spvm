package TestCase::Subtract {
  # Subtract
  sub subtract : int () {
    my $value1 : int = 1 - 2;
    my $value2 : int = (byte)1 - 3;
    my $value3 : int = 1 - (byte)4;
    my $value4 : int = (short)1 - 5;
    my $value5 : int = 1 - (short)6;
    my $value6 : int = (byte)1 - (byte)7;
    my $value7 : int = (short)1 - (short)8;
    my $value8 : int = (byte)1 - (short)9;

    if ($value1 == -1) {
      if ($value2 == -2) {
        if ($value3 == -3) {
          if ($value4 == -4) {
            if ($value5 == -5) {
              if ($value6 == -6) {
                if ($value7 == -7) {
                  if ($value8 == -8) {
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }

    return 0;
  }

  # Subtract
  sub subtract_int_max : int () {
    return (int)2147483647 - (int)1;
  }
  
  sub subtract_int_min : int () {
    return (int)-2147483647 - (int)1;
  }
  
  sub subtract_int_underflow : int () {
    return (int)-2147483648 - (int)1;
  }

  sub subtract_long_max : long () {
    return (long)9223372036854775807L - (long)1;
  }
  
  sub subtract_long_min : long () {
    return (long)-9223372036854775807L - (long)1;
  }
  
  sub subtract_long_underflow : long () {
    return (long)-9223372036854775808L - (long)1;
  }
}
