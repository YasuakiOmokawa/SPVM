package TestCase::ValueTArray {
  use TestCase::Point_3b;
  use TestCase::Point_3s;
  use TestCase::Point_3i;
  use TestCase::Point_3l;
  use TestCase::Point_3f;
  use TestCase::Point_3d;

  sub array_byte : int () {
    my $nums1 = new TestCase::Point_3b[10];
    $nums1->[9]{x} = (byte)INT8_MIN();
    $nums1->[9]{y} = (byte)(INT8_MIN() + 1);
    $nums1->[9]{z} = (byte)(INT8_MIN() + 2);
    
    my $nums2 = new TestCase::Point_3b[10];
    $nums2->[3] = $nums1->[9];
    
    my $x = $nums2->[3]{x};
    my $y = $nums2->[3]{y};
    my $z = $nums2->[3]{z};
    
    if ($x == INT8_MIN() && $y == (INT8_MIN() + 1) && $z == (INT8_MIN() + 2)) {
      return 1;
    }
    
    return 0;
  }

  sub array_short : int () {
    
    my $nums1 = new TestCase::Point_3s[10];
    $nums1->[9]{x} = (short)INT16_MIN();
    $nums1->[9]{y} = (short)(INT16_MIN() + 1);
    $nums1->[9]{z} = (short)(INT16_MIN() + 2);
    
    my $nums2 = new TestCase::Point_3s[10];
    $nums2->[3] = $nums1->[9];
    
    my $x = $nums2->[3]{x};
    my $y = $nums2->[3]{y};
    my $z = $nums2->[3]{z};
    
    if ($x == INT16_MIN() && $y == (INT16_MIN() + 1) && $z == (INT16_MIN() + 2)) {
      return 1;
    }
    
    return 0;
  }

  sub array_int : int () {
    my $nums1 = new TestCase::Point_3i[10];
    $nums1->[9]{x} = INT32_MIN();
    $nums1->[9]{y} = INT32_MIN() + 1;
    $nums1->[9]{z} = INT32_MIN() + 2;
    
    my $nums2 = new TestCase::Point_3i[10];
    $nums2->[3] = $nums1->[9];
    
    my $x = $nums2->[3]{x};
    my $y = $nums2->[3]{y};
    my $z = $nums2->[3]{z};
    
    if ($x == INT32_MIN() && $y == (INT32_MIN() + 1) && $z == (INT32_MIN() + 2)) {
      return 1;
    }
    
    return 0;
  }

  sub array_long : int () {
    my $nums1 = new TestCase::Point_3l[10];
    $nums1->[9]{x} = INT64_MIN();
    $nums1->[9]{y} = INT64_MIN() + 1;
    $nums1->[9]{z} = INT64_MIN() + 2;
    
    my $nums2 = new TestCase::Point_3l[10];
    $nums2->[3] = $nums1->[9];

    my $x = $nums2->[3]{x};
    my $y = $nums2->[3]{y};
    my $z = $nums2->[3]{z};
    
    if ($x == INT64_MIN() && $y == (INT64_MIN() + 1) && $z == (INT64_MIN() + 2)) {
      return 1;
    }
    
    return 0;
  }

  sub array_float : int () {
    my $nums1 = new TestCase::Point_3f[10];
    $nums1->[9]{x} = FLT_MIN();
    $nums1->[9]{y} = FLT_MIN() + 0.25f;
    $nums1->[9]{z} = FLT_MIN() + 0.5f;
    
    my $nums2 = new TestCase::Point_3f[10];
    $nums2->[3] = $nums1->[9];

    my $x = $nums2->[3]{x};
    my $y = $nums2->[3]{y};
    my $z = $nums2->[3]{z};
    
    if ($x == FLT_MIN() && $y == (FLT_MIN() + 0.25) && $z == (FLT_MIN() + 0.5)) {
      return 1;
    }
    
    return 0;
  }
  
  sub array_double : int () {
    my $nums1 = new TestCase::Point_3d[10];
    $nums1->[9]{x} = DBL_MIN();
    $nums1->[9]{y} = DBL_MIN() + 0.25;
    $nums1->[9]{z} = DBL_MIN() + 0.5;
    
    my $nums2 = new TestCase::Point_3d[10];
    $nums2->[3] = $nums1->[9];

    my $x = $nums2->[3]{x};
    my $y = $nums2->[3]{y};
    my $z = $nums2->[3]{z};
    
    if ($x == DBL_MIN() && $y == (DBL_MIN() + 0.25) && $z == (DBL_MIN() + 0.5)) {
      return 1;
    }
    
    return 0;
  }
  
  sub array_field_byte : int () {
    my $nums = new TestCase::Point_3b[10];
    $nums->[9]{x} = (byte)INT8_MIN();
    $nums->[9]{y} = (byte)(INT8_MIN() + 1);
    $nums->[9]{z} = (byte)(INT8_MIN() + 2);
    
    my $x = $nums->[9]{x};
    my $y = $nums->[9]{y};
    my $z = $nums->[9]{z};
    
    if ($x == INT8_MIN() && $y == (INT8_MIN() + 1) && $z == (INT8_MIN() + 2)) {
      return 1;
    }
    
    return 0;
  }

  sub array_field_short : int () {
    
    my $nums = new TestCase::Point_3s[10];
    $nums->[9]{x} = (short)INT16_MIN();
    $nums->[9]{y} = (short)(INT16_MIN() + 1);
    $nums->[9]{z} = (short)(INT16_MIN() + 2);
    
    my $x = $nums->[9]{x};
    my $y = $nums->[9]{y};
    my $z = $nums->[9]{z};
    
    if ($x == INT16_MIN() && $y == (INT16_MIN() + 1) && $z == (INT16_MIN() + 2)) {
      return 1;
    }
    
    return 0;
  }
  
  sub array_field_int : int () {
    my $nums = new TestCase::Point_3i[10];
    $nums->[9]{x} = INT32_MIN();
    $nums->[9]{y} = INT32_MIN() + 1;
    $nums->[9]{z} = INT32_MIN() + 2;
    
    my $x = $nums->[9]{x};
    my $y = $nums->[9]{y};
    my $z = $nums->[9]{z};
    
    if ($x == INT32_MIN() && $y == (INT32_MIN() + 1) && $z == (INT32_MIN() + 2)) {
      return 1;
    }
    
    return 0;
  }

  sub array_field_long : int () {
    my $nums = new TestCase::Point_3l[10];
    $nums->[9]{x} = INT64_MIN();
    $nums->[9]{y} = INT64_MIN() + 1;
    $nums->[9]{z} = INT64_MIN() + 2;
    
    my $x = $nums->[9]{x};
    my $y = $nums->[9]{y};
    my $z = $nums->[9]{z};
    
    if ($x == INT64_MIN() && $y == (INT64_MIN() + 1) && $z == (INT64_MIN() + 2)) {
      return 1;
    }
    
    return 0;
  }

  sub array_field_float : int () {
    my $nums = new TestCase::Point_3f[10];
    $nums->[9]{x} = FLT_MIN();
    $nums->[9]{y} = FLT_MIN() + 0.25f;
    $nums->[9]{z} = FLT_MIN() + 0.5f;
    
    my $x = $nums->[9]{x};
    my $y = $nums->[9]{y};
    my $z = $nums->[9]{z};
    
    if ($x == FLT_MIN() && $y == (FLT_MIN() + 0.25) && $z == (FLT_MIN() + 0.5)) {
      return 1;
    }
    
    return 0;
  }
  
  sub array_field_double : int () {
    my $nums = new TestCase::Point_3d[10];
    $nums->[9]{x} = DBL_MIN();
    $nums->[9]{y} = DBL_MIN() + 0.25;
    $nums->[9]{z} = DBL_MIN() + 0.5;
    
    my $x = $nums->[9]{x};
    my $y = $nums->[9]{y};
    my $z = $nums->[9]{z};
    
    if ($x == DBL_MIN() && $y == (DBL_MIN() + 0.25) && $z == (DBL_MIN() + 0.5)) {
      return 1;
    }
    
    return 0;
  }

  sub move_byte : int () {
    my $nums1 = new TestCase::Point_3b[10];
    $nums1->[9]{x} = (byte)INT8_MIN();
    $nums1->[9]{y} = (byte)(INT8_MIN() + 1);
    $nums1->[9]{z} = (byte)(INT8_MIN() + 2);
    
    my $nums2 = $nums1;
    
    my $x = $nums2->[9]{x};
    my $y = $nums2->[9]{y};
    my $z = $nums2->[9]{z};
    
    if ($x == INT8_MIN() && $y == (INT8_MIN() + 1) && $z == (INT8_MIN() + 2)) {
      return 1;
    }
    
    return 0;
  }

  sub move_short : int () {
    
    my $nums1 = new TestCase::Point_3s[10];
    $nums1->[9]{x} = (short)INT16_MIN();
    $nums1->[9]{y} = (short)(INT16_MIN() + 1);
    $nums1->[9]{z} = (short)(INT16_MIN() + 2);
    
    my $nums2 = $nums1;
    
    my $x = $nums2->[9]{x};
    my $y = $nums2->[9]{y};
    my $z = $nums2->[9]{z};
    
    if ($x == INT16_MIN() && $y == (INT16_MIN() + 1) && $z == (INT16_MIN() + 2)) {
      return 1;
    }
    
    return 0;
  }

  sub move_int : int () {
    my $nums1 = new TestCase::Point_3i[10];
    $nums1->[9]{x} = INT32_MIN();
    $nums1->[9]{y} = INT32_MIN() + 1;
    $nums1->[9]{z} = INT32_MIN() + 2;
    
    my $nums2 = $nums1;
    
    my $x = $nums2->[9]{x};
    my $y = $nums2->[9]{y};
    my $z = $nums2->[9]{z};
    
    if ($x == INT32_MIN() && $y == (INT32_MIN() + 1) && $z == (INT32_MIN() + 2)) {
      return 1;
    }
    
    return 0;
  }

  sub move_long : int () {
    my $nums1 = new TestCase::Point_3l[10];
    $nums1->[9]{x} = INT64_MIN();
    $nums1->[9]{y} = INT64_MIN() + 1;
    $nums1->[9]{z} = INT64_MIN() + 2;
    
    my $nums2 = $nums1;

    my $x = $nums2->[9]{x};
    my $y = $nums2->[9]{y};
    my $z = $nums2->[9]{z};
    
    if ($x == INT64_MIN() && $y == (INT64_MIN() + 1) && $z == (INT64_MIN() + 2)) {
      return 1;
    }
    
    return 0;
  }

  sub move_float : int () {
    my $nums1 = new TestCase::Point_3f[10];
    $nums1->[9]{x} = FLT_MIN();
    $nums1->[9]{y} = FLT_MIN() + 0.25f;
    $nums1->[9]{z} = FLT_MIN() + 0.5f;
    
    my $nums2 = $nums1;

    my $x = $nums2->[9]{x};
    my $y = $nums2->[9]{y};
    my $z = $nums2->[9]{z};
    
    if ($x == FLT_MIN() && $y == (FLT_MIN() + 0.25) && $z == (FLT_MIN() + 0.5)) {
      return 1;
    }
    
    return 0;
  }
  
  sub move_double : int () {
    my $nums1 = new TestCase::Point_3d[10];
    $nums1->[9]{x} = DBL_MIN();
    $nums1->[9]{y} = DBL_MIN() + 0.25;
    $nums1->[9]{z} = DBL_MIN() + 0.5;
    
    my $nums2 = $nums1;

    my $x = $nums2->[9]{x};
    my $y = $nums2->[9]{y};
    my $z = $nums2->[9]{z};
    
    if ($x == DBL_MIN() && $y == (DBL_MIN() + 0.25) && $z == (DBL_MIN() + 0.5)) {
      return 1;
    }
    
    return 0;
  }

}
