package TestCase::Assign {
  use TestCase::Minimal;
  
  sub assign : int () {
    # Constant assignment
    my $success_constant_narrow = 0;
    {
      # narrowing constant byte
      my $value1 : byte = 127;
      my $value2 : byte = -128;
      my $value3 = $value1 + $value2;
      
      # narrowing constant short
      my $value4 : short = 32767;
      my $value5 : short = -32768;
      my $value6 = $value4 + $value5;

      # narrowing constant int
      my $value7 : int = 2147483647L;
      my $value8 : int = -2147483648L;
      my $value9 = $value7 + $value8;
      
      if ($value3 == -1) {
        if ($value6 == -1) {
          if ($value9 == -1) {
            $success_constant_narrow = 1;
          }
        }
      }
    }
    
    # Widning
    my $success_constant_wide = 0;
    {
      my $value1 : short = (byte)127;
      my $value2 : int = (byte)127;
      my $value3 : long = (byte)127;
      my $value4 : float = (byte)127;
      my $value5 : double = (byte)127;
      
      if ($value1 == 127) {
        if ($value2 == 127) {
          if ($value3 == 127) {
            if ($value4 == 127.0f) {
              if ($value5 = 127.0) {
                $success_constant_wide = 1;
              }
            }
          }
        }
      }
    }
    
    # Assign same name variable
    my $success_assign_same_name_variable = 0;
    {
      my $obj = new TestCase::Minimal;
      $obj = $obj;
      $success_assign_same_name_variable = 1;
    }
    
    if ($success_constant_narrow && $success_constant_wide && $success_assign_same_name_variable) {
      return 1;
    }
    
    return 0;
  }
  
  sub assign_numeric_to_string : int () {
    my $inum : string = 25;
    my $dnum : string = 0.25;
    
    my $inum_str : string = $inum;
    my $dnum_str : string = $dnum;
    
    if ($inum_str eq "25" && $dnum_str eq "0.25") {
      return 1;
    }
    
    return 0;
  }

  sub assign_byte_to_byte_object : int () {
    my $byte : byte = INT8_MIN();
    my $byte_obj : SPVM::Byte = $byte;
    
    if ($byte_obj isa SPVM::Byte) {
      if ($byte_obj->val == INT8_MIN()) {
        return 1;
      }
    }
    return 0;
  }

  sub assign_short_to_short_object : int () {
    my $short : short = INT16_MIN();
    my $short_obj : SPVM::Short = $short;
    
    if ($short_obj isa SPVM::Short) {
      if ($short_obj->val == INT16_MIN()) {
        return 1;
      }
    }
    return 0;
  }

  sub assign_int_to_int_object : int () {
    my $int : int = INT32_MIN();
    my $int_obj : SPVM::Int = $int;
    
    if ($int_obj isa SPVM::Int) {
      if ($int_obj->val == INT32_MIN()) {
        return 1;
      }
    }
    return 0;
  }

  sub assign_long_to_long_object : int () {
    my $long : long = INT64_MIN();
    my $long_obj : SPVM::Long = $long;
    
    if ($long_obj isa SPVM::Long) {
      if ($long_obj->val == INT64_MIN()) {
        return 1;
      }
    }
    return 0;
  }

  sub assign_float_to_float_object : int () {
    my $float : float = FLT_MIN();
    my $float_obj : SPVM::Float = $float;
    
    if ($float_obj isa SPVM::Float) {
      if ($float_obj->val == FLT_MIN()) {
        return 1;
      }
    }
    return 0;
  }

  sub assign_double_to_double_object : int () {
    my $double : double = DBL_MIN();
    my $double_obj : SPVM::Double = $double;
    
    if ($double_obj isa SPVM::Double) {
      if ($double_obj->val == DBL_MIN()) {
        return 1;
      }
    }
    return 0;
  }
}
