package TestCase::Lib::SPVM::ByteList {
  use SPVM::ByteList;

  sub newa : int () {
    {
      my $list = SPVM::ByteList->newa([(byte)3, 5, INT8_MAX()]);
      
      unless ($list->get(0) == 3) {
        return 0;
      }
      
      unless ($list->get(1) == 5) {
        return 0;
      }

      unless ($list->get(2) == INT8_MAX()) {
        return 0;
      }
      
      my $length = $list->length;
      unless ($length == 3) {
        return 0;
      }
    }
    
    return 1;
  }

  sub new_capacity : int () {
    {
      my $list = SPVM::ByteList->new_capacity(32);
      
      unless ($list->length == 0) {
        return 0;
      }
      
      unless ($list->capacity == 32) {
        return 0;
      }
    }
    
    return 1;
  }

  sub to_array : int () {
    {
      my $list = SPVM::ByteList->newa([(byte)3, 5, INT8_MAX()]);
      
      my $array = $list->to_array;
      
      unless ($array isa byte[]) {
        return 0;
      }
      
      unless ($array->[0] == 3) {
        return 0;
      }

      unless ($array->[1] == 5) {
        return 0;
      }

      unless ($array->[2] == INT8_MAX()) {
        return 0;
      }
      
      my $length = @$array;
      unless ($length == 3) {
        return 0;
      }
    }
    
    return 1;
  }

  sub get : int () {
    {
      my $list = SPVM::ByteList->newa([(byte)3, 5, INT8_MAX()]);
      
      unless ($list->get(0) == 3) {
        return 0;
      }

      unless ($list->get(0) isa byte) {
        return 0;
      }

      unless ($list->get(1) == 5) {
        return 0;
      }

      unless ($list->get(2) == INT8_MAX()) {
        return 0;
      }
      
      my $length = $list->length;
      unless ($length == 3) {
        return 0;
      }
      
      eval {
        $list->get(-1);
      };
      unless ($@) {
        return 0;
      }
      
      eval {
        $list->get(3);
      };
      unless ($@) {
        return 0;
      }
      
      $@ = undef;
    }
    
    return 1;
  }

  sub set : int () {
    {
      my $list = SPVM::ByteList->newa([(byte)0, 0, 0]);
      
      $list->set(0 => 3);
      $list->set(1 => 5);
      $list->set(2 => INT8_MAX());
      
      unless ($list->get(0) == 3) {
        return 0;
      }

      unless ($list->get(1) == 5) {
        return 0;
      }

      unless ($list->get(2) == INT8_MAX()) {
        return 0;
      }
      
      my $length = $list->length;
      unless ($length == 3) {
        return 0;
      }
      
      eval {
        $list->get(-1);
      };
      unless ($@) {
        return 0;
      }
      
      eval {
        $list->get(3);
      };
      unless ($@) {
        return 0;
      }
      
      $@ = undef;
    }
    
    return 1;
  }

  sub push : int () {
    # push
    {
      my $list = SPVM::ByteList->new;
      
      $list->push(3);
      $list->push(5);
      $list->push(INT8_MAX());
      
      my $length = $list->length;
      unless ($length == 3) {
        return 0;
      }
      
      unless ($list->get(0) == 3 && $list->get(1) == 5 && $list->get(2) == INT8_MAX()) {
        return 0;
      }
    }
    
    # internal _extend tests
    {
      my $list = SPVM::ByteList->new;
      
      for (my $i = 0; $i < 100; $i++) {
        $list->push(1);
      }
      
      my $length = $list->length;
      unless ($length == 100) {
        return 0;
      }
      
      for (my $i = 0; $i < 100; $i++) {
        unless ($list->get($i) == 1) {
          return 0;
        }
      }
    }
    
    
    return 1;
  }

  sub pop : int () {
    # pop
    {
      my $list = SPVM::ByteList->new;
      
      $list->push(3);
      $list->push(5);
      $list->push(INT8_MAX());
      
      my $pop0 = $list->pop;
      unless ($pop0 == INT8_MAX()) {
        return 0;
      }
      unless ($pop0 isa byte) {
        return 0;
      }

      unless ($list->pop == 5) {
        return 0;
      }

      unless ($list->pop == 3) {
        return 0;
      }
      
      my $length = $list->length;
      unless ($length == 0) {
        return 0;
      }
      
      eval {
        $list->pop;
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }

  sub unshift : int () {
    # unshift
    {
      my $list = SPVM::ByteList->new;
      
      $list->unshift(3);
      $list->unshift(5);
      $list->unshift(INT8_MAX());
      
      my $length = $list->length;
      unless ($length == 3) {
        return 0;
      }
      
      unless ($list->get(0) == INT8_MAX() && $list->get(1) == 5 && $list->get(2) == 3) {
        return 0;
      }
    }
    
    # internal _extend tests
    {
      my $list = SPVM::ByteList->new;
      
      for (my $i = 0; $i < 100; $i++) {
        $list->unshift(1);
      }
      
      my $length = $list->length;
      unless ($length == 100) {
        return 0;
      }
      
      for (my $i = 0; $i < 100; $i++) {
        unless ($list->get($i) == 1) {
          return 0;
        }
      }
    }
    
    return 1;
  }

  sub shift : int () {
    # shift
    {
      my $list = SPVM::ByteList->new;
      
      $list->unshift(3);
      $list->unshift(5);
      $list->unshift(INT8_MAX());
      
      unless ($list->shift == INT8_MAX()) {
        return 0;
      }

      unless ($list->shift == 5) {
        return 0;
      }

      unless ($list->shift == 3) {
        return 0;
      }
      
      my $length = $list->length;
      unless ($length == 0) {
        return 0;
      }
      
      eval {
        $list->shift;
      };
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }

  sub length : int () {
    # length
    {
      my $list = SPVM::ByteList->new;
      
      $list->unshift(3);
      $list->unshift(5);
      $list->unshift(INT8_MAX());
      
      my $length = $list->length;
      unless ($length == 3) {
        return 0;
      }
    }
    
    return 1;
  }

}
