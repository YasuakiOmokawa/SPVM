package TestCase::Lib::SPVM::Matrix {
  use SPVM::Matrix::Byte;
  use SPVM::Matrix::Short;
  use SPVM::Matrix::Int;
  use SPVM::Matrix::Long;
  use SPVM::Matrix::Float;
  use SPVM::Matrix::Double;
  use SPVM::Util (equals_barray, equals_sarray, equals_iarray, equals_larray, equals_farray, equals_darray);
  

  sub matrix_byte : byte () {
    # new and accessors
    my $mat = SPVM::Matrix::Byte->new([(byte)1, 2, 3, 4, 5, 6], 2, 3);
    my $row = $mat->row;
    unless ($row == 2) {
      return 0;
    }
    my $col = $mat->col;
    unless ($col == 3) {
      return 0;
    }
    my $values = $mat->values;
    unless ($values->[0] == 1) {
      return 0;
    }
    unless ($values->[5] == 6) {
      return 0;
    }
    unless (@$values == 6) {
      return 0;
    }
    unless ($values isa byte[]) {
      return 0;
    }
    
    # str
    my $mat_str = $mat->str;
    unless ($mat_str eq "1 3 5\n2 4 6\n") {
      return 0;
    }
    
    # transpose
    my $mat_trans = $mat->transpose;
    unless ($mat_trans != $mat) {
      return 0;
    }
    unless (equals_barray($mat_trans->values, [(byte)1, 3, 5, 2, 4, 6])) {
      return 0;
    }
    unless ($mat_trans->row == $col && $mat_trans->row == 3) {
      return 0;
    }
    unless ($mat_trans->col == $row && $mat_trans->col == 2) {
      return 0;
    }
    
    return 1;
  }

  sub matrix_short : short () {
    my $mat = SPVM::Matrix::Short->new([(short)1, 2, 3, 4, 5, 6], 2, 3);
    my $row = $mat->row;
    unless ($row == 2) {
      return 0;
    }
    my $col = $mat->col;
    unless ($col == 3) {
      return 0;
    }
    my $values = $mat->values;
    unless ($values->[0] == 1) {
      return 0;
    }
    unless ($values->[5] == 6) {
      return 0;
    }
    unless (@$values == 6) {
      return 0;
    }
    unless ($values isa short[]) {
      return 0;
    }
    
    my $mat_str = $mat->str;
    unless ($mat_str eq "1 3 5\n2 4 6\n") {
      return 0;
    }

    # transpose
    my $mat_trans = $mat->transpose;
    unless ($mat_trans != $mat) {
      return 0;
    }
    unless (equals_sarray($mat_trans->values, [(short)1, 3, 5, 2, 4, 6])) {
      return 0;
    }
    unless ($mat_trans->row == $col && $mat_trans->row == 3) {
      return 0;
    }
    unless ($mat_trans->col == $row && $mat_trans->col == 2) {
      return 0;
    }
    
    return 1;
  }

  sub matrix_int : int () {
    my $mat = SPVM::Matrix::Int->new([(int)1, 2, 3, 4, 5, 6], 2, 3);
    my $row = $mat->row;
    unless ($row == 2) {
      return 0;
    }
    my $col = $mat->col;
    unless ($col == 3) {
      return 0;
    }
    my $values = $mat->values;
    unless ($values->[0] == 1) {
      return 0;
    }
    unless ($values->[5] == 6) {
      return 0;
    }
    unless (@$values == 6) {
      return 0;
    }
    unless ($values isa int[]) {
      return 0;
    }
    
    my $mat_str = $mat->str;
    unless ($mat_str eq "1 3 5\n2 4 6\n") {
      return 0;
    }

    # transpose
    my $mat_trans = $mat->transpose;
    unless ($mat_trans != $mat) {
      return 0;
    }
    unless (equals_iarray($mat_trans->values, [(int)1, 3, 5, 2, 4, 6])) {
      return 0;
    }
    unless ($mat_trans->row == $col && $mat_trans->row == 3) {
      return 0;
    }
    unless ($mat_trans->col == $row && $mat_trans->col == 2) {
      return 0;
    }
    
    return 1;
  }

  sub matrix_long : long () {
    my $mat = SPVM::Matrix::Long->new([(long)1, 2, 3, 4, 5, 6], 2, 3);
    my $row = $mat->row;
    unless ($row == 2) {
      return 0;
    }
    my $col = $mat->col;
    unless ($col == 3) {
      return 0;
    }
    my $values = $mat->values;
    unless ($values->[0] == 1) {
      return 0;
    }
    unless ($values->[5] == 6) {
      return 0;
    }
    unless (@$values == 6) {
      return 0;
    }
    unless ($values isa long[]) {
      return 0;
    }
    
    my $mat_str = $mat->str;
    unless ($mat_str eq "1 3 5\n2 4 6\n") {
      return 0;
    }

    # transpose
    my $mat_trans = $mat->transpose;
    unless ($mat_trans != $mat) {
      return 0;
    }
    unless (equals_larray($mat_trans->values, [(long)1, 3, 5, 2, 4, 6])) {
      return 0;
    }
    unless ($mat_trans->row == $col && $mat_trans->row == 3) {
      return 0;
    }
    unless ($mat_trans->col == $row && $mat_trans->col == 2) {
      return 0;
    }
    
    return 1;
  }

  sub matrix_float : float () {
    my $mat = SPVM::Matrix::Float->new([(float)1, 2, 3, 4, 5, 6], 2, 3);
    my $row = $mat->row;
    unless ($row == 2) {
      return 0;
    }
    my $col = $mat->col;
    unless ($col == 3) {
      return 0;
    }
    my $values = $mat->values;
    unless ($values->[0] == 1) {
      return 0;
    }
    unless ($values->[5] == 6) {
      return 0;
    }
    unless (@$values == 6) {
      return 0;
    }
    unless ($values isa float[]) {
      return 0;
    }
    
    my $mat_str = $mat->str;
    unless ($mat_str eq "1 3 5\n2 4 6\n") {
      return 0;
    }
    
    # transpose
    my $mat_trans = $mat->transpose;
    unless ($mat_trans != $mat) {
      return 0;
    }
    unless (equals_farray($mat_trans->values, [(float)1, 3, 5, 2, 4, 6])) {
      return 0;
    }
    unless ($mat_trans->row == $col && $mat_trans->row == 3) {
      return 0;
    }
    unless ($mat_trans->col == $row && $mat_trans->col == 2) {
      return 0;
    }
    return 1;
  }

  sub matrix_double : double () {
    my $mat = SPVM::Matrix::Double->new([(double)1, 2, 3, 4, 5, 6], 2, 3);
    my $row = $mat->row;
    unless ($row == 2) {
      return 0;
    }
    my $col = $mat->col;
    unless ($col == 3) {
      return 0;
    }
    my $values = $mat->values;
    unless ($values->[0] == 1) {
      return 0;
    }
    unless ($values->[5] == 6) {
      return 0;
    }
    unless (@$values == 6) {
      return 0;
    }
    unless ($values isa double[]) {
      return 0;
    }
    
    my $mat_str = $mat->str;
    unless ($mat_str eq "1 3 5\n2 4 6\n") {
      return 0;
    }
    
    # transpose
    my $mat_trans = $mat->transpose;
    unless ($mat_trans != $mat) {
      return 0;
    }
    unless (equals_darray($mat_trans->values, [(double)1, 3, 5, 2, 4, 6])) {
      return 0;
    }
    unless ($mat_trans->row == $col && $mat_trans->row == 3) {
      return 0;
    }
    unless ($mat_trans->col == $row && $mat_trans->col == 2) {
      return 0;
    }
    return 1;
  }

  sub matrix_add_byte : byte () {
    my $mat1 = SPVM::Matrix::Byte->new([(byte)1, 2, 3, 4, 5, 6], 2, 3);
    my $mat2 = SPVM::Matrix::Byte->new([(byte)11, 12, 13, 14, 15, 16], 2, 3);
    my $mat3 = $mat1->add($mat2);
    
    unless ($mat3->values isa byte[]) {
      return 0;
    }
    
    if ($mat3 == $mat1) {
      return 0;
    }

    if ($mat3 == $mat2) {
      return 0;
    }
    
    unless ($mat3->row == 2 && $mat3->col == 3) {
      return 0;
    }
    
    unless (equals_barray($mat3->values, [(byte)12, 14, 16, 18, 20, 22])) {
      return 0;
    }
    
    return 1;
  }

  sub matrix_add_short : short () {
    my $mat1 = SPVM::Matrix::Short->new([(short)1, 2, 3, 4, 5, 6], 2, 3);
    my $mat2 = SPVM::Matrix::Short->new([(short)11, 12, 13, 14, 15, 16], 2, 3);
    my $mat3 = $mat1->add($mat2);
    
    unless ($mat3->values isa short[]) {
      return 0;
    }
    
    if ($mat3 == $mat1) {
      return 0;
    }

    if ($mat3 == $mat2) {
      return 0;
    }
    
    unless ($mat3->row == 2 && $mat3->col == 3) {
      return 0;
    }
    
    unless (equals_sarray($mat3->values, [(short)12, 14, 16, 18, 20, 22])) {
      return 0;
    }
    
    return 1;
  }

  sub matrix_add_int : int () {
    my $mat1 = SPVM::Matrix::Int->new([(int)1, 2, 3, 4, 5, 6], 2, 3);
    my $mat2 = SPVM::Matrix::Int->new([(int)11, 12, 13, 14, 15, 16], 2, 3);
    my $mat3 = $mat1->add($mat2);
    
    unless ($mat3->values isa int[]) {
      return 0;
    }
    
    if ($mat3 == $mat1) {
      return 0;
    }

    if ($mat3 == $mat2) {
      return 0;
    }
    
    unless ($mat3->row == 2 && $mat3->col == 3) {
      return 0;
    }
    
    unless (equals_iarray($mat3->values, [(int)12, 14, 16, 18, 20, 22])) {
      return 0;
    }
    
    return 1;
  }
  sub matrix_add_long : long () {
    my $mat1 = SPVM::Matrix::Long->new([(long)1, 2, 3, 4, 5, 6], 2, 3);
    my $mat2 = SPVM::Matrix::Long->new([(long)11, 12, 13, 14, 15, 16], 2, 3);
    my $mat3 = $mat1->add($mat2);
    
    unless ($mat3->values isa long[]) {
      return 0;
    }
    
    if ($mat3 == $mat1) {
      return 0;
    }

    if ($mat3 == $mat2) {
      return 0;
    }
    
    unless ($mat3->row == 2 && $mat3->col == 3) {
      return 0;
    }
    
    unless (equals_larray($mat3->values, [(long)12, 14, 16, 18, 20, 22])) {
      return 0;
    }
    
    return 1;
  }
  sub matrix_add_float : float () {
    my $mat1 = SPVM::Matrix::Float->new([(float)1, 2, 3, 4, 5, 6], 2, 3);
    my $mat2 = SPVM::Matrix::Float->new([(float)11, 12, 13, 14, 15, 16], 2, 3);
    my $mat3 = $mat1->add($mat2);
    
    unless ($mat3->values isa float[]) {
      return 0;
    }
    
    if ($mat3 == $mat1) {
      return 0;
    }

    if ($mat3 == $mat2) {
      return 0;
    }
    
    unless ($mat3->row == 2 && $mat3->col == 3) {
      return 0;
    }
    
    unless (equals_farray($mat3->values, [(float)12, 14, 16, 18, 20, 22])) {
      return 0;
    }
    
    return 1;
  }
  sub matrix_add_double : double () {
    my $mat1 = SPVM::Matrix::Double->new([(double)1, 2, 3, 4, 5, 6], 2, 3);
    my $mat2 = SPVM::Matrix::Double->new([(double)11, 12, 13, 14, 15, 16], 2, 3);
    my $mat3 = $mat1->add($mat2);
    
    unless ($mat3->values isa double[]) {
      return 0;
    }
    
    if ($mat3 == $mat1) {
      return 0;
    }

    if ($mat3 == $mat2) {
      return 0;
    }
    
    unless ($mat3->row == 2 && $mat3->col == 3) {
      return 0;
    }
    
    unless (equals_darray($mat3->values, [(double)12, 14, 16, 18, 20, 22])) {
      return 0;
    }
    
    return 1;
  }

  sub matrix_sub_byte : byte () {
    my $mat1 = SPVM::Matrix::Byte->new([(byte)1, 2, 3, 4, 5, 6], 2, 3);
    my $mat2 = SPVM::Matrix::Byte->new([(byte)16, 15, 14, 13, 12, 11], 2, 3);
    my $mat3 = $mat1->sub($mat2);
    
    unless ($mat3->values isa byte[]) {
      return 0;
    }
    
    if ($mat3 == $mat1) {
      return 0;
    }

    if ($mat3 == $mat2) {
      return 0;
    }
    
    unless ($mat3->row == 2 && $mat3->col == 3) {
      return 0;
    }
    
    unless (equals_barray($mat3->values, [(byte)-15, -13, -11, -9, -7, -5])) {
      return 0;
    }
    
    return 1;
  }

  sub matrix_sub_short : short () {
    my $mat1 = SPVM::Matrix::Short->new([(short)1, 2, 3, 4, 5, 6], 2, 3);
    my $mat2 = SPVM::Matrix::Short->new([(short)16, 15, 14, 13, 12, 11], 2, 3);
    my $mat3 = $mat1->sub($mat2);
    
    unless ($mat3->values isa short[]) {
      return 0;
    }
    
    if ($mat3 == $mat1) {
      return 0;
    }

    if ($mat3 == $mat2) {
      return 0;
    }
    
    unless ($mat3->row == 2 && $mat3->col == 3) {
      return 0;
    }
    
    unless (equals_sarray($mat3->values, [(short)-15, -13, -11, -9, -7, -5])) {
      return 0;
    }
    
    return 1;
  }

  sub matrix_sub_int : int () {
    my $mat1 = SPVM::Matrix::Int->new([(int)1, 2, 3, 4, 5, 6], 2, 3);
    my $mat2 = SPVM::Matrix::Int->new([(int)16, 15, 14, 13, 12, 11], 2, 3);
    my $mat3 = $mat1->sub($mat2);
    
    unless ($mat3->values isa int[]) {
      return 0;
    }
    
    if ($mat3 == $mat1) {
      return 0;
    }

    if ($mat3 == $mat2) {
      return 0;
    }
    
    unless ($mat3->row == 2 && $mat3->col == 3) {
      return 0;
    }
    
    unless (equals_iarray($mat3->values, [(int)-15, -13, -11, -9, -7, -5])) {
      return 0;
    }
    
    return 1;
  }
  sub matrix_sub_long : long () {
    my $mat1 = SPVM::Matrix::Long->new([(long)1, 2, 3, 4, 5, 6], 2, 3);
    my $mat2 = SPVM::Matrix::Long->new([(long)16, 15, 14, 13, 12, 11], 2, 3);
    my $mat3 = $mat1->sub($mat2);
    
    unless ($mat3->values isa long[]) {
      return 0;
    }
    
    if ($mat3 == $mat1) {
      return 0;
    }

    if ($mat3 == $mat2) {
      return 0;
    }
    
    unless ($mat3->row == 2 && $mat3->col == 3) {
      return 0;
    }
    
    unless (equals_larray($mat3->values, [(long)-15, -13, -11, -9, -7, -5])) {
      return 0;
    }
    
    return 1;
  }
  sub matrix_sub_float : float () {
    my $mat1 = SPVM::Matrix::Float->new([(float)1, 2, 3, 4, 5, 6], 2, 3);
    my $mat2 = SPVM::Matrix::Float->new([(float)16, 15, 14, 13, 12, 11], 2, 3);
    my $mat3 = $mat1->sub($mat2);
    
    unless ($mat3->values isa float[]) {
      return 0;
    }
    
    if ($mat3 == $mat1) {
      return 0;
    }

    if ($mat3 == $mat2) {
      return 0;
    }
    
    unless ($mat3->row == 2 && $mat3->col == 3) {
      return 0;
    }
    
    unless (equals_farray($mat3->values, [(float)-15, -13, -11, -9, -7, -5])) {
      return 0;
    }
    
    return 1;
  }
  sub matrix_sub_double : double () {
    my $mat1 = SPVM::Matrix::Double->new([(double)1, 2, 3, 4, 5, 6], 2, 3);
    my $mat2 = SPVM::Matrix::Double->new([(double)16, 15, 14, 13, 12, 11], 2, 3);
    my $mat3 = $mat1->sub($mat2);
    
    unless ($mat3->values isa double[]) {
      return 0;
    }
    
    if ($mat3 == $mat1) {
      return 0;
    }

    if ($mat3 == $mat2) {
      return 0;
    }
    
    unless ($mat3->row == 2 && $mat3->col == 3) {
      return 0;
    }
    
    unless (equals_darray($mat3->values, [(double)-15, -13, -11, -9, -7, -5])) {
      return 0;
    }
    
    return 1;
  }

}
