package TestCase::Lib::SPVM::Matrix {
  use SPVM::Matrix::Byte;
  use SPVM::Matrix::Short;
  use SPVM::Matrix::Int;
  use SPVM::Matrix::Long;
  use SPVM::Matrix::Float;
  use SPVM::Matrix::Double;
  

  sub matrix_byte : byte () {
    my $mat = SPVM::Matrix::Byte->new([(byte)1, 2, 3, 4, 5, 6], 2, 3);
    my $row = $mat->row;
    unless ($row == 2) {
      return 0;
    }
    my $col = $mat->col;
    unless ($col == 3) {
      return 0;
    }
    my $values = $mat->values;
    unless ($values->[0] == 1) {
      return 0;
    }
    unless ($values->[5] == 6) {
      return 0;
    }
    unless (@$values == 6) {
      return 0;
    }
    unless ($values isa byte[]) {
      return 0;
    }
    
    my $mat_str = $mat->str;
    unless ($mat_str eq "1 3 5\n2 4 6\n") {
      return 0;
    }
    
    return 1;
  }

  sub matrix_short : short () {
    my $mat = SPVM::Matrix::Short->new([(short)1, 2, 3, 4, 5, 6], 2, 3);
    my $row = $mat->row;
    unless ($row == 2) {
      return 0;
    }
    my $col = $mat->col;
    unless ($col == 3) {
      return 0;
    }
    my $values = $mat->values;
    unless ($values->[0] == 1) {
      return 0;
    }
    unless ($values->[5] == 6) {
      return 0;
    }
    unless (@$values == 6) {
      return 0;
    }
    unless ($values isa short[]) {
      return 0;
    }
    
    my $mat_str = $mat->str;
    unless ($mat_str eq "1 3 5\n2 4 6\n") {
      return 0;
    }
    
    return 1;
  }

  sub matrix_int : int () {
    my $mat = SPVM::Matrix::Int->new([(int)1, 2, 3, 4, 5, 6], 2, 3);
    my $row = $mat->row;
    unless ($row == 2) {
      return 0;
    }
    my $col = $mat->col;
    unless ($col == 3) {
      return 0;
    }
    my $values = $mat->values;
    unless ($values->[0] == 1) {
      return 0;
    }
    unless ($values->[5] == 6) {
      return 0;
    }
    unless (@$values == 6) {
      return 0;
    }
    unless ($values isa int[]) {
      return 0;
    }
    
    my $mat_str = $mat->str;
    unless ($mat_str eq "1 3 5\n2 4 6\n") {
      return 0;
    }
    
    return 1;
  }

  sub matrix_long : long () {
    my $mat = SPVM::Matrix::Long->new([(long)1, 2, 3, 4, 5, 6], 2, 3);
    my $row = $mat->row;
    unless ($row == 2) {
      return 0;
    }
    my $col = $mat->col;
    unless ($col == 3) {
      return 0;
    }
    my $values = $mat->values;
    unless ($values->[0] == 1) {
      return 0;
    }
    unless ($values->[5] == 6) {
      return 0;
    }
    unless (@$values == 6) {
      return 0;
    }
    unless ($values isa long[]) {
      return 0;
    }
    
    my $mat_str = $mat->str;
    unless ($mat_str eq "1 3 5\n2 4 6\n") {
      return 0;
    }
    
    return 1;
  }

  sub matrix_float : float () {
    my $mat = SPVM::Matrix::Float->new([(float)1, 2, 3, 4, 5, 6], 2, 3);
    my $row = $mat->row;
    unless ($row == 2) {
      return 0;
    }
    my $col = $mat->col;
    unless ($col == 3) {
      return 0;
    }
    my $values = $mat->values;
    unless ($values->[0] == 1) {
      return 0;
    }
    unless ($values->[5] == 6) {
      return 0;
    }
    unless (@$values == 6) {
      return 0;
    }
    unless ($values isa float[]) {
      return 0;
    }
    
    my $mat_str = $mat->str;
    unless ($mat_str eq "1 3 5\n2 4 6\n") {
      return 0;
    }
    
    return 1;
  }

  sub matrix_double : double () {
    my $mat = SPVM::Matrix::Double->new([(double)1, 2, 3, 4, 5, 6], 2, 3);
    my $row = $mat->row;
    unless ($row == 2) {
      return 0;
    }
    my $col = $mat->col;
    unless ($col == 3) {
      return 0;
    }
    my $values = $mat->values;
    unless ($values->[0] == 1) {
      return 0;
    }
    unless ($values->[5] == 6) {
      return 0;
    }
    unless (@$values == 6) {
      return 0;
    }
    unless ($values isa double[]) {
      return 0;
    }
    
    my $mat_str = $mat->str;
    unless ($mat_str eq "1 3 5\n2 4 6\n") {
      return 0;
    }
    
    return 1;
  }
}
