package TestCase::Ref {
  use TestCase::Point_b3;
  use TestCase::Point_s3;
  use TestCase::Point_i3;
  use TestCase::Point_l3;
  use TestCase::Point_f3;
  use TestCase::Point_d3;
  
  sub numeric_ref_deref_int : int () {
    my $num1 = 4;
    
    my $num1_ref = \$num1;
    
    my $num2 = $$num1_ref;
    
    $$num1_ref = 5;
    
    if ($num2 == 4 && $num1 == 5) {
      return 1;
    }
    
    return 0;
  }

  sub value_ref_deref_byte : int () {
    my $point1 : TestCase::Point_b3;
    
    $point1->{x} = INT8_MIN();
    $point1->{y} = 1;
    $point1->{z} = 2;
    
    my $point1_ref = \$point1;
    
    my $point2 = $$point1_ref;
    
    if ($point2->{x} == INT8_MIN() && $point2->{y} == 1 && $point2->{z} == 2) {
      return 1;
    }
    return 0;
  }

  sub value_ref_deref_get_field_byte : int () {
    my $point : TestCase::Point_b3;
    
    $point->{x} = INT8_MIN();
    $point->{y} = 1;
    $point->{z} = 2;
    
    my $point_ref = \$point;
    
    my $point_x = $point_ref->{x};
    my $point_y = $point_ref->{y};
    my $point_z = $point_ref->{z};
    
    if ($point_x == INT8_MIN() && $point_y == 1 && $point_z == 2) {
      return 1;
    }
    return 0;
  }
  
  sub value_ref_deref_set_field_byte : int () {
    my $point : TestCase::Point_b3;

    my $point_ref = \$point;
    
    $point->{x} = INT8_MIN();
    $point->{y} = 1;
    $point->{z} = 2;
    
    if ($point->{x} == INT8_MIN() && $point->{y} == 1 && $point->{z} == 2) {
      return 1;
    }
    return 0;
  }
  
  sub test_pass_value_ref_byte : int () {
    my $point_out : TestCase::Point_b3;
    
    my $point1 : TestCase::Point_b3;
    $point1->{x} = INT8_MIN();
    $point1->{y} = 1;
    $point1->{z} = 2;

    my $point2 : TestCase::Point_b3;
    $point2->{x} = 3;
    $point2->{y} = 4;
    $point2->{z} = 5;
    
    pass_value_ref_byte($point1, $point2, \$point_out);
    
    if ($point_out->{x} == INT8_MIN() + 3 && $point_out->{y} == 5 && $point_out->{z} == 7) {
      return 1;
    }
    return 0;
  }
  
  sub pass_value_ref_byte : void ($x_in1 : TestCase::Point_b3, $x_in2 : TestCase::Point_b3, $x_out : TestCase::Point_b3\) {
    $x_out->{x} = (byte)($x_in1->{x} + $x_in2->{x});
    $x_out->{y} = (byte)($x_in1->{y} + $x_in2->{y});
    $x_out->{z} = (byte)($x_in1->{z} + $x_in2->{z});
  }

  sub value_ref_deref_short : int () {
    my $point1 : TestCase::Point_s3;
    
    $point1->{x} = INT16_MIN();
    $point1->{y} = 1;
    $point1->{z} = 2;
    
    my $point1_ref = \$point1;
    
    my $point2 = $$point1_ref;
    
    if ($point2->{x} == INT16_MIN() && $point2->{y} == 1 && $point2->{z} == 2) {
      return 1;
    }
    return 0;
  }

  sub value_ref_deref_get_field_short : int () {
    my $point : TestCase::Point_s3;
    
    $point->{x} = INT16_MIN();
    $point->{y} = 1;
    $point->{z} = 2;
    
    my $point_ref = \$point;
    
    my $point_x = $point_ref->{x};
    my $point_y = $point_ref->{y};
    my $point_z = $point_ref->{z};
    
    if ($point_x == INT16_MIN() && $point_y == 1 && $point_z == 2) {
      return 1;
    }
    return 0;
  }
  
  sub value_ref_deref_set_field_short : int () {
    my $point : TestCase::Point_s3;

    my $point_ref = \$point;
    
    $point->{x} = INT16_MIN();
    $point->{y} = 1;
    $point->{z} = 2;
    
    if ($point->{x} == INT16_MIN() && $point->{y} == 1 && $point->{z} == 2) {
      return 1;
    }
    return 0;
  }
  
  sub test_pass_value_ref_short : int () {
    my $point_out : TestCase::Point_s3;
    
    my $point1 : TestCase::Point_s3;
    $point1->{x} = INT16_MIN();
    $point1->{y} = 1;
    $point1->{z} = 2;

    my $point2 : TestCase::Point_s3;
    $point2->{x} = 3;
    $point2->{y} = 4;
    $point2->{z} = 5;
    
    pass_value_ref_short($point1, $point2, \$point_out);
    
    if ($point_out->{x} == INT16_MIN() + 3 && $point_out->{y} == 5 && $point_out->{z} == 7) {
      return 1;
    }
    return 0;
  }
  
  sub pass_value_ref_short : void ($x_in1 : TestCase::Point_s3, $x_in2 : TestCase::Point_s3, $x_out : TestCase::Point_s3\) {
    $x_out->{x} = (short)($x_in1->{x} + $x_in2->{x});
    $x_out->{y} = (short)($x_in1->{y} + $x_in2->{y});
    $x_out->{z} = (short)($x_in1->{z} + $x_in2->{z});
  }

  sub value_ref_deref_double : int () {
    my $point1 : TestCase::Point_d3;
    
    $point1->{x} = DBL_MIN();
    $point1->{y} = 0.5;
    $point1->{z} = 0.125;
    
    my $point1_ref = \$point1;
    
    my $point2 = $$point1_ref;
    
    if ($point2->{x} == DBL_MIN() && $point2->{y} == 0.5 && $point2->{z} == 0.125) {
      return 1;
    }
    return 0;
  }

  sub value_ref_deref_int : int () {
    my $point1 : TestCase::Point_i3;
    
    $point1->{x} = INT32_MIN();
    $point1->{y} = 1;
    $point1->{z} = 2;
    
    my $point1_ref = \$point1;
    
    my $point2 = $$point1_ref;
    
    if ($point2->{x} == INT32_MIN() && $point2->{y} == 1 && $point2->{z} == 2) {
      return 1;
    }
    return 0;
  }

  sub value_ref_deref_get_field_int : int () {
    my $point : TestCase::Point_i3;
    
    $point->{x} = INT32_MIN();
    $point->{y} = 1;
    $point->{z} = 2;
    
    my $point_ref = \$point;
    
    my $point_x = $point_ref->{x};
    my $point_y = $point_ref->{y};
    my $point_z = $point_ref->{z};
    
    if ($point_x == INT32_MIN() && $point_y == 1 && $point_z == 2) {
      return 1;
    }
    return 0;
  }
  
  sub value_ref_deref_set_field_int : int () {
    my $point : TestCase::Point_i3;

    my $point_ref = \$point;
    
    $point->{x} = INT32_MIN();
    $point->{y} = 1;
    $point->{z} = 2;
    
    if ($point->{x} == INT32_MIN() && $point->{y} == 1 && $point->{z} == 2) {
      return 1;
    }
    return 0;
  }
  
  sub test_pass_value_ref_int : int () {
    my $point_out : TestCase::Point_i3;
    
    my $point1 : TestCase::Point_i3;
    $point1->{x} = INT32_MIN();
    $point1->{y} = 1;
    $point1->{z} = 2;

    my $point2 : TestCase::Point_i3;
    $point2->{x} = 3;
    $point2->{y} = 4;
    $point2->{z} = 5;
    
    pass_value_ref_int($point1, $point2, \$point_out);
    
    if ($point_out->{x} == INT32_MIN() + 3 && $point_out->{y} == 5 && $point_out->{z} == 7) {
      return 1;
    }
    return 0;
  }
  
  sub pass_value_ref_int : void ($x_in1 : TestCase::Point_i3, $x_in2 : TestCase::Point_i3, $x_out : TestCase::Point_i3\) {
    $x_out->{x} = (int)($x_in1->{x} + $x_in2->{x});
    $x_out->{y} = (int)($x_in1->{y} + $x_in2->{y});
    $x_out->{z} = (int)($x_in1->{z} + $x_in2->{z});
  }

  sub value_ref_deref_long : int () {
    my $point1 : TestCase::Point_l3;
    
    $point1->{x} = INT64_MIN();
    $point1->{y} = 1;
    $point1->{z} = 2;
    
    my $point1_ref = \$point1;
    
    my $point2 = $$point1_ref;
    
    if ($point2->{x} == INT64_MIN() && $point2->{y} == 1 && $point2->{z} == 2) {
      return 1;
    }
    return 0;
  }

  sub value_ref_deref_get_field_long : int () {
    my $point : TestCase::Point_l3;
    
    $point->{x} = INT64_MIN();
    $point->{y} = 1;
    $point->{z} = 2;
    
    my $point_ref = \$point;
    
    my $point_x = $point_ref->{x};
    my $point_y = $point_ref->{y};
    my $point_z = $point_ref->{z};
    
    if ($point_x == INT64_MIN() && $point_y == 1 && $point_z == 2) {
      return 1;
    }
    return 0;
  }
  
  sub value_ref_deref_set_field_long : int () {
    my $point : TestCase::Point_l3;

    my $point_ref = \$point;
    
    $point->{x} = INT64_MIN();
    $point->{y} = 1;
    $point->{z} = 2;
    
    if ($point->{x} == INT64_MIN() && $point->{y} == 1 && $point->{z} == 2) {
      return 1;
    }
    return 0;
  }
  
  sub test_pass_value_ref_long : int () {
    my $point_out : TestCase::Point_l3;
    
    my $point1 : TestCase::Point_l3;
    $point1->{x} = INT64_MIN();
    $point1->{y} = 1;
    $point1->{z} = 2;

    my $point2 : TestCase::Point_l3;
    $point2->{x} = 3;
    $point2->{y} = 4;
    $point2->{z} = 5;
    
    pass_value_ref_long($point1, $point2, \$point_out);
    
    if ($point_out->{x} == INT64_MIN() + 3 && $point_out->{y} == 5 && $point_out->{z} == 7) {
      return 1;
    }
    return 0;
  }
  
  sub pass_value_ref_long : void ($x_in1 : TestCase::Point_l3, $x_in2 : TestCase::Point_l3, $x_out : TestCase::Point_l3\) {
    $x_out->{x} = (long)($x_in1->{x} + $x_in2->{x});
    $x_out->{y} = (long)($x_in1->{y} + $x_in2->{y});
    $x_out->{z} = (long)($x_in1->{z} + $x_in2->{z});
  }

  sub value_ref_deref_float : int () {
    my $point1 : TestCase::Point_f3;
    
    $point1->{x} = FLT_MIN();
    $point1->{y} = 0.5;
    $point1->{z} = 0.125;
    
    my $point1_ref = \$point1;
    
    my $point2 = $$point1_ref;
    
    if ($point2->{x} == FLT_MIN() && $point2->{y} == 0.5 && $point2->{z} == 0.125) {
      return 1;
    }
    return 0;
  }

  sub value_ref_deref_get_field_float : int () {
    my $point : TestCase::Point_f3;
    
    $point->{x} = FLT_MIN();
    $point->{y} = 0.5;
    $point->{z} = 0.125;
    
    my $point_ref = \$point;
    
    my $point_x = $point_ref->{x};
    my $point_y = $point_ref->{y};
    my $point_z = $point_ref->{z};
    
    if ($point_x == FLT_MIN() && $point_y == 0.5 && $point_z == 0.125) {
      return 1;
    }
    return 0;
  }
  
  sub value_ref_deref_set_field_float : int () {
    my $point : TestCase::Point_f3;

    my $point_ref = \$point;
    
    $point_ref->{x} = FLT_MIN();
    $point_ref->{y} = 0.5;
    $point_ref->{z} = 0.125;
    
    if ($point->{x} == FLT_MIN() && $point->{y} == 0.5 && $point->{z} == 0.125) {
      return 1;
    }
    return 0;
  }
  
  sub test_pass_value_ref_float : int () {
    my $point_out : TestCase::Point_f3;
    
    my $point1 : TestCase::Point_f3;
    $point1->{x} = 0.25;
    $point1->{y} = 0.5;
    $point1->{z} = 0.125;

    my $point2 : TestCase::Point_f3;
    $point2->{x} = 0.25;
    $point2->{y} = 0.5;
    $point2->{z} = 0.125;
    
    pass_value_ref_float($point1, $point2, \$point_out);
    
    if ($point_out->{x} == 0.5 && $point_out->{y} == 1 && $point_out->{z} == 0.25) {
      return 1;
    }
    return 0;
  }
  
  sub pass_value_ref_float : void ($x_in1 : TestCase::Point_f3, $x_in2 : TestCase::Point_f3, $x_out : TestCase::Point_f3\) {
    $x_out->{x} = $x_in1->{x} + $x_in2->{x};
    $x_out->{y} = $x_in1->{y} + $x_in2->{y};
    $x_out->{z} = $x_in1->{z} + $x_in2->{z};
  }

  sub value_ref_deref_get_field_double : int () {
    my $point : TestCase::Point_d3;
    
    $point->{x} = DBL_MIN();
    $point->{y} = 0.5;
    $point->{z} = 0.125;
    
    my $point_ref = \$point;
    
    my $point_x = $point_ref->{x};
    my $point_y = $point_ref->{y};
    my $point_z = $point_ref->{z};
    
    if ($point_x == DBL_MIN() && $point_y == 0.5 && $point_z == 0.125) {
      return 1;
    }
    return 0;
  }
  
  sub value_ref_deref_set_field_double : int () {
    my $point : TestCase::Point_d3;

    my $point_ref = \$point;
    
    $point_ref->{x} = DBL_MIN();
    $point_ref->{y} = 0.5;
    $point_ref->{z} = 0.125;
    
    if ($point->{x} == DBL_MIN() && $point->{y} == 0.5 && $point->{z} == 0.125) {
      return 1;
    }
    return 0;
  }
  
  sub test_pass_value_ref_double : int () {
    my $point_out : TestCase::Point_d3;
    
    my $point1 : TestCase::Point_d3;
    $point1->{x} = 0.25;
    $point1->{y} = 0.5;
    $point1->{z} = 0.125;

    my $point2 : TestCase::Point_d3;
    $point2->{x} = 0.25;
    $point2->{y} = 0.5;
    $point2->{z} = 0.125;
    
    pass_value_ref_double($point1, $point2, \$point_out);
    
    if ($point_out->{x} == 0.5 && $point_out->{y} == 1 && $point_out->{z} == 0.25) {
      return 1;
    }
    return 0;
  }
  
  sub pass_value_ref_double : void ($x_in1 : TestCase::Point_d3, $x_in2 : TestCase::Point_d3, $x_out : TestCase::Point_d3\) {
    $x_out->{x} = $x_in1->{x} + $x_in2->{x};
    $x_out->{y} = $x_in1->{y} + $x_in2->{y};
    $x_out->{z} = $x_in1->{z} + $x_in2->{z};
  }
}
