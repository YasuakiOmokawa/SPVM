package TestCase::Complex {
  use SPVM::Complex_2f;
  use SPVM::Complex_2d;
  use SPVM::Util (complexf, complexd, INT8_MIN, INT8_MAX, INT16_MIN, INT16_MAX, INT32_MIN, INT32_MAX, INT64_MIN, INT64_MAX, FLT_MIN, FLT_MAX, DBL_MIN, DBL_MAX);

  sub test_cadd : int () {
    my $z_in1 = complexd(0.25, 0.5);
    my $z_in2 = complexd(0.5, 0.125);
    my $z_out = $z_in1 + $z_in2;
    
    if ($z_out->{re} == 0.75 && $z_out->{im} == 0.625) {
      return 1;
    }
    
    return 0;
  }
  sub test_cadd_min : int () {
    my $z_in1 = complexd(DBL_MIN(), DBL_MIN());
    my $z_in2 = complexd(0, 0);
    my $z_out = $z_in1 + $z_in2;
    
    if ($z_out->{re} == DBL_MIN() && $z_out->{im} == DBL_MIN()) {
      return 1;
    }
    
    return 0;
  }

  sub test_csub : int () {
    my $z_in1 = complexd(0.25, 0.5);
    my $z_in2 = complexd(0.5, 0.125);
    my $z_out = $z_in1 - $z_in2;
    
    if ($z_out->{re} == -0.25 && $z_out->{im} == 0.375) {
      return 1;
    }
    
    return 0;
  }
  sub test_csub_min : int () {
    my $z_in1 = complexd(DBL_MIN(), DBL_MIN());
    my $z_in2 = complexd(0, 0);
    my $z_out = $z_in1 - $z_in2;
    
    if ($z_out->{re} == DBL_MIN() && $z_out->{im} == DBL_MIN()) {
      return 1;
    }
    
    return 0;
  }

  sub test_cmul : int () {
    my $z_in1 = complexd(0.25, 0.5);
    my $z_in2 = complexd(0.5, 0.125);
    my $z_out = $z_in1 * $z_in2;
    
    if ($z_out->{re} == 0.0625 && $z_out->{im} == 0.28125) {
      return 1;
    }
    
    return 0;
  }
  sub test_cmul_min : int () {
    my $z_in1 = complexd(DBL_MIN(), 0);
    my $z_in2 = complexd(1, 1);
    my $z_out = $z_in1 * $z_in2;
    
    if ($z_out->{re} == DBL_MIN() && $z_out->{im} == DBL_MIN()) {
      return 1;
    }
    
    return 0;
  }

  sub test_cdiv : int () {
    my $z_in1 = complexd(0.25, 0.5);
    my $z_in2 = complexd(0.5, 0.125);
    my $z_out = $z_in1 / $z_in2;
    
    if (($z_out->{re} - 0.70588) < 0.00001 && ($z_out->{im} - 0.82352) < 0.00001) {
      return 1;
    }
    
    return 0;
  }
  
  sub test_cdiv_min : int () {
    my $z_in1 = complexd(DBL_MIN(), 0);
    my $z_in2 = complexd(1, 0);
    my $z_out = $z_in1 / $z_in2;
    
    if ($z_out->{re} == DBL_MIN() && $z_out->{im} == 0) {
      return 1;
    }
    
    return 0;
  }

  sub test_caddf : int () {
    my $z_in1 = complexf(0.25f, 0.5f);
    my $z_in2 = complexf(0.5f, 0.125f);
    my $z_out = $z_in1 + $z_in2;
    
    if ($z_out->{re} == 0.75 && $z_out->{im} == 0.625) {
      return 1;
    }
    
    return 0;
  }
  sub test_caddf_min : int () {
    my $z_in1 = complexf(FLT_MIN(), FLT_MIN());
    my $z_in2 = complexf(0, 0);
    my $z_out = $z_in1 + $z_in2;
    
    if ($z_out->{re} == FLT_MIN() && $z_out->{im} == FLT_MIN()) {
      return 1;
    }
    
    return 0;
  }

  sub test_csubf : int () {
    my $z_in1 = complexf(0.25f, 0.5f);
    my $z_in2 = complexf(0.5f, 0.125f);
    my $z_out = $z_in1 - $z_in2;
    
    if ($z_out->{re} == -0.25 && $z_out->{im} == 0.375) {
      return 1;
    }
    
    return 0;
  }
  sub test_csubf_min : int () {
    my $z_in1 = complexf(FLT_MIN(), FLT_MIN());
    my $z_in2 = complexf(0, 0);
    my $z_out = $z_in1 - $z_in2;
    
    if ($z_out->{re} == FLT_MIN() && $z_out->{im} == FLT_MIN()) {
      return 1;
    }
    
    return 0;
  }

  sub test_cmulf : int () {
    my $z_in1 = complexf(0.25f, 0.5f);
    my $z_in2 = complexf(0.5f, 0.125f);
    my $z_out = $z_in1 * $z_in2;
    
    if ($z_out->{re} == 0.0625 && $z_out->{im} == 0.28125) {
      return 1;
    }
    
    return 0;
  }
  sub test_cmulf_min : int () {
    my $z_in1 = complexf(FLT_MIN(), 0);
    my $z_in2 = complexf(1, 1);
    my $z_out = $z_in1 * $z_in2;
    
    if ($z_out->{re} == FLT_MIN() && $z_out->{im} == FLT_MIN()) {
      return 1;
    }
    
    return 0;
  }

  sub test_cdivf : int () {
    my $z_in1 = complexf(0.25f, 0.5f);
    my $z_in2 = complexf(0.5f, 0.125f);
    my $z_out = $z_in1 / $z_in2;
    
    if (($z_out->{re} - 0.70588) < 0.00001 && ($z_out->{im} - 0.82352) < 0.00001) {
      return 1;
    }
    
    return 0;
  }
  
  sub test_cdivf_min : int () {
    my $z_in1 = complexf(FLT_MIN(), 0);
    my $z_in2 = complexf(1, 0);
    my $z_out = $z_in1 / $z_in2;
    
    if ($z_out->{re} == FLT_MIN() && $z_out->{im} == 0) {
      return 1;
    }
    
    return 0;
  }
}
