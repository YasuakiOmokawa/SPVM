package TestCase::List {
  use SPVM::Int;
  use SPVM::List;

  sub check_fields : int ($list : SPVM::List, $objects : object[], $capacity : int, $offset : int, $length : int) {
    # check_fields fields
    unless ($list->_capacity == $capacity && $list->_offset == $offset && $list->length == $length) {
      warn("List fields mismatch.\n\t" .
          "got:      (capacity: " . $list->_capacity . ", offset: " . $list->_offset . ", length: " . $list->length . ")\n\t" .
          "expected: (capacity: " . $capacity . ", offset: " . $offset . ", length: " . $length . ")");
      return 0;
    }

    # check_fields values
    my $len_got = 0;
    if ($list->_values) {
      $len_got = @{$list->_values};
    }
    my $len_exp = 0;
    if ($objects) {
      $len_exp = @$objects;
    }
    unless ($len_got == $len_exp) {
      warn("List values length mismatch.\n\t" .
          "got:      " . $len_got . "\n\t" .
          "expected: " . $len_exp);
      return 0;
    }
    if ($len_exp) {
      for (my $i = 0; $i < @$objects; $i++) {
        unless ($list->_values->[$i] == $objects->[$i]) {
          warn("List content mismatch. at subscript " . $i);
          return 0;
        }
      }
    }
    
    return 1;
  }

  sub equals_array : int ($got : object [], $expected : object []) {
    if (@$got != @$expected) {
      warn("Array size mismatch. got: " . @$got . ", expected: " . @$expected);
      return 0;
    }
    for (my $i = 0; $i < @$expected; $i++) {
      if ($got->[$i] != $expected->[$i]) {
        warn("Array content mismatch. subscript " . $i);
        return 0;
      }
    }
    return 1;
  }

  # to verify test_splice if initial list's offset is not 0.
  sub make_different_offset_list : SPVM::List ($objects : object[], $unshift_count : int) {
    my $list = SPVM::List->new_with_capacity(@$objects);
    for (my $i = 0; $i < $unshift_count; $i++) {
      $list->unshift($objects->[$unshift_count - $i - 1]);
    }
    for (my $i = 0; $i < @$objects - $unshift_count; $i++) {
      $list->push($objects->[$unshift_count + $i]);
    }
    return $list;
  }

  sub test_ctor_default : int () {
    unless (check_fields(SPVM::List->new, new object[16], 16, 0, 0)) {
      return 0;
    }
    return 1;
  }

  sub test_ctor_with_capacity : int () {
    unless (check_fields(SPVM::List->new_with_capacity(20000), new object[20000], 20000, 0, 0)) {
      return 0;
    }
    eval {
      SPVM::List->new_with_capacity(0);
    }
    unless ($@) {
      return 0;
    }
    $@ = undef;
    eval {
      SPVM::List->new_with_capacity(-1);
    }
    unless ($@) {
      return 0;
    }
    $@ = undef;
    return 1;
  }

  sub test_ctor_with_array : int () {
    unless (check_fields(SPVM::List->new_with_array(new object[0]), new object[0], 0, 0, 0)) {
      return 0;
    }
    unless (check_fields(SPVM::List->new_with_array(new object[1]), new object[1], 1, 0, 1)) {
      return 0;
    }

    my $v1 = SPVM::Int->new(1);
    unless (check_fields(SPVM::List->new_with_array([(object) $v1]), [(object) $v1], 1, 0, 1)) {
      return 0;
    }

    my $v2 = SPVM::Int->new(2);
    my $vals = new object[4];
    $vals->[1] = $v1;
    $vals->[3] = $v2;
    unless (check_fields(SPVM::List->new_with_array($vals), $vals, 4, 0, 4)) {
      return 0;
    }

    return 1;
  }

  sub test_length : int () {
    if (SPVM::List->new->length != 0) {
      return 0;
    }
    if (SPVM::List->new_with_array([(object) 1])->length != 1) {
      return 0;
    }
    return 1;
  }

  sub test_push : int () {
    my $list = SPVM::List->new_with_capacity(1);

    my $v1 = SPVM::Int->new(1);
    $list->push($v1);
    unless (check_fields($list, [(object) $v1], 1, 0, 1)) {
      return 0;
    }

    my $v2 = SPVM::Int->new(2);
    $list->push($v2);
    unless (check_fields($list, [(object) $v1, $v2], 2, 0, 2)) {
      return 0;
    }

    my $v3 = SPVM::Int->new(3);
    $list->push($v3);
    unless (check_fields($list, [(object) $v1, $v2, $v3, undef], 4, 0, 3)) {
      return 0;
    }

    # no reallocation
    my $v4 = SPVM::Int->new(3);
    $list->push($v4);
    unless (check_fields($list, [(object) $v1, $v2, $v3, $v4], 4, 0, 4)) {
      return 0;
    }

    return 1;
  }

  sub test_pop : int () {
    my $list = SPVM::List->new_with_array([(object) SPVM::Int->new(1), undef, SPVM::Int->new(2)]);
    unless (((SPVM::Int)$list->pop)->val == 2) {
      return 0;
    }
    unless ($list->pop == undef) {
      return 0;
    }
    unless (((SPVM::Int)$list->pop)->val == 1) {
      return 0;
    }
    unless (check_fields($list, new object[3], 3, 0, 0)) {
      return 0;
    }
    unless ($list->pop == undef) { # empty list returns undef
      return 0;
    }
    return 1;
  }

  sub test_unshift : int () {
    my $list = SPVM::List->new_with_capacity(1);

    my $v1 = SPVM::Int->new(1);
    $list->unshift($v1);
    unless (check_fields($list, [(object) $v1], 1, 0, 1)) {
      return 0;
    }

    my $v2 = SPVM::Int->new(2);
    $list->unshift($v2);
    unless (check_fields($list, [(object) $v1, $v2], 2, 1, 2)) {
      return 0;
    }

    my $v3 = SPVM::Int->new(3);
    $list->unshift($v3);
    unless (check_fields($list, [(object) $v2, $v1, undef, $v3], 4, 3, 3)) {
      return 0;
    }

    my $v4 = SPVM::Int->new(4);
    $list->unshift($v4);
    unless (check_fields($list, [(object) $v2, $v1, $v4, $v3], 4, 2, 4)) {
      return 0;
    }

    my $v5 = SPVM::Int->new(5);
    $list->unshift($v5);
    unless (check_fields($list, [(object) $v4, $v3, $v2, $v1, undef, undef, undef, $v5], 8, 7, 5)) {
      return 0;
    }

    return 1;
  }

  sub test_shift : int () {
    my $list = SPVM::List->new_with_array([(object) SPVM::Int->new(1), undef, SPVM::Int->new(2)]);
    unless (((SPVM::Int)$list->shift)->val == 1) {
      return 0;
    }
    unless ($list->shift == undef) {
      return 0;
    }
    unless (((SPVM::Int)$list->shift)->val == 2) {
      return 0;
    }
    unless (check_fields($list, new object[3], 3, 0, 0)) {
      return 0;
    }
    unless ($list->shift == undef) { # empty list returns undef
      return 0;
    }
    return 1;
  }

  sub test_offset_by_alternate_push_and_shift : int () {
    my $list = SPVM::List->new_with_capacity(4);
    for (my $i = 0; $i < 16; $i++) {
      $list->push(1);
      $list->shift;
      unless (check_fields($list, new object[4], 4, ($i + 1) % 4, 0)) {
        return 0;
      }
    }
    return 1;
  }

  sub test_offset_by_alternate_unshift_and_pop : int () {
    my $list = SPVM::List->new_with_capacity(4);
    for (my $i = 0; $i < 16; $i++) {
      $list->unshift(1);
      $list->pop;
      unless (check_fields($list, new object[4], 4, (3 - $i + 16) % 4, 0)) {
        return 0;
      }
    }
    return 1;
  }

  sub test_set : int () {
    my $list = SPVM::List->new_with_array([(object) SPVM::Int->new(1), undef]);

    my $v1 = SPVM::Int->new(2);
    $list->set(0, undef);
    $list->set(1, $v1);
    my $expected = new object [2];
    $expected->[1] = $v1;
    unless (check_fields($list, $expected, 2, 0, 2)) {
      return 0;
    }

    return 1;
  }

  sub test_get : int () {
    my $list = SPVM::List->new_with_array([(object) SPVM::Int->new(1), undef]);
    unless (((SPVM::Int)$list->get(0))->val == 1) {
      return 0;
    }
    unless ($list->get(1) == undef) {
      return 0;
    }
    return 1;
  }

  sub test_splice : int () {
    my $v1 = SPVM::Int->new(1);
    my $v2 = SPVM::Int->new(2);
    my $v3 = SPVM::Int->new(3);
    my $v4 = SPVM::Int->new(4);
    my $v5 = SPVM::Int->new(5);
    my $vi1 = SPVM::Int->new(10);
    my $vi2 = SPVM::Int->new(11);
    my $replace = [(object) $vi1, $vi2];
    # extract left corner
    for (my $unshift_count = 0; $unshift_count < 2; $unshift_count++) {
      {
        my $list = make_different_offset_list([(object) $v1, $v2], $unshift_count);
        my $extracted = $list->splice(0, 1, undef);
        unless (equals_array($extracted, [(object) $v1])) {
          return 0;
        }
        unless (check_fields($list, [(object) $v2], 1, 0, 1)) {
          return 0;
        }
      }
      # extract right corner
      {
        my $list = make_different_offset_list([(object) $v1, $v2], $unshift_count);
        my $extracted = $list->splice(1, 1, undef);
        unless (equals_array($extracted, [(object) $v2])) {
          return 0;
        }
        unless (check_fields($list, [(object) $v1], 1, 0, 1)) {
          return 0;
        }
      }
      # extract inside
      {
        my $list = make_different_offset_list([(object) $v1, $v2, $v3, $v4, $v5], $unshift_count);
        my $extracted = $list->splice(1, 3, undef);
        unless (equals_array($extracted, [(object) $v2, $v3, $v4])) {
          return 0;
        }
        unless (check_fields($list, [(object) $v1, $v5], 2, 0, 2)) {
          return 0;
        }
      }
      # replace list at left corner
      {
        my $list = make_different_offset_list([(object) $v1, $v2], $unshift_count);
        my $extracted = $list->splice(0, 1, $replace);
        unless (equals_array($extracted, [(object) $v1])) {
          return 0;
        }
        unless (check_fields($list, [(object) $vi1, $vi2, $v2], 3, 0, 3)) {
          return 0;
        }
      }
      # replace list at right corner
      {
        my $list = make_different_offset_list([(object) $v1, $v2], $unshift_count);
        my $extracted = $list->splice(1, 1, $replace);
        unless (equals_array($extracted, [(object) $v2])) {
          return 0;
        }
        unless (check_fields($list, [(object) $v1, $vi1, $vi2], 3, 0, 3)) {
          return 0;
        }
      }
      # insert list back with cut_length = 0
      {
        my $list = make_different_offset_list([(object) $v1, $v2], $unshift_count);
        my $extracted = $list->splice(2, 0, $replace);
        unless (equals_array($extracted, new object[0])) {
          return 0;
        }
        unless (check_fields($list, [(object) $v1, $v2, $vi1, $vi2], 4, 0, 4)) {
          return 0;
        }
      }
      # insert list back with cut_length > 0
      {
        my $list = make_different_offset_list([(object) $v1, $v2], $unshift_count);
        my $extracted = $list->splice(2, 10, $replace);
        unless (equals_array($extracted, new object[0])) {
          return 0;
        }
        unless (check_fields($list, [(object) $v1, $v2, $vi1, $vi2], 4, 0, 4)) {
          return 0;
        }
      }
      # replace list at center
      {
        my $list = make_different_offset_list([(object) $v1, $v2, $v3, $v4, $v5], $unshift_count);
        my $extracted = $list->splice(1, 3, $replace);
        unless (equals_array($extracted, [(object) $v2, $v3, $v4])) {
          return 0;
        }
        unless (check_fields($list, [(object) $v1, $vi1, $vi2, $v5], 4, 0, 4)) {
          return 0;
        }
      }
    }
    return 1;
  }
}
