package UseAllTestCase {
  use UseAllTestCase;
  use TestCase;
  use TestCase::Switch;
  use TestCase::Destructor;
  use TestCase::UnaryPlus;
  use TestCase::PACKAGE;
  use TestCase::Seqop;
  use TestCase::Divide;
  use TestCase::Complex;
  use TestCase::For;
  use TestCase::LINERN;
  use TestCase::Minimal;
  use TestCase::Allow;
  use TestCase::Private;
  use TestCase::Extension;
  use TestCase::UnaryMinus;
  use TestCase::Return;
  use TestCase::Remainder;
  use TestCase::Interface;
  use TestCase::Empty;
  use TestCase::Begin;
  use TestCase::Var;
  use TestCase::Weaken;
  use TestCase::Pointer;
  use TestCase::Constant;
  use TestCase::Enum;
  use TestCase::Refcnt;
  use TestCase::ValueTArray;
  use TestCase::Isa;
  use TestCase::Simple;
  use TestCase::Comparator;
  use TestCase::Point_3d;
  use TestCase::String;
  use TestCase::BitOperator;
  use TestCase::NumericOperator;
  use TestCase::Multiply;
  use TestCase::Point_3l;
  use TestCase::PerlAPI;
  use TestCase::Increment;
  use TestCase::SpecialAssign;
  use TestCase::Assign;
  use TestCase::Array;
  use TestCase::FatCamma;
  use TestCase::Ref;
  use TestCase::Point_3s;
  use TestCase::Point_3i;
  use TestCase::LogicalOperator;
  use TestCase::LINER;
  use TestCase::Object;
  use TestCase::Subtract;
  use TestCase::ComparisonOperator;
  use TestCase::Precedence;
  use TestCase::JSON;
  use TestCase::Extension2;
  use TestCase::Point_3b;
  use TestCase::Unless;
  use TestCase::Add;
  use TestCase::BitNot;
  use TestCase::FILE;
  use TestCase::LINEN;
  use TestCase::Concat;
  use TestCase::Inline;
  use TestCase::Point_3f;
  use TestCase::Convert;
  use TestCase::Sub;
  use TestCase::If;
  use TestCase::Exception;
  use TestCase::Term;
  use TestCase::MyExe;
  use TestCase::While;
  use TestCase::Enum::Data1;
  use TestCase::Interface::ImplementInterface2;
  use TestCase::Interface::Interface;
  use TestCase::Interface::ImplementInterface1;
  use TestCase::JSON::Bool;
  use TestCase::Allow::PrivateData;
  use TestCase::Lib::SPVM::Hash;
  use TestCase::Lib::SPVM::Float;
  use TestCase::Lib::SPVM::Unicode;
  use TestCase::Lib::SPVM::Double;
  use TestCase::Lib::SPVM::Byte;
  use TestCase::Lib::SPVM::Long;
  use TestCase::Lib::SPVM::Int;
  use TestCase::Lib::SPVM::StringBuffer;
  use TestCase::Lib::SPVM::List;
  use TestCase::Lib::SPVM::Short;
  use TestCase::Lib::SPVM::FileHandle;
  use TestCase::Lib::SPVM::CORE;
  use TestCase::Data::Weaken;
  use TestCase::Comment::CR;
  use TestCase::Comment::CRLF;
  use TestCase::Comment::LF;
  use TestCase::Literal::Integer;
  use TestCase::Literal::Character;
  use TestCase::Literal::FloatingPoint;
  use TestCase::Literal::String;
  use TestCase::Literal::Undef;
}
