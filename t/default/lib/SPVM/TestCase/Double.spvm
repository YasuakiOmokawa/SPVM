use Double;
use Math;

package TestCase::Double {
  sub constant : int () {
    if (Double->MIN_EXPONENT() == -1022) {
      if (Double->MAX_EXPONENT() == 1023) {
        if (Double->BYTES() == 8) {
          if (Double->SIZE() == 64) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }
  
  sub double_to_raw_long_bits : int () {
    
    my $double_value = 0.5;
    
    my $long_bits = Double->double_to_raw_long_bits($double_value);
    
    if ($long_bits == 0x3FE0000000000000L) {
      return 1;
    }
    
    return 0;
  }
  
  sub double_to_raw_long_bits_nan : int () {
    
    my $double_value = 0.0 / 0.0;
    
    if (Double->is_nan($double_value)) {
      my $long_bits = Double->double_to_raw_long_bits($double_value);
      
      if ($long_bits != 0x7FF8000000000000L) {
        return 1;
      }
    }
    
    return 0;
  }

  sub double_to_long_bits : int () {
    
    my $double_value = 0.5;
    
    my $long_bits = Double->double_to_long_bits($double_value);
    
    if ($long_bits == 0x3FE0000000000000L) {
      return 1;
    }
    
    return 0;
  }
  
  sub double_to_long_bits_nan : int () {
    
    my $double_value = 0.0 / 0.0;
    
    if (Double->is_nan($double_value)) {
      my $long_bits = Double->double_to_long_bits($double_value);
      
      if ($long_bits == 0x7FF8000000000000L) {
        return 1;
      }
    }
    
    return 0;
  }
    
  sub long_bits_to_double : int () {
    
    my $long_bits = 0x3FE0000000000000L;
    
    my $double_value = Double->long_bits_to_double($long_bits);
    
    if ($double_value == 0.5) {
      return 1;
    }
    
    return 0;
  }
  
  sub long_bits_to_double_nan_first_condition : int () {
    
    if (Double->double_to_raw_long_bits(Double->long_bits_to_double(0x7FF0000000000000L)) == 0x7FF0000000000000L) {
      if (Double->double_to_raw_long_bits(Double->long_bits_to_double(0x7FF0000000000001L)) == 0x7FF8000000000000L) {
        if (Double->double_to_raw_long_bits(Double->long_bits_to_double(0x7FF0000000000002L)) == 0x7FF8000000000000L) {
          if (Double->double_to_raw_long_bits(Double->long_bits_to_double(0x7FFFFFFFFFFFFFFFL)) == 0x7FF8000000000000L) {
            if (Double->double_to_raw_long_bits(Double->long_bits_to_double(0x8000000000000000L)) == 0x8000000000000000L) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  sub long_bits_to_double_nan_first_condition_is_nan : int () {
    
    if (!Double->is_nan(Double->long_bits_to_double(0x7FF0000000000000L))) {
      if (Double->is_nan(Double->long_bits_to_double(0x7FF0000000000001L))) {
        if (Double->is_nan(Double->long_bits_to_double(0x7FF0000000000002L))) {
          if (Double->is_nan(Double->long_bits_to_double(0x7FFFFFFFFFFFFFFFL))) {
            if (!Double->is_nan(Double->long_bits_to_double(0x8000000000000000L))) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }
  
  sub long_bits_to_double_nan_second_condition : int () {
    
    if (Double->double_to_raw_long_bits(Double->long_bits_to_double(0xFFF0000000000000L)) == 0xFFF0000000000000L) {
      if (Double->double_to_raw_long_bits(Double->long_bits_to_double(0xFFF0000000000001L)) == 0x7FF8000000000000L) {
        if (Double->double_to_raw_long_bits(Double->long_bits_to_double(0xFFF0000000000002L)) == 0x7FF8000000000000L) {
          if (Double->double_to_raw_long_bits(Double->long_bits_to_double(0xFFFFFFFFFFFFFFFFL)) == 0x7FF8000000000000L) {
            if (Double->double_to_raw_long_bits(Double->long_bits_to_double(0x0000000000000000L)) == 0x0000000000000000L) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  sub long_bits_to_double_nan_second_condition_is_nan : int () {
    
    if (!Double->is_nan(Double->long_bits_to_double(0xFFF0000000000000L))) {
      if (Double->is_nan(Double->long_bits_to_double(0xFFF0000000000001L))) {
        if (Double->is_nan(Double->long_bits_to_double(0xFFF0000000000002L))) {
          if (Double->is_nan(Double->long_bits_to_double(0xFFFFFFFFFFFFFFFFL))) {
            if (!Double->is_nan(Double->long_bits_to_double(0x0000000000000000L))) {
              return 1;
            }
          }
        }
      }
    }
    
    return 0;
  }

  sub is_infinite : int () {
    if (Double->is_infinite(Double->POSITIVE_INFINITY())) {
      if (Double->is_infinite(Double->NEGATIVE_INFINITY())) {
        if (!Double->is_infinite(Double->NaN())) {
          if (!Double->is_infinite(0.1)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub is_finite : int () {
    if (!Double->is_finite(Double->POSITIVE_INFINITY())) {
      if (!Double->is_finite(Double->NEGATIVE_INFINITY())) {
        if (!Double->is_finite(Double->NaN())) {
          if (Double->is_finite(0.1)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub is_nan : int () {
    if (!Double->is_nan(Double->POSITIVE_INFINITY())) {
      if (!Double->is_nan(Double->NEGATIVE_INFINITY())) {
        if (Double->is_nan(Double->NaN())) {
          if (!Double->is_nan(0.1)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }
  
  sub pass_nan : int ($value : double) {
    if (Double->is_nan($value)) {
      if (Double->double_to_raw_long_bits($value) == 0x7FF8000000000000L) {
        return 1;
      }
    }
    
    return 0;
  }
  
  sub pass_positive_infinity : int ($value : double) {
    if ($value == Double->POSITIVE_INFINITY()) {
      return 1;
    }
    
    return 0;
  }

  sub pass_negative_infinity : int ($value : double) {
    if ($value == Double->NEGATIVE_INFINITY()) {
      return 1;
    }
    
    return 0;
  }
}
