package TestCase::Std::Number::Util {
  use Std::Number::Util;

  sub byte_constant : int () {
    if ((int)Std::Number::Util->BYTE_MIN_VALUE() == (int)(byte)-128) {
      if ((int)Std::Number::Util->BYTE_MAX_VALUE() == (int)(byte)127) {
        if (Std::Number::Util->BYTE_BYTES() == 1) {
          if (Std::Number::Util->BYTE_SIZE() == 8) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub short_constant : int () {
    if ((int)Std::Number::Util->SHORT_MIN_VALUE() == (int)(short)-32768) {
      if ((int)Std::Number::Util->SHORT_MAX_VALUE() == (int)(short)32767) {
        if (Std::Number::Util->SHORT_BYTES() == 2) {
          if (Std::Number::Util->SHORT_SIZE() == 16) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub int_constant : int () {
    if (Std::Number::Util->INT_MIN_VALUE() == -2147483648) {
      if (Std::Number::Util->INT_MAX_VALUE() == 2147483647) {
        if (Std::Number::Util->INT_BYTES() == 4) {
          if (Std::Number::Util->INT_SIZE() == 32) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub long_constant : int () {
    if (Std::Number::Util->LONG_MIN_VALUE() == -9223372036854775808L) {
      if (Std::Number::Util->LONG_MAX_VALUE() == 9223372036854775807L) {
        if (Std::Number::Util->LONG_BYTES() == 8) {
          if (Std::Number::Util->LONG_SIZE() == 64) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }


  # SPVM->Float
  sub float_constant: int () {
    if (Std::Number::Util->FLOAT_MIN_EXPONENT() == -126) {
      if (Std::Number::Util->FLOAT_MAX_EXPONENT() == 127) {
        if (Std::Number::Util->FLOAT_BYTES() == 4) {
          if (Std::Number::Util->FLOAT_SIZE() == 32) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub float_is_infinite: int () {
    if (Std::Number::Util->float_is_infinite(Std::Number::Util->FLOAT_POSITIVE_INFINITY())) {
      if (Std::Number::Util->float_is_infinite(Std::Number::Util->FLOAT_NEGATIVE_INFINITY())) {
        if (!Std::Number::Util->float_is_infinite(Std::Number::Util->FLOAT_NAN())) {
          if (!Std::Number::Util->float_is_infinite(0.1f)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub float_is_finite: int () {
    if (!Std::Number::Util->float_is_finite(Std::Number::Util->FLOAT_POSITIVE_INFINITY())) {
      if (!Std::Number::Util->float_is_finite(Std::Number::Util->FLOAT_NEGATIVE_INFINITY())) {
        if (!Std::Number::Util->float_is_finite(Std::Number::Util->FLOAT_NAN())) {
          if (Std::Number::Util->float_is_finite(0.1f)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub float_is_nan: int () {
    if (!Std::Number::Util->float_is_nan(Std::Number::Util->FLOAT_POSITIVE_INFINITY())) {
      if (!Std::Number::Util->float_is_nan(Std::Number::Util->FLOAT_NEGATIVE_INFINITY())) {
        if (Std::Number::Util->float_is_nan(Std::Number::Util->FLOAT_NAN())) {
          if (!Std::Number::Util->float_is_nan(0.1f)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }
  
  sub float_pass_positive_infinity : int ($value : float) {
    if ($value == Std::Number::Util->FLOAT_POSITIVE_INFINITY()) {
      return 1;
    }
    
    return 0;
  }
  
  sub float_pass_negative_infinity : int ($value : float) {
    if ($value == Std::Number::Util->FLOAT_NEGATIVE_INFINITY()) {
      return 1;
    }
    
    return 0;
  }
  
  sub float_pass_nan : int ($value : float) {
    if (Std::Number::Util->float_is_nan($value)) {
      return 1;
    }
    
    return 0;
  }

  sub double_constant : int () {
    if (Std::Number::Util->DOUBLE_MIN_EXPONENT() == -1022) {
      if (Std::Number::Util->DOUBLE_MAX_EXPONENT() == 1023) {
        if (Std::Number::Util->DOUBLE_BYTES() == 8) {
          if (Std::Number::Util->DOUBLE_SIZE() == 64) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }
  
  sub double_is_infinite : int () {
    if (Std::Number::Util->double_is_infinite(Std::Number::Util->DOUBLE_POSITIVE_INFINITY())) {
      if (Std::Number::Util->double_is_infinite(Std::Number::Util->DOUBLE_NEGATIVE_INFINITY())) {
        if (!Std::Number::Util->double_is_infinite(Std::Number::Util->DOUBLE_NAN())) {
          if (!Std::Number::Util->double_is_infinite(0.1)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub double_is_finite : int () {
    if (!Std::Number::Util->double_is_finite(Std::Number::Util->DOUBLE_POSITIVE_INFINITY())) {
      if (!Std::Number::Util->double_is_finite(Std::Number::Util->DOUBLE_NEGATIVE_INFINITY())) {
        if (!Std::Number::Util->double_is_finite(Std::Number::Util->DOUBLE_NAN())) {
          if (Std::Number::Util->double_is_finite(0.1)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }

  sub double_is_nan : int () {
    if (!Std::Number::Util->double_is_nan(Std::Number::Util->DOUBLE_POSITIVE_INFINITY())) {
      if (!Std::Number::Util->double_is_nan(Std::Number::Util->DOUBLE_NEGATIVE_INFINITY())) {
        if (Std::Number::Util->double_is_nan(Std::Number::Util->DOUBLE_NAN())) {
          if (!Std::Number::Util->double_is_nan(0.1)) {
            return 1;
          }
        }
      }
    }
    
    return 0;
  }
  
  sub double_pass_nan : int ($value : double) {
    if (Std::Number::Util->double_is_nan($value)) {
      return 1;
    }
    
    return 0;
  }
  
  sub double_pass_positive_infinity : int ($value : double) {
    if ($value == Std::Number::Util->DOUBLE_POSITIVE_INFINITY()) {
      return 1;
    }
    
    return 0;
  }

  sub double_pass_negative_infinity : int ($value : double) {
    if ($value == Std::Number::Util->DOUBLE_NEGATIVE_INFINITY()) {
      return 1;
    }
    
    return 0;
  }

}
