Binary file ./SPVM-0.0307.tar matches
Binary file ./spvm matches
./SPVM.c:  SPVM_CONSTANT_POOL_SUB* constant_pool_sub = (SPVM_CONSTANT_POOL_SUB*)&runtime->constant_pool[sub_id];
./SPVM.c:  SPVM_CONSTANT_POOL_TYPE* type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[type_id];
./SPVM.c:  SPVM_CONSTANT_POOL_TYPE* constant_pool_array_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[array_type_id];
./SPVM.c:  const char* array_type_name = (char*)&runtime->constant_pool[constant_pool_array_type->name_id + 1];
./SPVM.c:  SPVM_CONSTANT_POOL_TYPE* constant_pool_objet_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[object_type_id];
./SPVM.c:  const char* object_type_name = (char*)&runtime->constant_pool[constant_pool_objet_type->name_id + 1];
./SPVM.c:  SPVM_CONSTANT_POOL_TYPE* constant_pool_array_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[array_type_id];
./SPVM.c:  const char* array_type_name = (char*)&runtime->constant_pool[constant_pool_array_type->name_id + 1];
./SPVM.c:  SPVM_CONSTANT_POOL_TYPE* element_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[element_type_id];
./SPVM.c:        const char* element_type_name = (char*)&runtime->constant_pool[element_type_name_id + 1];
./SPVM.c:  SPVM_CONSTANT_POOL_SUB* constant_pool_sub = (SPVM_CONSTANT_POOL_SUB*)&runtime->constant_pool[sub_id];
./SPVM.c:  int32_t sub_name_length = runtime->constant_pool[sub_name_id];
./SPVM.c:  const char* sub_name = (char*)&runtime->constant_pool[sub_name_id + 1];
./SPVM.c:  int32_t subs_base = runtime->subs_base;
./SPVM.c:  int32_t subs_length = runtime->subs_length;
./SPVM.c:      int32_t sub_id = runtime->constant_pool[subs_base + sub_index];
./SPVM.c:      SPVM_CONSTANT_POOL_SUB* constant_pool_sub = (SPVM_CONSTANT_POOL_SUB*)&runtime->constant_pool[sub_id];
./SPVM.c:      int32_t sub_name_length = runtime->constant_pool[sub_name_id];
./SPVM.c:      const char* sub_name = (char*)&runtime->constant_pool[sub_name_id + 1];
./SPVM.c:  int32_t subs_base = runtime->subs_base;
./SPVM.c:  int32_t subs_length = runtime->subs_length;
./SPVM.c:      int32_t sub_id = runtime->constant_pool[subs_base + sub_index];
./SPVM.c:      SPVM_CONSTANT_POOL_SUB* constant_pool_sub = (SPVM_CONSTANT_POOL_SUB*)&runtime->constant_pool[sub_id];
./SPVM.c:        int32_t sub_name_length = runtime->constant_pool[sub_name_id];
./SPVM.c:        const char* sub_name = (char*)&runtime->constant_pool[sub_name_id + 1];
./SPVM.c:  SPVM_CONSTANT_POOL_SUB* constant_pool_sub = (SPVM_CONSTANT_POOL_SUB*)&runtime->constant_pool[sub_id];
./SPVM.c:  SPVM_API* api = runtime->api;
./SPVM.c:    runtime->jit_count = 10000;
./SPVM.c:    runtime->jit_count = jit_count;
./SPVM.c:  SPVM_CONSTANT_POOL_SUB* constant_pool_sub = (SPVM_CONSTANT_POOL_SUB*)&runtime->constant_pool[sub_id];
./SPVM.c:      int32_t arg_type_id = runtime->constant_pool[arg_type_ids_base + arg_index];
./SPVM.c:      SPVM_CONSTANT_POOL_TYPE* constant_pool_arg_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[arg_type_id];
./SPVM.c:                SPVM_CONSTANT_POOL_TYPE* constant_pool_base_object_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[base_object_type_id];
./SPVM.c:                  const char* base_object_type_name = (char*)&runtime->constant_pool[constant_pool_base_object_type->name_id + 1];
./SPVM.c:                  const char* arg_type_name = (char*)&runtime->constant_pool[constant_pool_arg_type->name_id + 1];
./SPVM.c:  SPVM_CONSTANT_POOL_TYPE* return_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[return_type_id];
./SPVM.c:              const char* return_type_name = (char*)&runtime->constant_pool[return_type_name_id + 1];
./spvm_runtime_api.c:  int32_t* constant_pool = runtime->constant_pool;
./spvm_runtime_api.c:  SPVM_RUNTIME_API_set_exception(runtime->api, NULL);
./spvm_runtime_api.c:  SPVM_RUNTIME_ALLOCATOR_free(runtime, runtime->allocator);
./spvm_runtime_api.c:  runtime->allocator = SPVM_RUNTIME_ALLOCATOR_new(runtime);
./spvm_runtime_api.c:  runtime->api = api;
./spvm_runtime_api.c:  runtime->sub_symtable = SPVM_HASH_new(0);
./spvm_runtime_api.c:  runtime->type_symtable = SPVM_HASH_new(0);
./spvm_runtime_api.c:  runtime->field_symtable = SPVM_HASH_new(0);
./spvm_runtime_api.c:  runtime->use_package_path_id_symtable = SPVM_HASH_new(0);
./spvm_runtime_api.c:  if (runtime->exception != NULL) {
./spvm_runtime_api.c:    SPVM_RUNTIME_API_dec_ref_count(api, (SPVM_OBJECT*)runtime->exception);
./spvm_runtime_api.c:  runtime->exception = exception;
./spvm_runtime_api.c:  if (runtime->exception != NULL) {
./spvm_runtime_api.c:    runtime->exception->ref_count++;
./spvm_runtime_api.c:  return runtime->exception;
./spvm_runtime_api.c:  SPVM_RUNTIME_ALLOCATOR* allocator = runtime->allocator;
./spvm_runtime_api.c:  SPVM_RUNTIME_ALLOCATOR* allocator = runtime->allocator;
./spvm_runtime_api.c:  SPVM_RUNTIME_ALLOCATOR* allocator = runtime->allocator;
./spvm_runtime_api.c:  int32_t* type_code_to_id = (int32_t*)&runtime->constant_pool[runtime->type_code_to_id_base];
./spvm_runtime_api.c:  SPVM_RUNTIME_ALLOCATOR* allocator = runtime->allocator;
./spvm_runtime_api.c:  int32_t* type_code_to_id = (int32_t*)&runtime->constant_pool[runtime->type_code_to_id_base];
./spvm_runtime_api.c:  SPVM_RUNTIME_ALLOCATOR* allocator = runtime->allocator;
./spvm_runtime_api.c:  int32_t* type_code_to_id = (int32_t*)&runtime->constant_pool[runtime->type_code_to_id_base];
./spvm_runtime_api.c:  SPVM_RUNTIME_ALLOCATOR* allocator = runtime->allocator;
./spvm_runtime_api.c:  int32_t* type_code_to_id = (int32_t*)&runtime->constant_pool[runtime->type_code_to_id_base];
./spvm_runtime_api.c:  SPVM_RUNTIME_ALLOCATOR* allocator = runtime->allocator;
./spvm_runtime_api.c:  int32_t* type_code_to_id = (int32_t*)&runtime->constant_pool[runtime->type_code_to_id_base];
./spvm_runtime_api.c:  SPVM_RUNTIME_ALLOCATOR* allocator = runtime->allocator;
./spvm_runtime_api.c:  int32_t* type_code_to_id = (int32_t*)&runtime->constant_pool[runtime->type_code_to_id_base];
./spvm_runtime_api.c:  SPVM_RUNTIME_ALLOCATOR* allocator = runtime->allocator;
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_TYPE* element_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[element_type_id];
./spvm_runtime_api.c:  SPVM_RUNTIME_ALLOCATOR* allocator = runtime->allocator;
./spvm_runtime_api.c:  int32_t* constant_pool = runtime->constant_pool;
./spvm_runtime_api.c:  int32_t* type_code_to_id = (int32_t*)&runtime->constant_pool[runtime->type_code_to_id_base];
./spvm_runtime_api.c:        SPVM_CONSTANT_POOL_TYPE* constant_pool_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[object->type_id];
./spvm_runtime_api.c:        SPVM_CONSTANT_POOL_PACKAGE* constant_pool_package = (SPVM_CONSTANT_POOL_PACKAGE*)&runtime->constant_pool[constant_pool_type->package_id];
./spvm_runtime_api.c:      int32_t* constant_pool = runtime->constant_pool;
./spvm_runtime_api.c:      SPVM_CONSTANT_POOL_TYPE* constant_pool_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[object->type_id];
./spvm_runtime_api.c:    SPVM_RUNTIME_ALLOCATOR_free_object(api, runtime->allocator, object);
./spvm_runtime_api.c:  int32_t* constant_pool = runtime->constant_pool;
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_TYPE* constant_pool_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[object->type_id];
./spvm_runtime_api.c:  SPVM_HASH* field_symtable = runtime->field_symtable;
./spvm_runtime_api.c:  SPVM_HASH* sub_symtable = runtime->sub_symtable;
./spvm_runtime_api.c:  SPVM_HASH* type_symtable = runtime->type_symtable;
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_FIELD* constant_pool_field = (SPVM_CONSTANT_POOL_FIELD*)&runtime->constant_pool[field_id];
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_TYPE* constant_pool_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[object->type_id];
./spvm_runtime_api.c:  int32_t* constant_pool = runtime->constant_pool;
./spvm_runtime_api.c:  SPVM_CONSTANT_POOL_TYPE* constant_pool_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[object->type_id];
./spvm_runtime_api.c:  int32_t* constant_pool = runtime->constant_pool;
./SPVM.xs:  SPVM_CONSTANT_POOL_SUB* constant_pool_sub = (SPVM_CONSTANT_POOL_SUB*)&runtime->constant_pool[sub_id];
./SPVM.xs:  SPVM_CONSTANT_POOL_TYPE* type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[type_id];
./SPVM.xs:  SPVM_CONSTANT_POOL_TYPE* constant_pool_array_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[array_type_id];
./SPVM.xs:  const char* array_type_name = (char*)&runtime->constant_pool[constant_pool_array_type->name_id + 1];
./SPVM.xs:  SPVM_CONSTANT_POOL_TYPE* constant_pool_objet_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[object_type_id];
./SPVM.xs:  const char* object_type_name = (char*)&runtime->constant_pool[constant_pool_objet_type->name_id + 1];
./SPVM.xs:  SPVM_CONSTANT_POOL_TYPE* constant_pool_array_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[array_type_id];
./SPVM.xs:  const char* array_type_name = (char*)&runtime->constant_pool[constant_pool_array_type->name_id + 1];
./SPVM.xs:  SPVM_CONSTANT_POOL_TYPE* element_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[element_type_id];
./SPVM.xs:        const char* element_type_name = (char*)&runtime->constant_pool[element_type_name_id + 1];
./SPVM.xs:  SPVM_CONSTANT_POOL_SUB* constant_pool_sub = (SPVM_CONSTANT_POOL_SUB*)&runtime->constant_pool[sub_id];
./SPVM.xs:  int32_t sub_name_length = runtime->constant_pool[sub_name_id];
./SPVM.xs:  const char* sub_name = (char*)&runtime->constant_pool[sub_name_id + 1];
./SPVM.xs:  int32_t subs_base = runtime->subs_base;
./SPVM.xs:  int32_t subs_length = runtime->subs_length;
./SPVM.xs:      int32_t sub_id = runtime->constant_pool[subs_base + sub_index];
./SPVM.xs:      SPVM_CONSTANT_POOL_SUB* constant_pool_sub = (SPVM_CONSTANT_POOL_SUB*)&runtime->constant_pool[sub_id];
./SPVM.xs:      int32_t sub_name_length = runtime->constant_pool[sub_name_id];
./SPVM.xs:      const char* sub_name = (char*)&runtime->constant_pool[sub_name_id + 1];
./SPVM.xs:  int32_t subs_base = runtime->subs_base;
./SPVM.xs:  int32_t subs_length = runtime->subs_length;
./SPVM.xs:      int32_t sub_id = runtime->constant_pool[subs_base + sub_index];
./SPVM.xs:      SPVM_CONSTANT_POOL_SUB* constant_pool_sub = (SPVM_CONSTANT_POOL_SUB*)&runtime->constant_pool[sub_id];
./SPVM.xs:        int32_t sub_name_length = runtime->constant_pool[sub_name_id];
./SPVM.xs:        const char* sub_name = (char*)&runtime->constant_pool[sub_name_id + 1];
./SPVM.xs:  SPVM_CONSTANT_POOL_SUB* constant_pool_sub = (SPVM_CONSTANT_POOL_SUB*)&runtime->constant_pool[sub_id];
./SPVM.xs:  SPVM_API* api = runtime->api;
./SPVM.xs:    runtime->jit_count = 10000;
./SPVM.xs:    runtime->jit_count = jit_count;
./SPVM.xs:  SPVM_CONSTANT_POOL_SUB* constant_pool_sub = (SPVM_CONSTANT_POOL_SUB*)&runtime->constant_pool[sub_id];
./SPVM.xs:      int32_t arg_type_id = runtime->constant_pool[arg_type_ids_base + arg_index];
./SPVM.xs:      SPVM_CONSTANT_POOL_TYPE* constant_pool_arg_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[arg_type_id];
./SPVM.xs:                SPVM_CONSTANT_POOL_TYPE* constant_pool_base_object_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[base_object_type_id];
./SPVM.xs:                  const char* base_object_type_name = (char*)&runtime->constant_pool[constant_pool_base_object_type->name_id + 1];
./SPVM.xs:                  const char* arg_type_name = (char*)&runtime->constant_pool[constant_pool_arg_type->name_id + 1];
./SPVM.xs:  SPVM_CONSTANT_POOL_TYPE* return_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[return_type_id];
./SPVM.xs:              const char* return_type_name = (char*)&runtime->constant_pool[return_type_name_id + 1];
Binary file ./blib/arch/auto/SPVM/SPVM.so matches
./spvm_runtime_allocator.c:  runtime->objects_count++;
./spvm_runtime_allocator.c:  fprintf(stderr, "MALLOC OBJECT COUNT %d\n", runtime->objects_count);
./spvm_runtime_allocator.c:        SPVM_CONSTANT_POOL_TYPE* constant_pool_type = (SPVM_CONSTANT_POOL_TYPE*)&runtime->constant_pool[object->type_id];
./spvm_runtime_allocator.c:        SPVM_CONSTANT_POOL_PACKAGE* constant_pool_package = (SPVM_CONSTANT_POOL_PACKAGE*)&runtime->constant_pool[constant_pool_type->package_id];
./spvm_runtime_allocator.c:    runtime->objects_count--;
./spvm_runtime_allocator.c:    assert(runtime->objects_count >= 0);
./spvm_runtime_allocator.c:    fprintf(stderr, "FREE OBJECT COUNT %d\n", runtime->objects_count);
Binary file ./.git/objects/pack/pack-70eb8ab2e4434b3c102aeaae970c93a49bcdf28a.pack matches
./.git/logs/HEAD:2b78210e7aa5f172fc305c0dc1c8511a31ee58bc 6fbec30aacb04e9e66b9c42f313daca26492337f Yuki Kimoto <kimoto.yuki@gmail.com> 1503644686 +0900	commit: remove runtime->subs_length
./.git/logs/HEAD:2100d86d5ba58e6df3d8aee6f501e36883c87750 fe6839a9211a69f303ee76663e26ac3432e32eaf Yuki Kimoto <kimoto.yuki@gmail.com> 1503972508 +0900	commit: remove runtime->call_stack, call_stack_base, operand_stack_top
./spvm_jitcode_builder.c:  int32_t* constant_pool = runtime->constant_pool;
./spvm_jitcode_builder.c:  SPVM_OPCODE* opcodes = runtime->opcodes;
Binary file ./solo/objs/spvm_runtime_allocator.o matches
./solo/spvm_main.c:  SPVM_API* api = runtime->api;
./solo/spvm_main.c:  runtime->jit_count = 0;
./solo/spvm_main.c:  if (runtime->exception) {
./solo/spvm_main.c:    void* message_object = runtime->exception;
./spvm_compiler.c:  SPVM_RUNTIME_API_set_runtime(runtime->api, runtime);
./spvm_compiler.c:  runtime->constant_pool = SPVM_UTIL_ALLOCATOR_safe_malloc_zero(runtime_constant_pool_byte_size);
./spvm_compiler.c:  memcpy(runtime->constant_pool, compiler->constant_pool->values, compiler->constant_pool->length * sizeof(int32_t));
./spvm_compiler.c:  runtime->opcodes = SPVM_UTIL_ALLOCATOR_safe_malloc(runtime_opcodes_byte_size);
./spvm_compiler.c:  memcpy(runtime->opcodes, compiler->opcode_array->values, compiler->opcode_array->length * sizeof(SPVM_OPCODE));
./spvm_compiler.c:  runtime->package_vars = package_vars;
./spvm_compiler.c:      SPVM_HASH_insert(runtime->sub_symtable, sub->abs_name, strlen(sub->abs_name), (void*)(intptr_t)sub->id);
./spvm_compiler.c:      SPVM_HASH_insert(runtime->type_symtable, type->name, strlen(type->name), (void*)(intptr_t)type->id);
./spvm_compiler.c:      SPVM_HASH_insert(runtime->package_symtable, package_name, strlen(package_name), (void*)(intptr_t)package->id);
./spvm_compiler.c:      SPVM_HASH_insert(runtime->field_symtable, package_name, strlen(package_name), field_name_symtable);
./spvm_compiler.c:      SPVM_HASH_insert(runtime->use_package_path_id_symtable, package_name, strlen(package_name), (void*)(intptr_t)package_path_id);
./spvm_compiler.c:  runtime->packages_length = op_packages->length;
./spvm_compiler.c:  runtime->packages_base = compiler->packages_base;
./spvm_compiler.c:  runtime->subs_base = compiler->subs_base;
./spvm_compiler.c:  runtime->subs_length = compiler->op_subs->length;
./spvm_compiler.c:  runtime->types_base = compiler->types_base;
./spvm_compiler.c:  runtime->type_code_to_id_base = compiler->type_code_to_id_base;
./spvm_compiler.c:  runtime->types_length = compiler->types->length;
Binary file ./spvm_runtime_allocator.o matches
./spvm_runtime.c:  int32_t* constant_pool = runtime->constant_pool;
./spvm_runtime.c:  if (!sub_is_jit && runtime->jit_count > 0 && constant_pool_sub->call_count >= runtime->jit_count) {
./spvm_runtime.c:    SPVM_RUNTIME_ALLOCATOR_free_object(api, runtime->allocator, call_stack_object);
./spvm_runtime.c:  SPVM_OPCODE* opcodes = runtime->opcodes;
./spvm_runtime.c:    SPVM_RUNTIME_ALLOCATOR_free_object(api, runtime->allocator, call_stack_object);
