package SPVM::String {
  has value      : byte[];
  has capacity    : ro int;
  has length      : ro int;
  has is_utf8     : ro int;
  
  sub _copy_value : byte[] ($self : self) {
    return copy_barray($self->{value});
  }
  
  sub _reallocate : void ($self : self, $new_capacity : int) {
    my $new_string = new byte [$new_capacity];
    for (my $i = 0; $i < $self->{length}; ++$i) {
      $new_string->[$i] = $self->{value}[$i];
    }
    $self->{capacity} = $new_capacity;
    $self->{value} = $new_string;
  }

  sub to_barray : byte[] ($self : self) {
    return sliceb($self->{value}, 0, $self->{length});
  }

  sub new : SPVM::String () {
    my $self = new SPVM::String;
    my $default_capacity = 16;
    $self->{capacity} = $default_capacity;
    $self->{value} = new byte [$default_capacity];
    return $self;
  }

  sub new_with_capacity : SPVM::String ($capacity : int) {
    my $self = new SPVM::String;
    unless ($capacity > 0) {
      croak "capacity must be positive";
    }
    $self->{capacity} = $capacity;
    $self->{value} = new byte [$capacity];
    return $self;
  }

  sub new_with_string : SPVM::String ($string : string) {
    my $self = new SPVM::String;
    $self->{capacity} = length($string);
    $self->{value} = (byte [])$string;
    $self->{length} = $self->{capacity};
    return $self;
  }

  sub substr : SPVM::String ($self : self, $offset : int, $length : int) {
    if ($offset >= $self->{length}) {
      croak("substr offset is greater or equal than string length");
      return SPVM::String->new;
    }
    
    my $string = $self->{value};
    
    my $new_capacity = $length;
    
    my $new_text = SPVM::String->new_with_capacity($new_capacity);
    
    for (my $i = 0; $i < $length; $i++) {
      $new_text->{value}[$i] = $self->{value}[$offset + $i];
    }
    $new_text->{length} = $length;
    
    return $new_text;
  }

  sub copy : SPVM::String ($self : self) {
    my $ret = SPVM::String->new;
    $ret->{value}      = $self->{value};
    $ret->{capacity}    = $self->{capacity};
    $ret->{length}      = $self->{length};
    $ret->{is_utf8} = $self->{is_utf8};
    return $ret;
  }

  # O($self->{length} + $text)
  sub prepend : void ($self : self, $text : SPVM::String) {
    my $rc = $self->{value};
    if (refcnt $rc > 2) {
      # copy-on-write
      my $new_string = new byte [$self->{length}];
      for (my $i = 0; $i < $self->{length}; ++$i) {
        $new_string->[$i] = $self->{value}[$i];
      }
      $self->{value} = $new_string;
    }
    
    # TODO: Think how to deal with capacity.
    my $capacity = $self->{capacity}; # capacity is not shrunk.
    if ($capacity < $self->{length} + $text->{length}) { # don't consider about x2 allocation.
      $capacity = $self->{length} + $text->{length};
    }
    my $new_string = new byte [$capacity];
    for (my $i = 0; $i < $text->{length}; ++$i) {
      $new_string->[$i] = $text->{value}->[$i];
    }
    for (my $i = 0; $i < $self->{length}; ++$i) {
      $new_string->[$text->{length} + $i] = $self->{value}[$i];
    }
    $self->{value} = $new_string;
    $self->{capacity} = $capacity;
    $self->{length} += $text->{length};
  }

  sub append : void ($self : self, $text : SPVM::String) {
    if ($self->{length} + $text->{length} > $self->{capacity}) {
      # O($new_capacity)
      my $new_capacity : int;
      if ($self->{length} + $text->{length} > $self->{capacity} * 2) {
        $new_capacity = $self->{length} + $text->{length};
      } else {
        $new_capacity = $self->{capacity} * 2;
      }
      $self->_reallocate($new_capacity);
      for (my $i = 0; $i < $text->{length}; ++$i) {
        $self->{value}[$self->{length} + $i] = $text->{value}->[$i];
      }
      $self->{length} += $text->{length};
    }
    else {
      # O($text)
      my $rc = $self->{value};
      if (refcnt $rc > 2) {
        # copy-on-write
        my $new_string = new byte [$self->{length}];
        for (my $i = 0; $i < $self->{length}; ++$i) {
          $new_string->[$i] = $self->{value}[$i];
        }
        $self->{value} = $new_string;
      }
      
      for (my $i = 0; $i < $text->{length}; ++$i) {
        $self->{value}[$self->{length} + $i] = $text->{value}->[$i];
      }
      $self->{length} += $text->{length};
    }
  }

  # O($self->{capacity})
  sub replace : void ($self : self, $offset : int, $length : int, $replace : string) {
    if ($offset > $self->{length}) {
      warn("replace offset past end of string");
      $offset = $self->{length};
      $length = 0;
    }

    if ($length > $self->{length} - $offset) {
      $length = $self->{length} - $offset;
    }

    my $replace_length = 0;
    if ($replace) {
      $replace_length = length($replace);
    }

    my $rc = $self->{value};
    if (refcnt $rc > 2) {
      # copy-on-write
      my $new_string = new byte [$self->{length}];
      for (my $i = 0; $i < $self->{length}; ++$i) {
        $new_string->[$i] = $self->{value}[$i];
      }
      $self->{value} = $new_string;
    }

    if ($self->{length} - $length + $replace_length > $self->{capacity}) {
      # O($new_string_length)
      $self->_reallocate($self->{length} - $length + $replace_length);
    }

    my $last_sequence_length = $self->{length} - $offset - $length;
    if ($length > $replace_length) {
      # move last sequence to forward
      for (my $i = 0; $i < $last_sequence_length; ++$i) {
        my $origin = $offset + $length + $i;
        my $target = $offset + $replace_length + $i;
        $self->{value}[$target] = $self->{value}[$origin];
      }
    }
    else {
      # move last sequence to backward
      for (my $i = 0; $i < $last_sequence_length; ++$i) {
        my $origin = $self->{length} - 1 - $i;
        my $target = $offset + $replace_length + $last_sequence_length - 1 - $i;
        $self->{value}[$target] = $self->{value}[$origin];
      }
    }

    # replace with new array
    for (my $i = 0; $i < $replace_length; ++$i) {
      my $target = $offset + $i;
      $self->{value}[$target] = $replace->[$i];
    }

    $self->{length} += $replace_length - $length;
  }

  sub equals : int ($self : self, $text : SPVM::String) {
    unless ($self->{length} == $text->{length}) {
      return 0;
    }
    for (my $i = 0; $i < $self->{length}; ++$i) {
      unless ($self->{value}[$i] == $text->{value}->[$i]) {
        return 0;
      }
    }
    return 1;
  }
}
