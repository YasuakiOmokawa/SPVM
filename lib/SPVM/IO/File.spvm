package SPVM::IO::File {
  use SPVM::IO::FileHandle;
  use SPVM::Util (sliceb);
  
  allow SPVM::IO::Stdout;
  
  our $SEEK_SET : ro int;
  our $SEEK_CUR : ro int;
  our $SEEK_END : ro int;
  our $STDIN : ro int;
  our $STDOUT : ro int;
  our $STDERR : ro int;
  
  BEGIN {
    init_package_vars();
  }
  
  private native sub init_package_vars : void ();
  
  has fh : ro SPVM::IO::FileHandle;
  native sub open : SPVM::IO::File ($file_name : string, $mode : string);
  native sub close : int ($self : self);
  sub slurp : string ($self : self, $file : string) {
    
    my $buffer_length = 4096;
    my $buffer = new byte[$buffer_length];
    my $string = "";
    while (1) {
      my $read_length = $self->read($buffer);
      
      if ($read_length < $buffer_length) {
        $string .= sliceb((byte[])$buffer, 0, $read_length);
        last;
      }
      else {
        $string .= $buffer;
      }
    }
    return $string;
  }
  native sub seek : int ($self : self, $offset : long, $whence : int);
  
  # need also SPVM::IO::Stdout, SPVM::IO::Stderr
  native sub putc : int ($self : self, $c : byte);
  native sub write : int ($self : self, $buffer : string, $legnth : int);
  native sub print : int ($self : self, $string : string);
  
  # need also SPVM::IO::Stdin
  native sub read : int ($self : self, $buf : byte[]);
  native sub readline : string ($self : self);
  
  # Need also SPVM::IO::Stdio, SPVM::IO::Stderr, SPVM::IO::Stdin
  native sub set_binmode : void ($self : self, $binmode : int);
  native sub fileno : int ($self : self);
}
