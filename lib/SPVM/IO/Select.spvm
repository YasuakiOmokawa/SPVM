package SPVM::IO::Select {

  has handles : SPVM::List;
  
  sub new : SPVM::IO::Select () {
    my $select = new SPVM::IO::Select;
    
    $self->{handles} = list([]);
    
    return ;
  }
  
  sub add : void ($self : self, $new_handle : int) {
    
    my $found = 0;
    my $handles = $self->{handles};
    
    for (my $i = 0; $i < @$handles; $i++) {
      my $handle = $handles->[$i];
      
      if ((int)$handle == $new_handle) {
        $found = 1;
        last;
      }
    }
    
    unless ($found) {
      $self->handles->push($new_handle);
    }
  }
  
  sub remove : void ($self : self, $remove_handle : int) {
    
    my $new_handles = list([]);
    my $handles = $self->{handles};
    
    for (my $i = 0; $i < @$handles; $i++) {
      my $handle = $handles->[$i];
      
      if ((int)$handle != $remove_handle) {
        $new_handles->push($handle);
      }
    }
    
    $self->{handles} = $new_handles;
  }
  
  sub exists : int ($self : self, $check_handle : int) {
    
    my $handles = $self->{handles};
    
    for (my $i = 0; $i < @$handles; $i++) {
      my $handle = $handles->[$i];
      
      if ((int)$handle == $check_handle) {
        return 1;
      }
    }
    
    return 0;
  }
  
  sub handles : int[] ($self : self) {
    
    my $new_handles = list([]);
    my $handles = $self->{handles};
    
    for (my $i = 0; $i < @$handles; $i++) {
      $new_handles->push($handles->[$i]);
    }
    
    return $new_handles;
  }
  
  sub can_read : int[] ($self :self, $timeout : double) {
    my $handles = $self->{handles};
    
    return _can_read($self, $handles->to_iarray, $timeout);
  }
  
  native private sub _can_read : int[] ($self :self, $timeout : double);

  sub can_write : int[] ($self :self, $timeout : double) {
    my $handles = $self->{handles};
    
    return _can_write($self, $handles->to_iarray, $timeout);
  }
  
  native private sub _can_write : int[] ($self :self, $timeout : double);

  sub has_exception : int[] ($self :self, $timeout : double) {
    my $handles = $self->{handles};
    
    return _has_exception($self, $handles->to_iarray, $timeout);
  }
  
  native private sub _has_exception : int[] ($self :self, $timeout : double);
}
