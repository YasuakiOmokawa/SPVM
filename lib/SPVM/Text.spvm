package SPVM::Text {
  has string      : private byte [];
  has capacity    : private int;
  has offset      : private int;
  has length      : private int;
  has decode_type : private int;

  enum {
    DECODE_BYTE,
    DECODE_UTF8,
  }

  sub _reallocate_with_capacity : void ($self : self, $new_capacity : int) {
    my $new_string = new byte [$new_capacity];
    for (my $i = 0; $i < $self->{length}; ++$i) {
      $new_string->[$i] = $self->{string}[$self->{offset} + $i];
    }
    $self->{offset} = 0;
    $self->{capacity} = $new_capacity;
    $self->{string} = $new_string;
  }

  sub _reallocate : void ($self : self) {
    my $new_capacity : int;
    if ($self->{capacity} > INT32_MAX() / 2) {
      $new_capacity = INT32_MAX();
    }
    else {
      $new_capacity = $self->{capacity} * 2;
    }
    unless ($new_capacity) {
      $new_capacity = 1;
    }
    $self->_reallocate_with_capacity($new_capacity);
  }

  sub to_string : string ($self : self) {
    return (string)sliceb($self->{string}, $self->{offset}, $self->{length});
  }

  sub _capacity : int ($self : self) {
    return $self->{capacity};
  }

  sub _offset : int ($self : self) {
    return $self->{offset};
  }

  sub _string : byte[] ($self : self) {
    return $self->{string};
  }

  sub new : SPVM::Text () {
    my $self = new SPVM::Text;
    my $default_capacity = 16;
    $self->{capacity} = $default_capacity;
    $self->{string} = new byte [$default_capacity];
    return $self;
  }

  sub new_with_capacity : SPVM::Text ($capacity : int) {
    my $self = new SPVM::Text;
    unless ($capacity > 0) {
      croak "capacity must be positive";
    }
    $self->{capacity} = $capacity;
    $self->{string} = new byte [$capacity];
    return $self;
  }

  sub new_with_string : SPVM::Text ($string : string) {
    my $self = new SPVM::Text;
    $self->{capacity} = length($string);
    $self->{string} = (byte [])$string;
    $self->{length} = $self->{capacity};
    return $self;
  }

  sub length : int ($self : self) {
    return $self->{length};
  }

  sub substr : SPVM::Text ($self : self, $offset : int, $length : int) {
    if ($offset >= $self->{length}) {
      warn("substr offset is greater or equal than string length");
      return SPVM::Text->new;
    }
    my $ret = $self->copy;
    $ret->{offset} = $offset;
    if ($offset > $self->{length} - $length) {
      $self->{length} = $self->{length} - $offset;
    }
    return $ret;
  }

  sub copy : SPVM::Text ($self : self) {
    my $ret = SPVM::Text->new;
    $ret->{string}      = $self->{string};
    $ret->{capacity}    = $self->{capacity};
    $ret->{offset}      = $self->{offset};
    $ret->{length}      = $self->{length};
    $ret->{decode_type} = $self->{decode_type};
    return $ret;
  }

  # range of $offset: [0, $length]
  # O($self->{capacity})
  sub replace : void ($self : self, $offset : int, $length : int, $replace : string) {
    if ($offset > $self->{length}) {
      warn("replace offset past end of string");
      $offset = $self->{length};
      $length = 0;
    }

    if ($offset > $self->{length} - $length) {
      $length = $self->{length} - $offset;
    }

    my $replace_length = 0;
    if ($replace) {
      $replace_length = length($replace);
    }

    if ($self->{length} - $length + $replace_length > $self->{capacity}) {
      # O($new_string_length)
      $self->_reallocate_with_capacity($self->{length} - $length + $replace_length);
    }

    my $last_sequence_length = $self->{length} - $offset - $length;
    if ($length > $replace_length) {
      # move last sequence to forward
      for (my $i = 0; $i < $last_sequence_length; ++$i) {
        my $origin = $offset + $length + $i;
        my $target = $offset + $replace_length + $i;
        $self->{string}[$target] = $self->{string}[$origin];
      }
    }
    else {
      # move last sequence to backward
      for (my $i = 0; $i < $last_sequence_length; ++$i) {
        my $origin = $self->{length} - 1 - $i;
        my $target = $offset + $replace_length + $last_sequence_length - 1 - $i;
        $self->{string}[$target] = $self->{string}[$origin];
      }
    }

    # replace with new array
    for (my $i = 0; $i < $replace_length; ++$i) {
      my $target = $offset + $i;
      $self->{string}[$target] = $replace->[$i];
    }

    $self->{length} += $replace_length - $length;
  }

  sub equals : int ($self : self, $text : SPVM::Text) {
    unless ($self->{length} == $text->length) {
      return 0;
    }
    for (my $i = 0; $i < $self->{length} - $self->{offset}; ++$i) {
      unless ($self->{string}[$self->{offset} + $i] == $text->_string->[$text->_offset + $i]) {
        return 0;
      }
    }
    return 1;
  }
}
