package SPVM::JSON {
  use SPVM::Hash;
  use SPVM::List;
  use SPVM::Int;
  use SPVM::Long;
  use SPVM::Double;
  use SPVM::JSON::Bool;
  use SPVM::Math::BigDecimal;
  use SPVM::Math::BigInteger;
  use SPVM::Math;
  use SPVM::Sort (sortstr);

  has indent : public int;
  has indent_length : public int;
  has space_before : public int;
  has space_after : public int;
  has canonical : public int;
  has relaxed : public int;
  has num_policy : public int;

  enum {
    NUM_DEFAULT,
    NUM_ALLOW_LONG,
  }

  sub DBL_DIG : int () {
    return 15;
  }

  sub LDBL_DIG : int () {
    return 18;
  }

  sub ERR : void ($die_message : string, $s : string, $start : int, $end : int) {
    my $remains = "";
    if ($end - $start >= 0) {
      $remains = substr($s, $start, $end - $start);
    }
    die $die_message . "\nRemains... '$remains'";
  }

  sub _skip_comment : void ($s : string, $i : int&, $end : int) {
    my $comment = 0;
    for (; $$i < $end ; ++$$i) {
      if ($comment == 1 && $s->[$$i] == '\n') {
        return;
      }
      if ($comment == 2) {
        unless ($s->[$$i] == '*') {
          next;
        }
        ++$$i;
        unless ($$i < $end) {
          return; # no */ is allowed
        }
        if ($s->[$$i] == '/') {
          $comment = 0;
        }
      }
      elsif ($s->[$$i] == '#') {
        $comment = 1;
      }
      elsif ($s->[$$i] == '/') {
        ++$$i;
        unless ($$i < $end) {
          ERR("Unexpected token '/'", $s, $$i, $end);
        }
        if ($s->[$$i] == '/') {
          $comment = 1;
        }
        elsif ($s->[$$i] == '*') {
          $comment = 2;
        }
        else {
          ERR("Unexpected token '/'", $s, $$i, $end);
        }
      }
      elsif ($comment == 0) {
        return;
      }
    }
  }

  sub _skip_spaces : void ($self : self, $s : string, $i : int&, $end : int) {
    for (; 1 ; ++$$i) {
      if ($self->{relaxed}) {
        _skip_comment($s, $i, $end);
      }
      if ($$i == $end) {
        return;
      }
      unless ($s->[$$i] == ' ' || $s->[$$i] == '\n' || $s->[$$i] == '\t' || $s->[$$i] == '\r') {
        last;
      }
    }
  }

  sub _skip_spaces_at_not_end : void ($self : self, $s : string, $i : int&, $end : int) {
    $self->_skip_spaces($s, $i, $end);
    if ($$i == $end) {
      ERR("Incomplete JSON", $s, $$i, $end);
    }
  }

  sub _expect_token : void ($s : string, $i : int&, $end : int, $expected : string) {
    my $length = length $expected;
    unless ($$i + $length <= $end) {
      ERR("Expected token: $expected doesn't exist", $s, $$i, $end);
    }
    my $begin = $$i;
    while (1) {
      unless ($s->[$$i] == $expected->[$$i - $begin]) {
        ERR("Expected token: $expected doesn't exist", $s, $$i, $end);
      }
      ++$$i;
      if ($$i - $begin == $length) {
        last;
      }
    }
  }

  sub _decode_string : string ($self : self, $s : string, $i : int&, $end : int) {
    my $chars = SPVM::List->new;
    _expect_token($s, $i, $end, "\"");
    my $special_char_expected = 0;
    while (1) {
      if ($$i >= $end || (!$special_char_expected && $s->[$$i] == '"')) {
        last;
      }
      my $got_char = $s->[$$i];
      if ($special_char_expected) {
        switch ((int)$got_char) {
          case 34: # '"'
          case 92: # '\\'
          {
            $chars->push(SPVM::Int->new($got_char));
            break;
          }
          case 116: { # 't'
            $chars->push(SPVM::Int->new('\t'));
            break;
          }
          case 110: { # 'n'
            $chars->push(SPVM::Int->new('\n'));
            break;
          }
          case 114: { # 'r'
            $chars->push(SPVM::Int->new('\r'));
            break;
          }
          default: {
            ERR("Undefined special char", $s, $$i, $end);
          }
        }
        $special_char_expected = 0;
      }
      elsif ($got_char == '\\') {
        $special_char_expected = 1;
      }
      else {
        if (!$self->{relaxed} && $got_char == '\t') {
          ERR("Literal ASCII tab characters are not allowed in string", $s, $$i, $end);
        }
        $chars->push(SPVM::Int->new($got_char));
      }
      ++$$i;
    }
    if ($$i == $end) {
      ERR("Invalid string. end-quote doesn't exist", $s, $$i, $end);
    }
    _expect_token($s, $i, $end, "\"");
    my $chars_length = $chars->length;
    my $value = new byte [$chars_length];
    for (my $k = 0; $k < $chars_length; ++$k) {
      my $got = ((SPVM::Int)$chars->shift)->val;
      $value->[$k] = (byte)$got;
    }
    return (string)$value;
  }

  sub _atof_scan1 : double ($s : string, $i : int, $end : int,
      $accum : double&, $expo : int&, $postdp : int, $maxdepth : int) {
    my $long_accum : long = 0;
    my $expo_accum = 0;

    # if we recurse too deep, skip all remaining digits
    # to avoid a stack overflow attack
    if (--$maxdepth <= 0) {
      while ($i < $end && ($s->[$i] - '0') < 10) {
        ++$i;
      }
    }

    while ($i < $end) {
      if ($s->[$i] == '.') {
        ++$i;
        _atof_scan1($s, $i, $end, $accum, $expo, 1, $maxdepth);
        last;
      }
      elsif ($s->[$i] == 'e' || $s->[$i] == 'E') {
        my $exp2 = 0;
        my $neg = 0;

        ++$i;

        if ($i >= $end) {
          ERR ("malformed number (no digits after e/E)", $s, $i, $end);
        }

        if ($s->[$i] == '-') {
          ++$i;
          $neg = 1;
        }
        elsif ($s->[$i] == '+') {
          ++$i;
        }

        if ($i >= $end) {
          ERR ("malformed number (no digits after e/E)", $s, $i, $end);
        }

        while ($i < $end) {
          my $dig = $s->[$i] - '0';
          if ($dig < 10) {
            $exp2 = $exp2 * 10 + $s->[$i++] - '0';
          }
          else {
            last;
          }
        }

        if ($neg) {
          $$expo -= $exp2;
        }
        else {
          $$expo += $exp2;
        }
        last;
      }
      elsif ($s->[$i] >= '0' && $s->[$i] <= '9') {
        my $dig = $s->[$i] - '0';

        ++$i;

        $long_accum = $long_accum * 10 + $dig;
        ++$expo_accum;

        # if we have too many digits, then recurse for more
        # we actually do this for rather few digits
        if ($long_accum >= (INT64_MAX() - 9) / 10) {
          if ($postdp) {
            $$expo -= $expo_accum;
          }
          _atof_scan1($s, $i, $end, $accum, $expo, $postdp, $maxdepth);
          if ($postdp) {
            $$expo += $expo_accum;
          }
          last;
        }
      }
      else {
        last;
      }
    }

    if ($postdp) {
      $$expo -= $expo_accum;
    }

    $$accum += $long_accum * SPVM::Math->pow(10, $$expo);
    $$expo += $expo_accum;
  }

  sub _atof : double ($s : string, $start : int, $end : int) {
    my $accum = 0.0;
    my $expo = 0;
    my $neg = 0;

    if ($s->[$start] == '-') {
      ++$start;
      $neg = 1;
    }

    # a recursion depth of ten gives us >>500 bits
    _atof_scan1($s, $start, $end, \$accum, \$expo, 0, 10);

    if ($neg) {
      return -$accum;
    }
    else {
      return $accum;
    }
  }

  # https://metacpan.org/pod/Cpanel::JSON::XS#number
  sub _decode_num : object ($self : self, $s : string, $i : int&, $end : int) {
    if ($s->[$$i] == 'n') {
      if ($$i + 2 < $end && substr($s, $$i, 3) eq "nan") {
        $$i += 3;
      }
      elsif ($$i + 3 < $end && substr($s, $$i, 4) eq "null") {
        $$i += 4;
      }
      else {
        ERR("malformed number.", $s, $$i, $end);
      }
      return undef;
    }

    my $is_double = 0;
    my $start = $$i;

    # minus
    if ($s->[$$i] == '-') {
      ++$$i;
    }

    if ($s->[$$i] == 'i') {
      if ($$i + 2 < $end && substr($s, $$i, 3) eq "inf") {
        $$i += 3;
      }
      else {
        ERR("malformed number.", $s, $$i, $end);
      }
      return undef;
    }

    if ($s->[$$i] == '0') {
      ++$$i;
      if ($$i < $end && ($s->[$$i] >= '0' && $s->[$$i] <= '9')) {
        ERR("malformed number (leading zero must not be followed by another digit)", $s, $$i, $end);
      }
    }
    elsif ($$i >= $end || $s->[$$i] < '0' || $s->[$$i] > '9') {
      ERR ("malformed number (no digits after initial minus)", $s, $$i, $end);
    }

    while ($$i < $end && $s->[$$i] >= '0' && $s->[$$i] <= '9') {
      ++$$i;
    }

    # frac
    if ($$i < $end && $s->[$$i] == '.') {
      ++$$i;
      if ($$i >= $end || $s->[$$i] < '0' || $s->[$$i] > '9') {
        ERR ("malformed number (no digits after decimal point)", $s, $$i, $end);
      }
      while ($$i < $end && $s->[$$i] >= '0' && $s->[$$i] <= '9') {
        ++$$i;
      }

      $is_double = 1;
    }

    # exp
    if ($$i < $end && ($s->[$$i] == 'e' || $s->[$$i] == 'E')) {
      ++$$i;

      if ($$i < $end && ($s->[$$i] == '-' || $s->[$$i] == '+')) {
        ++$$i;
      }

      if ($$i >= $end || $s->[$$i] < '0' || $s->[$$i] > '9') {
        ERR ("malformed number (no digits after exp sign)", $s, $$i, $end);
      }

      while ($$i < $end && ($s->[$$i] >= '0' && $s->[$$i] <= '9')) {
        ++$$i;
      }

      $is_double = 1;
    }

    if (!$is_double) {
      my $len = $$i - $start;

      if ($s->[$start] == '-') {
        switch ($len) {
          case 2: {
            return -(                                                                                                      $s->[$start + 1] - '0' *     1);
            break;
          }
          case 3: {
            return -(                                                                              $s->[$start + 1] * 10 + $s->[$start + 2] - '0' *    11);
            break;
          }
          case 4: {
            return -(                                                     $s->[$start + 1] * 100 + $s->[$start + 2] * 10 + $s->[$start + 3] - '0' *   111);
            break;
          }
          case 5: {
            return -(                           $s->[$start + 1] * 1000 + $s->[$start + 2] * 100 + $s->[$start + 3] * 10 + $s->[$start + 4] - '0' *  1111);
            break;
          }
          case 6: {
            return -($s->[$start + 1] * 10000 + $s->[$start + 2] * 1000 + $s->[$start + 3] * 100 + $s->[$start + 4] * 10 + $s->[$start + 5] - '0' * 11111);
            break;
          }
        }
      }
      else {
        switch ($len) {
          case 1: {
            return (                                                                                                           $s->[$start] - '0' *     1);
            break;
          }
          case 2: {
            return (                                                                                   $s->[$start] * 10 + $s->[$start + 1] - '0' *    11);
            break;
          }
          case 3: {
            return (                                                          $s->[$start] * 100 + $s->[$start + 1] * 10 + $s->[$start + 2] - '0' *   111);
            break;
          }
          case 4: {
            return (                                $s->[$start] * 1000 + $s->[$start + 1] * 100 + $s->[$start + 2] * 10 + $s->[$start + 3] - '0' *  1111);
            break;
          }
          case 5: {
            return (     $s->[$start] * 10000 + $s->[$start + 1] * 1000 + $s->[$start + 2] * 100 + $s->[$start + 3] * 10 + $s->[$start + 4] - '0' * 11111);
            break;
          }
        }
      }

      my $grok_non_neg = sub : int ($self : self,
          $s : string, $start : int, $len : int, $val : long&) {
        my $number_type = 0;
        $$val = 0;
        for (my $i = 0; $i < $len; ++$i) {
          if ($$val <= (long)INT32_MAX()) {
            $$val = $$val * 10 + $s->[$start + $i] - '0';
          }
          elsif ($$val < INT64_MAX() / 10 ||
              ($$val == INT64_MAX() / 10 && $s->[$start + $i] - '0' <= INT64_MAX() % 10)) {
            $number_type = 1;
            $$val = $$val * 10 + $s->[$start + $i] - '0';
          }
          else {
            return -1;
          }
        }
        return $number_type;
      };

      my $grok_neg = sub : int ($self : self,
          $s : string, $start : int, $len : int, $val : long&) {
        my $number_type = 0;
        $$val = 0;
        for (my $i = 0; $i < $len; ++$i) {
          if ($$val >= (long)INT32_MIN()) {
            $$val = $$val * 10 - ($s->[$start + $i] - '0');
          }
          elsif ($$val > INT64_MIN() / 10 ||
              ($$val == INT64_MIN() / 10 &&
                  $s->[$start + $i] - '0' <= -(INT64_MIN() + INT64_MIN() / 10 * 10))) {
            $number_type = 1;
            $$val = $$val * 10 - ($s->[$start + $i] - '0');
          }
          else {
            return -1;
          }
        }
        return $number_type;
      };

      my $val : long;
      my $number_type = 0;

      if ($s->[$start] == '-') {
        $number_type = $grok_neg->($s, $start + 1, $len - 1, \$val);
        if ($number_type == 0) {
          return (int)$val;
        }
        elsif ($number_type == 1) {
          return $val;
        }
      }
      else {
        $number_type = $grok_non_neg->($s, $start, $len, \$val);
        if ($number_type == 0) {
          return (int)$val;
        }
        elsif ($number_type == 1) {
          return $val;
        }
      }

      if ($s->[$start] == '-') {
        --$len;
      }

      # does not fit into long, try double
      if (DBL_DIG() >= $len) {
        return _atof($s, $start, $end);
      }

      # everything else fails, convert it to a string
      return substr($s, $start, $$i - $start);
    }

    # loss of precision here
    return _atof($s, $start, $end);
  }

  sub _decode_true : SPVM::JSON::Bool ($self : self, $s : string, $i : int&, $end : int) {
    _expect_token($s, $i, $end, "true");
    return SPVM::JSON::Bool->TRUE;
  }

  sub _decode_false : SPVM::JSON::Bool ($self : self, $s : string, $i : int&, $end : int) {
    _expect_token($s, $i, $end, "false");
    return SPVM::JSON::Bool->FALSE;
  }

  sub _decode_hash : SPVM::Hash ($self : self, $s : string, $i : int&, $end : int) {
    my $hash = SPVM::Hash->new;
    my $has_element = 0;
    _expect_token($s, $i, $end, "{");
    while (1) {
      # end of hash
      $self->_skip_spaces_at_not_end($s, $i, $end);
      if ($s->[$$i] == '}') {
        last;
      }

      # comma
      if ($has_element) {
        _expect_token($s, $i, $end, ",");
        $self->_skip_spaces_at_not_end($s, $i, $end);
        # allow last comma
        if ($self->{relaxed} && $s->[$$i] == '}') {
          last;
        }
      }
      else {
        $has_element = 1;
      }

      # key
      my $key = $self->_decode_string($s, $i, $end);

      # separator
      $self->_skip_spaces_at_not_end($s, $i, $end);
      _expect_token($s, $i, $end, ":");

      # value
      $self->_skip_spaces_at_not_end($s, $i, $end);
      $hash->set($key, $self->_decode_value($s, $i, $end));
    }
    _expect_token($s, $i, $end, "}");
    return $hash;
  }

  sub _decode_list : SPVM::List ($self : self, $s : string, $i : int&, $end : int) {
    _expect_token($s, $i, $end, "[");
    my $list = SPVM::List->new;
    my $has_element = 0;
    while (1) {
      # end of list
      $self->_skip_spaces_at_not_end($s, $i, $end);
      if ($s->[$$i] == ']') {
        last;
      }

      # comma
      if ($has_element) {
        _expect_token($s, $i, $end, ",");
        $self->_skip_spaces_at_not_end($s, $i, $end);
        # allow last comma
        if ($self->{relaxed} && $s->[$$i] == ']') {
          last;
        }
      }
      else {
        $has_element = 1;
      }
      $list->push($self->_decode_value($s, $i, $end));
    }
    _expect_token($s, $i, $end, "]");
    return $list;
  }

  sub _decode_value : object ($self : self, $s : string, $i : int&, $end : int) {
    $self->_skip_spaces_at_not_end($s, $i, $end);
    my $c = (int)($s->[$$i]);
    switch ($c) {
      case '{': {
        # objects
        return $self->_decode_hash($s, $i, $end);
        break;
      }
      case '[': {
        return $self->_decode_list($s, $i, $end);
        break;
      }
      case '"': {
        return $self->_decode_string($s, $i, $end);
        break;
      }
      case '-': case 'i': case 'n':
      case '0': case '1': case '2': case '3': case '4':
      case '5': case '6': case '7': case '8': case '9': {
        return $self->_decode_num($s, $i, $end);
        break;
      }
      case 't': {
        return $self->_decode_true($s, $i, $end);
        break;
      }
      case 'f': {
        return $self->_decode_false($s, $i, $end);
        break;
      }
      default: {
        ERR("Unexpected token.", $s, $$i, $end);
      }
    }
  }

  sub _make_indent : string ($self : self, $depth : int) {
    unless ($depth > 0 && $self->{indent} && $self->{indent_length} > 0) {
      return "";
    }
    my $sum_length = $self->{indent_length} * $depth;
    my $indent_bytes = new byte [$sum_length];
    for (my $i = 0; $i < $sum_length; ++$i) {
      $indent_bytes->[$i] = ' ';
    }
    return (string)$indent_bytes;
  }

  sub _escape_string : string ($string : string) {
    my $length = length $string;
    my $chars = SPVM::List->new;
    for (my $i = 0; $i < $length; ++$i) {
      my $got_char = (int)($string->[$i]);
      my $special = -1;
      switch ($got_char) {
        case 9: {# '\t'
          # Note: Decoded char from literal ASCII tab will be encoded with "\\t" (non-reversible).
          $special = 't';
          break;
        }
        case 10: { # '\n'
          $special = 'n';
          break;
        }
        case 13: { # '\r'
          $special = 'r';
          break;
        }
        case 34: { # '"'
          $special = '"';
          break;
        }
        case 92: { # '\\'
          $special = '\\';
          break;
        }
      }
      if ($special == -1) {
        $chars->push(SPVM::Int->new($got_char));
      }
      else {
        $chars->push(SPVM::Int->new('\\'));
        $chars->push(SPVM::Int->new($special));
      }
    }
    my $chars_length = $chars->length;
    my $escaped = new byte [$chars_length];
    for (my $k = 0; $k < $chars_length; ++$k) {
      my $got = ((SPVM::Int)$chars->shift)->val;
      $escaped->[$k] = (byte)$got;
    }
    return (string)$escaped;
  }

  sub _encode_value : string ($self : self, $o : object, $depth : int) {
    if ($o == undef) {
      # null/inf/-inf/nan
      return "null";
    }
    # objects
    elsif ($o isa SPVM::Hash) {
      my $text = "";
      if ($self->{indent}) {
        $text .= $self->_make_indent($depth);
      }
      $text .= "{";
      if ($self->{indent}) {
        $text .= "\n";
      }
      my $hash = (SPVM::Hash)$o;
      my $keys = $hash->keys;
      if ($self->{canonical}) {
        sortstr($keys);
      }
      for (my $i = 0; $i < @$keys; ++$i) {
        if ($i > 0) {
          $text .= ",";
          if ($self->{indent}) {
            $text .= "\n";
          }
        }
        if ($self->{indent}) {
          $text .= $self->_make_indent($depth + 1);
        }
        $text .= "\"" . $keys->[$i] . "\"";
        if ($self->{space_before}) {
          $text .= " ";
        }
        $text .= ":";
        if ($self->{space_after}) {
          $text .= " ";
        }
        unless ($hash->exists($keys->[$i])) {
          die "Unexpected error. Not found key: " . $keys->[$i];
        }
        $text .= $self->_encode_value($hash->get($keys->[$i]), $depth + 1);
      }
      if ($self->{indent}) {
        $text .= "\n";
        $text .= $self->_make_indent($depth);
      }
      $text .= "}";
      return $text;
    }
    elsif ($o isa SPVM::List) {
      my $text = "";
      $text .= "[";
      if ($self->{indent}) {
        $text .= "\n";
      }
      my $list = (SPVM::List)$o;
      my $length = $list->length;
      for (my $i = 0; $i < $length; ++$i) {
        if ($i > 0) {
          $text .= ",";
          if ($self->{indent}) {
            $text .= "\n";
          }
        }
        if ($self->{indent}) {
          $text .= $self->_make_indent($depth + 1);
        }
        $text .= $self->_encode_value($list->get($i), $depth + 1);
      }
      if ($self->{indent}) {
        $text .= "\n";
        $text .= $self->_make_indent($depth);
      }
      $text .= "]";
      return $text;
    }
    # primitives
    elsif ($o isa string) {
      my $escaped = _escape_string((string)$o);
      return "\"" . $escaped . "\"";
    }
    elsif ($o isa SPVM::Int) {
      return (string)(((SPVM::Int)$o)->val);
    }
    elsif ($o isa SPVM::Long) {
      return (string)(((SPVM::Long)$o)->val);
    }
    elsif ($o isa SPVM::Double) {
      return (string)(((SPVM::Double)$o)->val);
    }
    elsif ($o isa SPVM::Math::BigInteger) {
      return ((SPVM::Math::BigInteger)$o)->to_str;
    }
    elsif ($o isa SPVM::Math::BigDecimal) {
      return ((SPVM::Math::BigDecimal)$o)->to_str;
    }
    elsif ($o isa SPVM::JSON::Bool) {
      if (((SPVM::JSON::Bool)$o)->val) {
        return "true";
      }
      else {
        return "false";
      }
    }
    else {
      die "Unknown object type";
    }
  }

  sub _field_check : void ($self : self) {
    unless ($self->{num_policy} == NUM_DEFAULT() ||
        $self->{num_policy} == NUM_ALLOW_LONG()) {
      die "Not allowed value is set to num_policy field";
    }
  }

  sub new : SPVM::JSON () {
    my $json = new SPVM::JSON;
    $json->{indent} = 0;
    $json->{indent_length} = 0;
    $json->{space_before} = 0;
    $json->{space_after} = 0;
    $json->{relaxed} = 1;
    return $json;
  }

  sub encode : string ($self : self, $object : object) {
    $self->_field_check;
    unless ($object) {
      return "";
    }
    return $self->_encode_value($object, 0);
  }

  sub decode : object ($self : self, $json_text : string) {
    $self->_field_check;
    my $length = length $json_text;
    my $iter = 0;
    $self->_skip_spaces($json_text, \$iter, $length);
    if ($iter == $length) {
      return undef;
    }
    my $ret = $self->_decode_value($json_text, \$iter, $length);
    $self->_skip_spaces($json_text, \$iter, $length);
    unless ($iter == $length) {
      ERR("Not all json_text is decoded yet", $json_text, $iter, $length);
    }
    return $ret;
  }

  sub pretty : void ($self : self, $pretty : int) {
    if ($pretty) {
      $self->{indent} = 1;
      $self->{indent_length} = 3;
      $self->{space_before} = 1;
      $self->{space_after} = 1;
    }
    else {
      $self->{indent} = 0;
      $self->{indent_length} = 0;
      $self->{space_before} = 0;
      $self->{space_after} = 0;
    }
  }
}
