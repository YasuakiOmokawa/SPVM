# SPVM::Matrix::ComplexShort is created by regen/regen_matrix.pl
package SPVM::Matrix::ComplexShort {
  use SPVM::StringBuffer;
  
  has values : ro SPVM::Complex_2s[];
  has row : ro int;
  has col : ro int;
  
  sub new : SPVM::Matrix::ComplexShort ($values : SPVM::Complex_2s[], $row : int, $col : int) {
    unless ($values) {
      die "Values must defined";
    }

    unless ($row * $col == scalar @$values) {
      die "Values length must be row * col";
    }
    my $matrix = new SPVM::Matrix::ComplexShort;
    $matrix->{values} = $values;
    $matrix->{row} = $row;
    $matrix->{col} = $col;
    return $matrix;
  }

  sub new_zero : SPVM::Matrix::ComplexShort ($row : int, $col : int) {

    unless ($row > 0) {
      die "Row must be more than 0";
    }
    unless ($col > 0) {
      die "Col must be more than 0";
    }
    my $matrix = new SPVM::Matrix::ComplexShort;
    my $length = $row * $col;
    $matrix->{values} = new  SPVM::Complex_2s[$length];
    $matrix->{row} = $row;
    $matrix->{col} = $col;
    return $matrix;
  }

  sub new_ident : SPVM::Matrix::ComplexShort ($dim : int) {
    if ($dim < 1) {
      die "Dimension must be more than 0";
    }
    
    my $matrix = SPVM::Matrix::ComplexShort->new_zero($dim, $dim);
    my $values = $matrix->{values};
    for (my $i = 0; $i < $dim; $i++) {
      $values->[$i * $dim + $i] = 1;
    }

    return $matrix;
  }

  sub transpose : SPVM::Matrix::ComplexShort ($self : self) {
    my $row = $self->{row};
    my $col = $self->{col};
    my $length = $row * $col;
    
    my $mat_trans = SPVM::Matrix::ComplexShort->new(new SPVM::Complex_2s[$length], $col, $row);
    
    my $values = $self->{values};
    my $mat_trans_values = $mat_trans->{values};
    
    for (my $row_index = 0; $row_index < $row; $row_index++) {
      for (my $col_index = 0; $col_index < $col; $col_index++) {
        $mat_trans_values->[$row_index * $col + $col_index].x = $values->[$col_index * $row + $row_index].x;
        $mat_trans_values->[$row_index * $col + $col_index].y = $values->[$col_index * $row + $row_index].y;

      }
    }
    
    return $mat_trans;
  }
  
  sub str : string ($self : self) {
    my $values = $self->{values};
    my $row = $self->{row};
    my $col = $self->{col};
    my $length = $row * $col;
    
    my $buffer = SPVM::StringBuffer->new;
    for (my $row_index = 0; $row_index < $row; $row_index++) {
      for (my $elem_index = $row_index; $elem_index < $length; $elem_index += $row) {
        $buffer->push($values->[$elem_index]);
        if ($elem_index < $length - $col + 1) {
          $buffer->push(" ");
        }
      }
      $buffer->push("\n");
    }
    
    my $str = $buffer->to_string;
    
    return $str;
  }

  sub add : SPVM::Matrix::ComplexShort ($self : self, $mat : SPVM::Matrix::ComplexShort) {
    my $self_values = $self->{values};
    my $self_row = $self->{row};
    my $self_col = $self->{col};
    
    my $mat_row = $mat->{row};
    my $mat_col = $mat->{col};
    my $mat_values = $mat->{values};
    
    if ($self_row != $mat_row) {
      die "Self row must be equals to mat row";
    }

    if ($self_col != $mat_col) {
      die "Self col must be equals to mat col";
    }

    my $self_length = $self_row * $self_col;
    my $mat_result = SPVM::Matrix::ComplexShort->new(new SPVM::Complex_2s[$self_length], $self_row, $self_col);
    my $mat_result_values = $mat_result->{values};
    
    for (my $i = 0; $i < $self_length; $i++) {
      $mat_result_values->[$i] = (SPVM::Complex_2s)($self_values->[$i] + $mat_values->[$i]);
    }
    
    return $mat_result;
  }

  sub sub : SPVM::Matrix::ComplexShort ($self : self, $mat : SPVM::Matrix::ComplexShort) {
    my $self_values = $self->{values};
    my $self_row = $self->{row};
    my $self_col = $self->{col};
    
    my $mat_row = $mat->{row};
    my $mat_col = $mat->{col};
    my $mat_values = $mat->{values};
    
    if ($self_row != $mat_row) {
      die "Self row must be equals to mat row";
    }

    if ($self_col != $mat_col) {
      die "Self col must be equals to mat col";
    }

    my $self_length = $self_row * $self_col;
    my $mat_result = SPVM::Matrix::ComplexShort->new(new SPVM::Complex_2s[$self_length], $self_row, $self_col);
    my $mat_result_values = $mat_result->{values};
    
    for (my $i = 0; $i < $self_length; $i++) {
      $mat_result_values->[$i] = (SPVM::Complex_2s)($self_values->[$i] - $mat_values->[$i]);
    }
    
    return $mat_result;
  }

  sub scamul : SPVM::Matrix::ComplexShort ($self : self, $scalar : SPVM::Complex_2s) {
    my $self_values = $self->{values};
    my $self_row = $self->{row};
    my $self_col = $self->{col};

    my $self_length = $self_row * $self_col;
    my $mat_result = SPVM::Matrix::ComplexShort->new(new SPVM::Complex_2s[$self_length], $self_row, $self_col);
    my $mat_result_values = $mat_result->{values};
    
    for (my $i = 0; $i < $self_length; $i++) {
      $mat_result_values->[$i] = (SPVM::Complex_2s)($scalar * $self_values->[$i]);
    }
    
    return $mat_result;
  }

  sub mul : SPVM::Matrix::ComplexShort ($self : self, $mat : SPVM::Matrix::ComplexShort) {
    my $self_values = $self->{values};
    my $self_row = $self->{row};
    my $self_col = $self->{col};
    
    my $mat_row = $mat->{row};
    my $mat_col = $mat->{col};
    my $mat_values = $mat->{values};
    
    if ($self_col != $mat_row) {
      die "Self col must be equals to mat row";
    }

    my $mat_result_length = $self_row * $mat_col;
    my $mat_result = SPVM::Matrix::ComplexShort->new(new SPVM::Complex_2s[$mat_result_length], $self_row, $mat_col);
    my $mat_result_values = $mat_result->{values};
    my $mat_result_col = $mat_result->{col};
    my $mat_result_row = $mat_result->{row};
    
    for(my $row = 0; $row < $self_row; $row++) {
      for(my $col = 0; $col < $mat_col; $col++) {
        for(my $incol = 0; $incol < $self_col; $incol++) {
          $mat_result_values->[$row + $col * $mat_result_row]
           = (SPVM::Complex_2s)($mat_result_values->[$row + $col * $mat_result_row] + $self_values->[$row + $incol * $self_row] * $mat_values->[$incol + $col * $mat_row]);
        }
      }
    }
    
    return $mat_result;
  }
}
