# SPVM::Matrix::Long is created by regen/regen_matrix.pl
package SPVM::Matrix::Long {
  use SPVM::StringBuffer;
  
  has values : ro long[];
  has row : ro int;
  has col : ro int;
  
  sub new : SPVM::Matrix::Long ($values : long[], $row : int, $col : int) {
    unless ($values) {
      die "Values must defined";
    }

    unless ($row * $col == scalar @$values) {
      die "Values length must be row * col";
    }
    my $matrix = new SPVM::Matrix::Long;
    $matrix->{values} = $values;
    $matrix->{row} = $row;
    $matrix->{col} = $col;
    return $matrix;
  }
  
  sub transpose : SPVM::Matrix::Long ($self : self) {
    my $row = $self->{row};
    my $col = $self->{col};
    my $length = $row * $col;
    
    my $mat_trans = SPVM::Matrix::Long->new(new long[$length], $col, $row);
    
    my $values = $self->{values};
    my $mat_trans_values = $mat_trans->{values};
    
    for (my $row_index = 0; $row_index < $row; $row_index++) {
      for (my $col_index = 0; $col_index < $col; $col_index++) {
        $mat_trans_values->[$row_index * $col + $col_index] = $values->[$col_index * $row + $row_index];

      }
    }
    
    return $mat_trans;
  }
  
  sub str : string ($self : self) {
    my $values = $self->{values};
    my $row = $self->{row};
    my $col = $self->{col};
    my $length = $row * $col;
    
    my $buffer = SPVM::StringBuffer->new;
    for (my $row_index = 0; $row_index < $row; $row_index++) {
      for (my $elem_index = $row_index; $elem_index < $length; $elem_index += $row) {
        $buffer->push($values->[$elem_index]);
        if ($elem_index < $length - $col + 1) {
          $buffer->push(" ");
        }
      }
      $buffer->push("\n");
    }
    
    my $str = $buffer->to_string;
    
    return $str;
  }
}
