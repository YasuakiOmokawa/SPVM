package SPVM::CORE {
  
  # NOTE
  # SPVM::CORE is core function of SPVM
  # Don't use any ohter modules in SPVM::CORE except for default loaded modules.
  # Don't use any system calls except for print or warn statement.
  
  
  native sub reverseb : void ($nums : byte[]);
  native sub reverses : void ($nums : short[]);
  native sub reversei : void ($nums : int[]);
  native sub reversel : void ($nums : long[]);
  native sub reversef : void ($nums : float[]);
  native sub reversed : void ($nums : double[]);
  native sub reverseo : void ($objs : oarray);

  precompile sub substr : string ($string : string, $offset : int, $length : int) {
    
    if ($string == undef) {
      die "String must be defined";
    }
    
    my $string_length = length $string;
    
    if ($offset < 0 || $offset > $string_length - 1) {
      die "Invalid offset $offset";
    }
    
    if ($length < 0) {
      die "Length must be non-zero value";
    }
    
    if ($offset + $length > $string_length) {
      die "Offset + length must not be over array length";
    }
    
    my $slice = new byte[$length];
    
    my $pos = 0;
    for (my $i = $offset; $i < $offset + $length; $i++) {
      $slice->[$pos] = $string->[$i];
      $pos++;
    }
    
    return (string)$slice;
  }

  precompile sub sliceb : byte[] ($nums : byte[], $offset : int, $length : int) {
    
    if ($nums == undef) {
      die "Array must be defined";
    }
    
    my $array_length = @$nums;
    
    if ($offset < 0 || $offset > $array_length - 1) {
      die "Invalid offset $offset";
    }
    
    if ($length < 0) {
      die "Length must be non-zero value";
    }
    
    if ($offset + $length > $array_length) {
      die "Offset + length must not be over array length";
    }
    
    my $slice = new byte[$length];
    
    my $pos = 0;
    for (my $i = $offset; $i < $offset + $length; $i++) {
      $slice->[$pos] = $nums->[$i];
      $pos++;
    }
    
    return $slice;
  }

  precompile sub slices : short[] ($nums : short[], $offset : int, $length : int) {
    
    if ($nums == undef) {
      die "Array must be defined";
    }
    
    my $array_length = @$nums;
    
    if ($offset < 0 || $offset > $array_length - 1) {
      die "Invalid offset $offset";
    }
    
    if ($length < 0) {
      die "Length must be non-zero value";
    }
    
    if ($offset + $length > $array_length) {
      die "Offset + length must not be over array length";
    }
    
    my $slice = new short[$length];
    
    my $pos = 0;
    for (my $i = $offset; $i < $offset + $length; $i++) {
      $slice->[$pos] = $nums->[$i];
      $pos++;
    }
    
    return $slice;
  }

  precompile sub slicei : int[] ($nums : int[], $offset : int, $length : int) {
    
    if ($nums == undef) {
      die "Array must be defined";
    }
    
    my $array_length = @$nums;
    
    if ($offset < 0 || $offset > $array_length - 1) {
      die "Invalid offset $offset";
    }
    
    if ($length < 0) {
      die "Length must be non-zero value";
    }
    
    if ($offset + $length > $array_length) {
      die "Offset + length must not be over array length";
    }
    
    my $slice = new int[$length];
    
    my $pos = 0;
    for (my $i = $offset; $i < $offset + $length; $i++) {
      $slice->[$pos] = $nums->[$i];
      $pos++;
    }
    
    return $slice;
  }

  precompile sub slicel : long[] ($nums : long[], $offset : int, $length : int) {
    
    if ($nums == undef) {
      die "Array must be defined";
    }
    
    my $array_length = @$nums;
    
    if ($offset < 0 || $offset > $array_length - 1) {
      die "Invalid offset $offset";
    }
    
    if ($length < 0) {
      die "Length must be non-zero value";
    }
    
    if ($offset + $length > $array_length) {
      die "Offset + length must not be over array length";
    }
    
    my $slice = new long[$length];
    
    my $pos = 0;
    for (my $i = $offset; $i < $offset + $length; $i++) {
      $slice->[$pos] = $nums->[$i];
      $pos++;
    }
    
    return $slice;
  }

  precompile sub slicef : float[] ($nums : float[], $offset : int, $length : int) {
    
    if ($nums == undef) {
      die "Array must be defined";
    }
    
    my $array_length = @$nums;
    
    if ($offset < 0 || $offset > $array_length - 1) {
      die "Invalid offset $offset";
    }
    
    if ($length < 0) {
      die "Length must be non-zero value";
    }
    
    if ($offset + $length > $array_length) {
      die "Offset + length must not be over array length";
    }
    
    my $slice = new float[$length];
    
    my $pos = 0;
    for (my $i = $offset; $i < $offset + $length; $i++) {
      $slice->[$pos] = $nums->[$i];
      $pos++;
    }
    
    return $slice;
  }

  precompile sub sliced : double[] ($nums : double[], $offset : int, $length : int) {
    
    if ($nums == undef) {
      die "Array must be defined";
    }
    
    my $array_length = @$nums;
    
    if ($offset < 0 || $offset > $array_length - 1) {
      die "Invalid offset $offset";
    }
    
    if ($length < 0) {
      die "Length must be non-zero value";
    }
    
    if ($offset + $length > $array_length) {
      die "Offset + length must not be over array length";
    }
    
    my $slice = new double[$length];
    
    my $pos = 0;
    for (my $i = $offset; $i < $offset + $length; $i++) {
      $slice->[$pos] = $nums->[$i];
      $pos++;
    }
    
    return $slice;
  }

  precompile sub sliceo : oarray ($elems : oarray, $offset : int, $length : int) {
    
    if ($elems == undef) {
      die "Array must be defined";
    }
    
    my $array_length = @$elems;
    
    if ($offset < 0 || $offset > $array_length - 1) {
      die "Invalid offset $offset";
    }
    
    if ($length < 0) {
      die "Length must be non-zero value";
    }
    
    if ($offset + $length > $array_length) {
      die "Offset + length must not be over array length";
    }
    
    my $slice = new_object_array_proto($elems, $length);
    
    my $pos = 0;
    for (my $i = $offset; $i < $offset + $length; $i++) {
      $slice->[$pos] = $elems->[$i];
      $pos++;
    }
    
    return $slice;
  }
  precompile sub copy_str : string ($string : string) {
    my $bytes = (byte[])$string;
    
    return (string)$bytes;
  }
  precompile sub index : int ($str : string, $substr : string, $posision : int) {
    my $strCount = length $str;
    my $substrCount = length $substr;
    
    if ($posision >= $strCount) {
      my $ret : int;
      if ($substrCount == 0) {
        $ret = $strCount;
      }
      else {
        $ret = -1;
      }
      return $ret;
    }
    if ($posision < 0) {
      $posision = 0;
    }
    if ($substrCount == 0) {
      return $posision;
    }

    my $first : byte  = $substr->[0];
    my $max : int = ($strCount - $substrCount);

    for (my $i = $posision; $i <= $max; $i++) {
      if ($str->[$i] != $first) {
        while (++$i <= $max && $str->[$i] != $first) {}
      }

      if ($i <= $max) {
        my $j = $i + 1;
        my $end = $j + $substrCount - 1;
        for (my $k = 01; $j < $end && $str->[$j] == $substr->[$k]; ($j++, $k++)) {}

        if ($j == $end) {
          return $i;
        }
      }
    }
    return -1;
  }

  sub INT8_MIN : byte () { return -128; }
  sub INT8_MAX : byte () { return 127; }

  sub INT16_MIN : short () { return -32768; }
  sub INT16_MAX : short () { return 32767; }

  sub INT32_MIN : int () { return -2147483648; }
  sub INT32_MAX : int () { return 2147483647; }

  sub UINT32_MAX : long () { return 4294967295L; }

  sub INT64_MIN : long () { return -9223372036854775808L; }
  sub INT64_MAX : long () { return 9223372036854775807L; }

  native sub DBL_MAX : double ();
  native sub DBL_MIN : double ();

  native sub FLT_MAX : float ();
  native sub FLT_MIN : float();

  native sub memcpyb : void ($dest_data : byte[], $dest_offset : int, $src_data : byte[], $src_offset : int, $length : int);
  native sub memcpys : void ($dest_data : short[], $dest_offset : int, $src_data : short[], $src_offset : int, $length : int);
  native sub memcpyi : void ($dest_data : int[], $dest_offset : int, $src_data : int[], $src_offset : int, $length : int);
  native sub memcpyl : void ($dest_data : long[], $dest_offset : int, $src_data : long[], $src_offset : int, $length : int);
  native sub memcpyf : void ($dest_data : float[], $dest_offset : int, $src_data : float[], $src_offset : int, $length : int);
  native sub memcpyd : void ($dest_data : double[], $dest_offset : int, $src_data : double[], $src_offset : int, $length : int);

  native sub memmoveb : void ($dest_data : byte[], $dest_offset : int, $src_data : byte[], $src_offset : int, $length : int);
  native sub memmoves : void ($dest_data : short[], $dest_offset : int, $src_data : short[], $src_offset : int, $length : int);
  native sub memmovei : void ($dest_data : int[], $dest_offset : int, $src_data : int[], $src_offset : int, $length : int);
  native sub memmovel : void ($dest_data : long[], $dest_offset : int, $src_data : long[], $src_offset : int, $length : int);
  native sub memmovef : void ($dest_data : float[], $dest_offset : int, $src_data : float[], $src_offset : int, $length : int);
  native sub memmoved : void ($dest_data : double[], $dest_offset : int, $src_data : double[], $src_offset : int, $length : int);

  native sub new_object_array_proto : oarray ($proto_array : oarray, $length : int);

}
