package SPVM::Hash : private {
  use SPVM::HashEntry;

  has bucket_count : private int;
  has count : private int;
  has entries : private SPVM::HashEntry [];
  has max_load_factor : private double;

  sub _bucket_count : int ($self : self) {
    return $self->{bucket_count};
  }

  sub _entries : SPVM::HashEntry [] ($self : self) {
    return $self->{entries};
  }

  # Murmur hash for 32-bit
  # See: https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/hash_bytes.cc#L72-L112
  sub _hasher : long ($key : string, $seed : int) {
    my $pow_2_32: long = 1L << 32;
    my $m: long = 0x5bd1e995;
    my $len = length $key;
    my $hash: long = ((long)$seed ^ $len) % $pow_2_32;
    my $base = 0;
    while ($len >= 4) {
      my $k: long = (long)$key->[$base]
          + ((long)($key->[$base + 1]) << 8)
          + ((long)($key->[$base + 2]) << 16)
          + ((long)($key->[$base + 3]) << 24);
      $k *= $m;
      $k %= $pow_2_32;
      $k ^= $k >>> 24;
      $k %= $pow_2_32;
      $k *= $m;
      $k %= $pow_2_32;
      $hash *= $m;
      $hash %= $pow_2_32;
      $hash ^= $k;
      $hash %= $pow_2_32;
      $base += 4;
      $len -= 4;
    }

    switch ($len) {
      case 3:
        $hash ^= (long)($key->[$base + 2]) << 16;
        $hash %= $pow_2_32;
      case 2:
        $hash ^= (long)($key->[$base + 1]) << 8;
        $hash %= $pow_2_32;
      case 1:
        $hash ^= (long)$key->[$base];
        $hash %= $pow_2_32;
        $hash *= $m;
        $hash %= $pow_2_32;
      default: # FIXME: to avoid from segmentation fault (subroutine _hasher called twice if 'default' doesn't exist)
    }

    # Do a few final mixes of the hash.
    $hash ^= $hash >>> 13;
    $hash %= $pow_2_32;
    $hash *= $m;
    $hash %= $pow_2_32;
    $hash ^= $hash >>> 15;
    $hash %= $pow_2_32;
    return $hash;
  }

  sub _index_by_key : int ($key : string, $bucket_count : int) {
    my $default_seed = 123456789;
    return (int)(_hasher($key, $default_seed) % $bucket_count);
  }

  sub new : SPVM::Hash () {
    my $self = new SPVM::Hash;
    my $default_capacity = 32;
    $self->{bucket_count} = $default_capacity;
    $self->{entries} = new SPVM::HashEntry[$default_capacity];
    $self->{count} = 0;
    $self->{max_load_factor} = 1.0;
    return $self;
  }

  sub new_with_capacity : SPVM::Hash ($capacity : int) {
    my $self = new SPVM::Hash;
    $self->{bucket_count} = $capacity;
    $self->{entries} = new SPVM::HashEntry[$capacity];
    $self->{count} = 0;
    $self->{max_load_factor} = 1.0;
    return $self;
  }

  sub new_with_array : SPVM::Hash ($objects : object []) {
    unless (@$objects % 2 == 0) {
      croak "Odd number of elements provided";
    }
    my $self = new SPVM::Hash;
    my $capacity = 2;
    if (@$objects >= INT32_MAX / 2) {
      $capacity = INT32_MAX;
    }
    else {
      while ($capacity < @$objects / 2) {
        $capacity *= 2;
      }
    }
    $self->{bucket_count} = $capacity;
    $self->{entries} = new SPVM::HashEntry[$capacity];
    my $count = 0;
    for (my $i = 0; $i < @$objects / 2; ++$i) {
      _set_to_container($self->{entries}, $self->{bucket_count}, \$count,
          (string)($objects->[2 * $i]), $objects->[2 * $i + 1]);
    }
    $self->{count} = $count;
    $self->{max_load_factor} = 1.0;
    return $self;
  }

  sub count : int ($self : self) {
    return $self->{count};
  }

  sub _set_to_container : void ($entries : SPVM::HashEntry[], $bucket_count : int, $count_ref : int&,
                                $key : string, $val : object) {
    my $index = _index_by_key($key, $bucket_count);
    my $ref = $entries->[$index];
    unless ($ref) {
      $entries->[$index] = SPVM::HashEntry->new($key, $val, undef);
      ++$$count_ref;
      return;
    }
    while (1) {
      if ($ref->key eq $key) {
        $ref->set_val($val);
        return;
      }
      unless ($ref->next_entry) {
        $ref->set_next_entry(SPVM::HashEntry->new($key, $val, undef));
        ++$$count_ref;
        return;
      }
      $ref = $ref->next_entry;
    }
  }

  sub set : void ($self : self, $key : string, $val : object) {
    unless ($key) {
      croak "key must not be undef";
    }
    my $copied_key = copy_string $key;
    unless ($self->load_factor < $self->{max_load_factor} || $self->{bucket_count} == INT32_MAX()) {
      $self->_rehash;
    }
    my $count = $self->{count}; # To solve 'Refernece target must be numeric type or value type at ...'
    _set_to_container($self->{entries}, $self->{bucket_count}, \$count, $copied_key, $val);
    $self->{count} = $count;
  }

  sub get : object ($self : self, $key : string) {
    my $index = _index_by_key($key, $self->{bucket_count});
    my $ref = $self->{entries}->[$index];
    unless ($ref) {
      return undef;
    }
    while (1) {
      if ($ref->key eq $key) {
        return $ref->val;
      }
      unless ($ref->next_entry) {
        return undef;
      }
      $ref = $ref->next_entry;
    }
  }

  sub max_load_factor : double ($self : self) {
    return $self->{max_load_factor};
  }

  sub set_max_load_factor : void ($self : self, $max_load_factor : double) {
    $self->{max_load_factor} = $max_load_factor;
  }

  sub load_factor : double ($self : self) {
    return (double) $self->{count} / $self->{bucket_count};
  }

  sub _rehash : void ($self : self) {
    my $new_bucket_count : int;
    if ($self->{bucket_count} > INT32_MAX() / 2) {
      if ($self->{bucket_count} == INT32_MAX()) {
        return;
      }
      $new_bucket_count = INT32_MAX();
    }
    else {
      $new_bucket_count = $self->{bucket_count} * 2;
    }
    my $new_entries = new SPVM::HashEntry [$new_bucket_count];
    my $new_count = 0;
    # iterate entries
    for (my $i = 0; $i < $self->{bucket_count}; ++$i) {
      my $ref = $self->{entries}->[$i];
      while ($ref) {
        _set_to_container($new_entries, $new_bucket_count, \$new_count, $ref->key, $ref->val);
        $ref = $ref->next_entry;
      }
    }
    $self->{bucket_count} = $new_bucket_count;
    $self->{entries} = $new_entries;
  }

  sub keys : string[] ($self : self) {
    my $retval = new string[$self->{count}];
    # iterate entries
    my $count = 0;
    for (my $i = 0; $i < $self->{bucket_count}; ++$i) {
      my $ref = $self->{entries}->[$i];
      while ($ref) {
        $retval->[$count++] = $self->{entries}->[$i]->key;
        $ref = $ref->next_entry;
      }
    }
    return $retval;
  }

  sub values : object[] ($self : self) {
    my $retval = new object[$self->{count}];
    # iterate entries
    my $count = 0;
    for (my $i = 0; $i < $self->{bucket_count}; ++$i) {
      my $ref = $self->{entries}->[$i];
      while ($ref) {
        $retval->[$count++] = $self->{entries}->[$i]->val;
        $ref = $ref->next_entry;
      }
    }
    return $retval;
  }
}
