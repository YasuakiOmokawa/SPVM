package Std::Number::Util {
  sub BYTE_MIN_VALUE : byte ()  { return (byte)-128; }
  sub BYTE_MAX_VALUE : byte () { return (byte)127; }
  sub BYTE_BYTES: int () { return 1; }
  sub BYTE_SIZE: int () { return 8; }

  sub SHORT_MIN_VALUE : short () { return (short)-32768; }
  sub SHORT_MAX_VALUE : short () { return (short)32767; }
  sub SHORT_BYTES : int () { return 2; }
  sub SHORT_SIZE : int () { return 16; }

  sub INT_MIN_VALUE : int () { return -2147483648; }
  sub INT_MAX_VALUE : int () { return 2147483647; }
  sub INT_BYTES : int () { return 4; }
  sub INT_SIZE : int() { return 32; }

  sub LONG_MIN_VALUE : long () { return -9223372036854775808L; }
  sub LONG_MAX_VALUE : long () { return 9223372036854775807L; }
  sub LONG_BYTES : int () { return 8; }
  sub LONG_SIZE : int () { return 64; }

  enum {
    FLOAT_BYTES = 4,
    FLOAT_SIZE = 32,
    FLOAT_MAX_EXPONENT = 127,
    FLOAT_MIN_EXPONENT = -126,
  }
  
  native sub FLOAT_POSITIVE_INFINITY : float ();
  native sub FLOAT_NEGATIVE_INFINITY : float ();
  native sub FLOAT_NAN : float ();
  
  native sub FLOAT_MAX_VALUE : float ();
  native sub FLOAT_MIN_NORMAL : float();
  native sub FLOAT_MIN_VALUE : float();
  
  native sub float_is_infinite : int($x : float);
  native sub float_is_finite : int($x : float);
  native sub float_is_nan : int ($x : float);

  enum {
    DOUBLE_BYTES = 8,
    DOUBLE_SIZE = 64,
    DOUBLE_MAX_EXPONENT = 1023,
    DOUBLE_MIN_EXPONENT = -1022,
  }
  
  native sub DOUBLE_POSITIVE_INFINITY : double ();
  native sub DOUBLE_NEGATIVE_INFINITY : double ();
  native sub DOUBLE_NAN : double ();
  
  native sub DOUBLE_MAX_VALUE : double ();
  native sub DOUBLE_MIN_NORMAL : double ();
  native sub DOUBLE_MIN_VALUE : double ();
  
  native sub double_is_infinite : int ($x : double);
  native sub double_is_finite : int ($x : double);
  native sub double_is_nan : int ($x : double);
}
