use Float;
use Double;
use Number::Util;

package Math {
  sub PI : double ($class : class) { return 3.141592653589793; }
  sub E : double ($class : class) { return 2.718281828459045; }
  
  native sub sin : double ($class : class, $x : double);
  native sub cos : double ($class : class, $x : double);
  native sub tan : double ($class : class, $x : double);
  native sub asin : double($class : class, $x : double);
  native sub acos : double ($class : class, $x : double);
  native sub atan : double ($class : class, $x : double);
  native sub to_radians : double ($class : class, $x : double);
  native sub to_degrees : double ($class : class, $x : double);
  native sub exp : double ($class : class, $x : double);
  native sub log : double ($class : class, $x : double);
  native sub log10 : double ($class : class, $x : double);
  native sub sqrt : double ($class : class, $x : double);
  native sub cbrt : double ($class : class, $x : double);
  native sub IEEE_remainder : double ($class : class, $x1 : double, $x2 : double);
  native sub ceil : double ($class : class, $x : double);
  native sub floor : double ($class : class, $x : double);
  native sub rint : double ($class : class, $x : double);
  native sub atan2 : double ($class : class, $y : double, $x : double);
  native sub pow : double ($class : class, $x : double, $y : double);
  native sub round : double ($class : class, $x : double);
  native sub abs : int ($class : class, $x : int);
  native sub abs_long : long ($class : class, $x : long);
  native sub abs_float : float ($class : class, $x : float);
  native sub abs_double : double ($class : class, $x : double);
  
  sub max : int ($class : class, $x : int, $y : int) {
    if ($x > $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub max_long : long ($class : class, $x : long, $y : long) {
    if ($x > $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub max_float : float ($class : class, $x : float, $y : float) {
    if ($x > $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub max_double : double ($class : class, $x : double, $y : double) {
    if ($x > $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub min : int ($class : class, $x : int, $y : int) {
    if ($x < $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub min_long : long ($class : class, $x : long, $y : long) {
    if ($x < $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub min_float : float ($class : class, $x : float, $y : float) {
    if ($x < $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub min_double : double ($class : class, $x : double, $y : double) {
    if ($x < $y) {
      return $x;
    }
    else {
      return $y;
    }
  }
  
  sub signum : double ($class : class, $x : double) {
    if (Double->is_nan($x)) {
      return Double->NaN();
    }
    elsif ($x > 0.0) {
      return 1.0;
    }
    elsif ($x < 0.0) {
      return -1.0;
    }
    else {
      return 0.0;
    }
  }
  
  sub signum_float : float ($class : class, $x : float) {
    if (Number::Util->float_is_nan($x)) {
      return Number::Util->FLOAT_NAN();
    }
    elsif ($x > 0.0f) {
      return 1.0f;
    }
    elsif ($x < 0.0f) {
      return -1.0f;
    }
    else {
      return 0.0f;
    }
  }
  native sub sinh : double ($class : class, $x : double);
  native sub cosh : double ($class : class, $x : double);
  native sub tanh : double ($class : class, $x : double);
  native sub hypot : double ($class : class, $x : double, $y : double);
  native sub expm1 : double ($class : class, $x : double);
  native sub log1p : double ($class : class, $x : double);
  native sub copy_sign : double ($class : class, $magnitude : double, $sign : double);
  native sub copy_sign_float : float ($class : class, $magnitude : float, $sign : float);
  
  # TODO
  # ulp
  # getExponent
  # nextAfter
  # nextUp
  # nextDown
  # scalb
}
