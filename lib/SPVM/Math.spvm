use Double;

package Math {
  enum {
    PI = 3.141592653589793,
    E = 2.718281828459045
  }
  
  sub sin($x : double) : native double;
  sub cos($x : double) : native double;
  sub tan($x : double) : native double;
  sub asin($x : double) : native double;
  sub acos($x : double) : native double;
  sub atan($x : double) : native double;
  sub to_radians($x : double) : native double;
  sub to_degrees($x : double) : native double;
  sub exp($x : double) : native double;
  sub log($x : double) : native double;
  sub log10($x : double) : native double;
  sub sqrt($x : double) : native double;
  sub cbrt($x : double) : native double;
  sub IEEE_remainder($x1 : double, $x2 : double) : native double;
  sub ceil($x : double) : native double;
  sub floor($x : double) : native double;
  sub rint($x : double) : native double;
  sub atan2($y : double, $x : double) : native double;
  sub pow($x : double, $y : double) : native double;
  sub round($x : double) : native double;
  sub abs($x : int) : native int;
  sub abs_long($x : long) : native long;
  sub abs_float($x : float) : native float;
  sub abs_double($x : double) : native double;
  
  sub max($x : int, $y : int) : int {
    if ($x > $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub max_long($x : long, $y : long) : long {
    if ($x > $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub max_float($x : float, $y : float) : float {
    if ($x > $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub max_double($x : double, $y : double) : double {
    if ($x > $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub min($x : int, $y : int) : int {
    if ($x < $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub min_long($x : long, $y : long) : long {
    if ($x < $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub min_float($x : float, $y : float) : float {
    if ($x < $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub min_double($x : double, $y : double) : double {
    if ($x < $y) {
      return $x;
    }
    else {
      return $y;
    }
  }
  
  sub signum($x : double) : double {
    if (Double->is_nan($x)) {
      return Double->NaN;
    }
    elsif ($x > 0.0) {
      return 1.0;
    }
    elsif ($x < 0.0) {
      return -1.0;
    }
    else {
      return 0.0;
    }
  }
  
  sub signum_float($x : float) : float {
    if (Float->is_nan($x)) {
      return Float->NaN;
    }
    elsif ($x > 0.0f) {
      return 1.0f;
    }
    elsif ($x < 0.0f) {
      return -1.0f;
    }
    else {
      return 0.0f;
    }
  }
  sub sinh($x : double) : native double;
  sub cosh($x : double) : native double;
  sub tanh($x : double) : native double;
  sub hypot($x : double, $y : double) : native double;
  sub expm1($x : double) : native double;
  sub log1p($x : double) : native double;
  sub copy_sign($magnitude : double, $sign : double) : native double;

}
