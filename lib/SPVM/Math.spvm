use Float;
use Double;

package Math {
  sub PI : double () { return 3.141592653589793; }
  sub E : double () { return 2.718281828459045; }
  
  sub sin : native double ($x : double);
  sub cos : native double ($x : double);
  sub tan : native double ($x : double);
  sub asin : native double($x : double);
  sub acos : native double ($x : double);
  sub atan : native double ($x : double);
  sub to_radians : native double ($x : double);
  sub to_degrees : native double ($x : double);
  sub exp : native double ($x : double);
  sub log : native double ($x : double);
  sub log10 : native double ($x : double);
  sub sqrt : native double ($x : double);
  sub cbrt : native double ($x : double);
  sub IEEE_remainder : native double ($x1 : double, $x2 : double);
  sub ceil : native double ($x : double);
  sub floor : native double ($x : double);
  sub rint : native double ($x : double);
  sub atan2 : native double ($y : double, $x : double);
  sub pow : native double ($x : double, $y : double);
  sub round : native double ($x : double);
  sub abs : native int ($x : int);
  sub abs_long : native long ($x : long);
  sub abs_float : native float ($x : float);
  sub abs_double : native double ($x : double);
  
  sub max : int ($x : int, $y : int) {
    if ($x > $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub max_long : long ($x : long, $y : long) {
    if ($x > $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub max_float : float ($x : float, $y : float) {
    if ($x > $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub max_double : double ($x : double, $y : double) {
    if ($x > $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub min : int ($x : int, $y : int) {
    if ($x < $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub min_long : long ($x : long, $y : long) {
    if ($x < $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub min_float : float ($x : float, $y : float) {
    if ($x < $y) {
      return $x;
    }
    else {
      return $y;
    }
  }

  sub min_double : double ($x : double, $y : double) {
    if ($x < $y) {
      return $x;
    }
    else {
      return $y;
    }
  }
  
  sub signum : double ($x : double) {
    if (Double::is_nan($x)) {
      return Double::NaN();
    }
    elsif ($x > 0.0) {
      return 1.0;
    }
    elsif ($x < 0.0) {
      return -1.0;
    }
    else {
      return 0.0;
    }
  }
  
  sub signum_float : float ($x : float) {
    if (Float::is_nan($x)) {
      return Float::NaN();
    }
    elsif ($x > 0.0f) {
      return 1.0f;
    }
    elsif ($x < 0.0f) {
      return -1.0f;
    }
    else {
      return 0.0f;
    }
  }
  sub sinh : native double ($x : double);
  sub cosh : native double ($x : double);
  sub tanh : native double ($x : double);
  sub hypot : native double ($x : double, $y : double);
  sub expm1 : native double ($x : double);
  sub log1p : native double ($x : double);
  sub copy_sign : native double ($magnitude : double, $sign : double);
  sub copy_sign_float : native float ($magnitude : float, $sign : float);
  
  # TODO
  # ulp
  # getExponent
  # nextAfter
  # nextUp
  # nextDown
  # scalb
}
