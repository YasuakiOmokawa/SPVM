=head1 NAME

SPVM::Document::PerlAPI - SPVM Perl API

=head1 What is SPVM Perl API

SPVM Perl API is the API to convert Perl data to SPVM data, and SPVM data to Perl data.

This api is Perl function called from Perl script.

  use SPVM;
  
  # Create SVPM int array
  my $spvm_nums = SPVM::new_int_array([1, 2, 3]);
  
  # Convert to perl array reference
  my $nums = $spvm_nums->to_elements;

=head1 Functions

=head2 new_byte_array

Create byte array.

  my $array = SPVM::new_byte_array([1, 2, 3]);

If you get perl values, you can use C<get_elements> methods.

  my $values = $array->get_elements;

=head2 new_byte_array_bin

Create byte array from B<not decoded> Perl string.
This function is faster than C<new_byte_array_string> because the data is not encoded.

  my $array = SPVM::new_byte_array_bin("AGTCAGTC");

=head2 new_byte_array_string

Create byte array from B<decoded> Perl string.

  my $array = SPVM::new_byte_array_string("‚ ‚¢‚¤‚¦‚¨");

=head2 new_short_array

Create short array

  my $array = SPVM::new_short_array([1, 2, 3]);

If you get perl values, you can use C<get_elements> methods.

  my $values = $array->get_elements;

=head2 new_int_array

Create int array

  my $array = SPVM::new_int_array([1, 2, 3]);

If you get perl values, you can use C<get_elements> methods.

  my $values = $array->get_elements;

=head2 new_long_array

Create long array

  my $array = SPVM::new_long_array([1, 2, 3]);

If you get perl values, you can use C<get_elements> methods.

  my $values = $array->get_elements;

=head2 new_float_array

Create float array

  my $array = SPVM::new_float_array([1, 2, 3]);

If you get perl values, you can use C<get_elements> methods.

  my $values = $array->get_elements;

=head2 new_double_array

Create double array

  my $array = SPVM::new_double_array([1, 2, 3]);

If you get perl values, you can use C<get_elements> methods.

  my $values = $array->get_elements;
  
=head2 new_object_array_len

Create object array with type name and length.

  my $array = SPVM::new_object_array_len("int[]", 3);

You can set and get elements by C<set> and C<get> method.

  $array->set(1, SPVM::new_int_array([1, 2, 3]));
  my $element = $array->get(1);

=head2 new_object

Create object.

  my $object = SPVM::new_object("Point");

You can set and get value by C<set> and C<get> method.

  $object->set(x => 1);
  my $x = $object->get('x');

=head2 SPVM::Data::Array

=item * new_len

=item * set_elements

=item * set_bin

=item * set_string

=item * set_element

=item * get_element

=item * to_elements

=item * to_bin

=item * to_string
