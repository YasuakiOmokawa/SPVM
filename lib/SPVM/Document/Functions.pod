=head1 NAME

SPVM::Document::Function - SPVM Funcion(BETA before 1.0)

=head1 What is SPVM Function

SPVM Function is the API to create SPVM Data, and convert SPVM Data to Perl Data.

SPVM Data is Package Based Object and Array Object.

=head1 Functions

=head2 new_byte_array

Create byte array.

  my $array = SPVM::new_byte_array([1, 2, 3]);

If you get perl values, you can use C<get_elements> methods.

  my $values = $array->get_elements;

=head2 new_byte_array_data

Create byte array from B<not decoded> Perl string.
This function is faster than C<new_byte_array_string> because the data is not encoded.

  my $array = SPVM::new_byte_array_data("AGTCAGTC");

=head2 new_byte_array_string

Create byte array from B<decoded> Perl string.

  my $array = SPVM::new_byte_array_string("‚ ‚¢‚¤‚¦‚¨");

=head2 new_short_array

Create short array

  my $array = SPVM::new_short_array([1, 2, 3]);

If you get perl values, you can use C<get_elements> methods.

  my $values = $array->get_elements;

=head2 new_int_array

Create int array

  my $array = SPVM::new_int_array([1, 2, 3]);

If you get perl values, you can use C<get_elements> methods.

  my $values = $array->get_elements;

=head2 new_long_array

Create long array

  my $array = SPVM::new_long_array([1, 2, 3]);

If you get perl values, you can use C<get_elements> methods.

  my $values = $array->get_elements;

=head2 new_float_array

Create float array

  my $array = SPVM::new_float_array([1, 2, 3]);

If you get perl values, you can use C<get_elements> methods.

  my $values = $array->get_elements;

=head2 new_double_array

Create double array

  my $array = SPVM::new_double_array([1, 2, 3]);

If you get perl values, you can use C<get_elements> methods.

  my $values = $array->get_elements;
  
=head2 new_object_array_len

Create object array with type name and length.

  my $array = SPVM::new_object_array_len("int[]", 3);

You can set and get elements by C<set> and C<get> method.

  $array->set(1, SPVM::new_int_array([1, 2, 3]));
  my $element = $array->get(1);

=head2 new_object

Create object.

  my $object = SPVM::new_object("Point");

You can set and get value by C<set> and C<get> method.

  $object->set(x => 1);
  my $x = $object->get('x');

=head1 Object Methods

=head2 SPVM::Object::Package

=head3 new

=head3 set

=head3 get

=head2 SPVM::Object::Array

=head2 SPVM::Object::Array::Byte

=head3 new_len

=head3 set_elements

=head3 set_elements_range

=head3 set_data

=head3 set_data_range

=head3 set_string

=head3 set

=head3 get

=head3 get_elements

=head3 get_elements_range

=head3 to_data

=head3 to_data_range

=head3 to_string

=head2 SPVM::Object::Array::Short

=head3 new_len

=head3 set_elements

=head3 set_elements_range

=head3 set_data

=head3 set_data_range

=head3 set

=head3 get

=head3 get_elements

=head3 get_elements_range

=head3 to_data

=head3 to_data_range

=head2 SPVM::Object::Array::Int

=head3 new_len

=head3 set_elements

=head3 set_elements_range

=head3 set_data

=head3 set_data_range

=head3 set

=head3 get

=head3 get_elements

=head3 get_elements_range

=head3 to_data

=head3 to_data_range

=head2 SPVM::Object::Array::Long

=head3 new_len

=head3 set_elements

=head3 set_elements_range

=head3 set_data

=head3 set_data_range

=head3 set

=head3 get

=head3 get_elements

=head3 get_elements_range

=head3 to_data

=head3 to_data_range

=head2 SPVM::Object::Array::Float

=head3 new_len

=head3 set_elements

=head3 set_elements_range

=head3 set_data

=head3 set_data_range

=head3 set

=head3 get

=head3 get_elements

=head3 get_elements_range

=head3 to_data

=head3 to_data_range

=head2 SPVM::Object::Array::Double

=head3 new_len

=head3 set_elements

=head3 set_elements_range

=head3 set_data

=head3 set_data_range

=head3 set

=head3 get

=head3 get_elements

=head3 get_elements_range

=head3 to_data

=head3 to_data_range

=head2 SPVM::Object::Array::Object

=head3 new_len

=head3 set

=head3 get
