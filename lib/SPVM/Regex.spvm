package SPVM::Regex {
  use SPVM::Unicode (uchar);
  use SPVM::List;
  
  has patterns : SPVM::List;
  
  sub new : SPVM::Regex ($re_str : string) {
    my $self = new SPVM::Regex;
    
    $self->{patterns} = SPVM::List->new;
    
    $self->compile($re_str);
    
    return $self;
  }

  private sub compile : void ($self : self, $re_str : string) {
    
    unless ($re_str) {
      die "Regex string must be defined";
    }
    
    my $re_str_length = length $re_str;
    
    if ($re_str_length == 0) {
      die "Regex string must have length";
    }
    
    my $pos = 0;
    while ((my $uchar = uchar($re_str, \$pos)) >= 0) {
      switch ($uchar) {
        case '\\': {
          die "Not yet implemented ^";
          break;
        }
        case '^': {
          die "Not yet implemented ^";
          break;
        }
        case '.': {
          die "Not yet implemented .";
          break;
        }
        case '$': {
          die "Not yet implemented \$";
          break;
        }
        case '|': {
          die "Not yet implemented |";
          break;
        }
        case '(': {
          die "Not yet implemented (";
          break;
        }
        case ')': {
          die "Not yet implemented )";
          break;
        }
        case '[': {
          die "Not yet implemented [";
          break;
        }
        case ']': {
          die "Not yet implemented ]";
          break;
        }
        case '*': {
          die "Not yet implemented *";
          break;
        }
        case '+': {
          die "Not yet implemented +";
          break;
        }
        case '?': {
          die "Not yet implemented ?";
          break;
        }
        case '{': {
          die "Not yet implemented {";
          break;
        }
        case '}': {
          die "Not yet implemented }";
          break;
        }
        default: {
          my $pattern = new SPVM::Regex::Pattern;
          $pattern->{type} = SPVM::Regex::Pattern->PATTERN;
          
          $pattern->{negate} = 0;
          
          my $uchar_mim_maxs = [$uchar, $uchar];
          $pattern->{uchar_mim_maxs} = $uchar_mim_maxs;
          $pattern->{max_repeat} = 1;
          $pattern->{min_repeat} = 1;
          
          $self->{patterns}->push($pattern);
        }
      }
    }
  }
  
  sub match : string[] ($self : self, $target : string) {
    
    unless ($target) {
      die "Target string must be defined";
    }
    
    # Convert to Unicode codepoint
    my $target_uchars_list = SPVM::IntList->new;
    {
      my $target_index = 0;
      while ((my $target_uchar = uchar($target, \$target_index)) >= 0) {
        $target_uchars_list->push($target_uchar);
      }
    }
    
    my $target_uchars = $target_uchars_list->to_array;

    my $patterns = $self->{patterns};
    my $patterns_length = $patterns->length;
    
    my $target_base_index = 0;
    my $match_all = 0;
    while ($target_base_index < @$target_uchars) {
      my $target_index = $target_base_index;
      my $pattern_index = 0;
      
      while ($target_index < @$target_uchars) {
        my $target_uchar = $target_uchars->[$target_index];
        my $pattern = (SPVM::Regex::Pattern)$patterns->get($pattern_index);
        
        my $type = $pattern->{type};
        
        my $match_uchar_repeat = 0;
        my $repeat_count = 0;
        if ($type == SPVM::Regex::Pattern->PATTERN) {
          # Match uchar repeat
          my $max_repeat = $pattern->{max_repeat};
          my $min_repeat = $pattern->{min_repeat};
          for (my $repeat_index = 0; $repeat_index < $max_repeat; $repeat_index++) {
            # Match uchar
            my $match_uchar = 0;
            my $uchar_min_maxs = $pattern->{uchar_mim_maxs};
            
            for (my $min_max_index = 0; $min_max_index < @$uchar_min_maxs; $min_max_index += 2) {
              
              my $uchar_min = $uchar_min_maxs->[$min_max_index];
              my $uchar_max = $uchar_min_maxs->[$min_max_index + 1];
              
              my $match_uchar_range = 0;
              if ($target_uchar >= $uchar_min && $target_uchar <= $uchar_max) {
                $match_uchar_range = 1;
              }
              
              my $negate = $pattern->{negate};
              if ($negate) {
                $match_uchar = !$match_uchar_range;
              }
              else {
                $match_uchar = $match_uchar_range;
              }
              if ($match_uchar) {
                last;
              }
            }
            
            # Increment repeat count
            if ($match_uchar) {
              $repeat_count++;
            }
            else {
              last;
            }
          }
          if ($repeat_count >= $min_repeat) {
            $match_uchar_repeat = 1;
          }
        }
        else {
          die "Not implemented";
        }
        
        if ($match_uchar_repeat) {
          $pattern_index++;
          $target_index += $repeat_count;
        }
        else {
          last;
        }
      }
      
      if ($target_index == @$target_uchars) {
        $match_all = 1;
        last;
      }
      else {
        $target_base_index++;
      }
    }
    
    if ($match_all) {
      return new string[0];
    }
    else {
      return undef;
    }
  }
  
  sub replace : string ($self : self, $target : string, $replace : string) {
    
    return undef;
  }
}

package SPVM::Regex::Pattern {
  allow SPVM::Regex;
  
  enum {
    RE_START,
    RE_END,
    PATTERN,
    CAPTURE_START,
    CAPTURE_END,
  }
  
  has negate : byte;
  has type : byte;
  has max_repeat : int;
  has min_repeat : int;
  has uchar_mim_maxs : int[];
}
