package SPVM::Regex {
  use SPVM::Unicode (uchar);
  
  has pattern_root : SPVM::Regex::Pattern;
  
  sub new : SPVM::Regex ($re_str : string) {
    my $self = new SPVM::Regex;
    
    unless ($re_str) {
      die "Regex string must be specified\n";
    }
    
    my $pattern_root = $self->compile($re_str);
    
    $self->{pattern_root} = $pattern_root;
    
    return $self;
  }

  private sub compile : SPVM::Regex::Pattern ($self : self, $re_str : string) {
    
    my $pos = 0;
    my $pattern_root : SPVM::Regex::Pattern;
    while ((my $uchar = uchar($re_str, \$pos)) >= 0) {
      
      switch ($uchar) {
        case '\\':
          die "Not yet implemented ^";
        case '^':
          die "Not yet implemented ^";
        case '.':
          die "Not yet implemented .";
        case '$':
          die "Not yet implemented \$";
        case '|':
          die "Not yet implemented |";
        case '(':
          die "Not yet implemented (";
        case ')':
          die "Not yet implemented )";
        case '[':
          die "Not yet implemented [";
        case ']':
          die "Not yet implemented ]";
        case '*':
          die "Not yet implemented *";
        case '+':
          die "Not yet implemented +";
        case '?':
          die "Not yet implemented ?";
        case '{':
          die "Not yet implemented {";
        case '}':
          die "Not yet implemented }";
        default: {
          my $pattern = new SPVM::Regex::Pattern;
          $pattern->{type} = SPVM::Regex::Pattern->PATTERN;
          
          unless ($pattern_root) {
            $pattern_root = $pattern;
          }
        }
      }
    }

    my $node = new SPVM::Regex::Pattern;
    
    return $node;
  }
  
  sub match : byte[][] ($self : self, $str : string) {
    
    return undef;
  }
}

package SPVM::Regex::Pattern {
  allow SPVM::Regex;

  enum {
    PATTERN,
    START,
    END,
  }
  
  has type : int;
  has patterns : object[];
  has max_repeat : int;
  has min_repeat : int;
  has capture_index : int;
}
