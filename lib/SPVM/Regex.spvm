package SPVM::Regex {
  
  has re_str : string;
  has pattern_start : SPVM::Regex::Pattern;
  
  sub new : SPVM::Regex ($re_str : string) {
    my $self = new SPVM::Regex;
    
    unless ($re_str) {
      die "Regex string must be specified\n";
    }
    
    $self->{re_str} = copy_str($re_str);
  }
  
  private sub compile : void ($self : self) {
    my $node = new SPVM::Regex::Pattern;
    
    $self->{pattern_start} = $node;
  }
  
  sub match : byte[][] ($self : self, $str : string) {
    
    return undef;
  }
}

package SPVM::Regex::Pattern {
  enum {
    START,
    CHAR_PATTERN,
    END,
  }
  allow SPVM::Regex;
  
  has type : int;
  has next_patterns : SPVM::Regex::Pattern[];
  has string_byte_length : int;
  has char_ranges : SPVM::Regex::CharRange[];
}

package SPVM::Regex::CharRange {
  allow SPVM::Regex::Pattern;
  
  has u32_max : int;
  has u32_min : int;
}
